// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Organization Service
 *
 * This API is intended to manage organizations in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::organization::models;

#[derive(Debug, Serialize, Deserialize)]
pub struct V2AddOrganizationResponse {
	#[serde(rename = "details")]
	details: Option<models::V2Details>,
	#[serde(rename = "organizationId")]
	organization_id: Option<String>,
	#[serde(rename = "createdAdmins")]
	created_admins: Option<Vec<models::AddOrganizationResponseCreatedAdmin>>,
}

impl V2AddOrganizationResponse {
	pub fn new() -> V2AddOrganizationResponse {
		V2AddOrganizationResponse { details: None, organization_id: None, created_admins: None }
	}

	pub fn set_details(&mut self, details: models::V2Details) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::V2Details) -> V2AddOrganizationResponse {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V2Details> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_organization_id(&mut self, organization_id: String) {
		self.organization_id = Some(organization_id);
	}

	pub fn with_organization_id(mut self, organization_id: String) -> V2AddOrganizationResponse {
		self.organization_id = Some(organization_id);
		self
	}

	pub fn organization_id(&self) -> Option<&String> {
		self.organization_id.as_ref()
	}

	pub fn reset_organization_id(&mut self) {
		self.organization_id = None;
	}

	pub fn set_created_admins(
		&mut self,
		created_admins: Vec<models::AddOrganizationResponseCreatedAdmin>,
	) {
		self.created_admins = Some(created_admins);
	}

	pub fn with_created_admins(
		mut self,
		created_admins: Vec<models::AddOrganizationResponseCreatedAdmin>,
	) -> V2AddOrganizationResponse {
		self.created_admins = Some(created_admins);
		self
	}

	pub fn created_admins(&self) -> Option<&Vec<models::AddOrganizationResponseCreatedAdmin>> {
		self.created_admins.as_ref()
	}

	pub fn reset_created_admins(&mut self) {
		self.created_admins = None;
	}
}
