/*
 * Organization Service
 *
 * This API is intended to manage organizations in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::organization::models;

#[derive(Debug, Serialize, Deserialize)]
pub struct V2OrganizationNameQuery {
	/// Name of the organization.
	#[serde(rename = "name")]
	name: String,
	/// Defines which text equality method is used.
	#[serde(rename = "method")]
	method: Option<models::V2TextQueryMethod>,
}

impl V2OrganizationNameQuery {
	pub fn new(name: String) -> V2OrganizationNameQuery {
		V2OrganizationNameQuery { name: name, method: None }
	}

	pub fn set_name(&mut self, name: String) {
		self.name = name;
	}

	pub fn with_name(mut self, name: String) -> V2OrganizationNameQuery {
		self.name = name;
		self
	}

	pub fn name(&self) -> &String {
		&self.name
	}

	pub fn set_method(&mut self, method: models::V2TextQueryMethod) {
		self.method = Some(method);
	}

	pub fn with_method(mut self, method: models::V2TextQueryMethod) -> V2OrganizationNameQuery {
		self.method = Some(method);
		self
	}

	pub fn method(&self) -> Option<&models::V2TextQueryMethod> {
		self.method.as_ref()
	}

	pub fn reset_method(&mut self) {
		self.method = None;
	}
}
