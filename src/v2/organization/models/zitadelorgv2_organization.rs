/*
 * Organization Service
 *
 * This API is intended to manage organizations in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::organization::models;

#[derive(Debug, Serialize, Deserialize)]
pub struct Zitadelorgv2Organization {
	/// Unique identifier of the organization.
	#[serde(rename = "id")]
	id: Option<String>,
	#[serde(rename = "details")]
	details: Option<models::V2Details>,
	/// Current state of the organization, for example active, inactive and
	/// deleted.
	#[serde(rename = "state")]
	state: Option<models::V2OrganizationState>,
	/// Name of the organization.
	#[serde(rename = "name")]
	name: Option<String>,
	/// Primary domain used in the organization.
	#[serde(rename = "primaryDomain")]
	primary_domain: Option<String>,
}

impl Zitadelorgv2Organization {
	pub fn new() -> Zitadelorgv2Organization {
		Zitadelorgv2Organization {
			id: None,
			details: None,
			state: None,
			name: None,
			primary_domain: None,
		}
	}

	pub fn set_id(&mut self, id: String) {
		self.id = Some(id);
	}

	pub fn with_id(mut self, id: String) -> Zitadelorgv2Organization {
		self.id = Some(id);
		self
	}

	pub fn id(&self) -> Option<&String> {
		self.id.as_ref()
	}

	pub fn reset_id(&mut self) {
		self.id = None;
	}

	pub fn set_details(&mut self, details: models::V2Details) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::V2Details) -> Zitadelorgv2Organization {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V2Details> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_state(&mut self, state: models::V2OrganizationState) {
		self.state = Some(state);
	}

	pub fn with_state(mut self, state: models::V2OrganizationState) -> Zitadelorgv2Organization {
		self.state = Some(state);
		self
	}

	pub fn state(&self) -> Option<&models::V2OrganizationState> {
		self.state.as_ref()
	}

	pub fn reset_state(&mut self) {
		self.state = None;
	}

	pub fn set_name(&mut self, name: String) {
		self.name = Some(name);
	}

	pub fn with_name(mut self, name: String) -> Zitadelorgv2Organization {
		self.name = Some(name);
		self
	}

	pub fn name(&self) -> Option<&String> {
		self.name.as_ref()
	}

	pub fn reset_name(&mut self) {
		self.name = None;
	}

	pub fn set_primary_domain(&mut self, primary_domain: String) {
		self.primary_domain = Some(primary_domain);
	}

	pub fn with_primary_domain(mut self, primary_domain: String) -> Zitadelorgv2Organization {
		self.primary_domain = Some(primary_domain);
		self
	}

	pub fn primary_domain(&self) -> Option<&String> {
		self.primary_domain.as_ref()
	}

	pub fn reset_primary_domain(&mut self) {
		self.primary_domain = None;
	}
}
