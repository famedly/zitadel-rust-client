/*
 * Organization Service
 *
 * This API is intended to manage organizations in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::organization::models;

#[derive(Debug, Serialize, Deserialize)]
pub struct AddOrganizationRequestAdmin {
	#[serde(rename = "userId")]
	user_id: Option<String>,
	#[serde(rename = "human")]
	human: Option<models::V2AddHumanUserRequest>,
	#[serde(rename = "roles")]
	roles: Option<Vec<String>>,
}

impl AddOrganizationRequestAdmin {
	pub fn new() -> AddOrganizationRequestAdmin {
		AddOrganizationRequestAdmin { user_id: None, human: None, roles: None }
	}

	pub fn set_user_id(&mut self, user_id: String) {
		self.user_id = Some(user_id);
	}

	pub fn with_user_id(mut self, user_id: String) -> AddOrganizationRequestAdmin {
		self.user_id = Some(user_id);
		self
	}

	pub fn user_id(&self) -> Option<&String> {
		self.user_id.as_ref()
	}

	pub fn reset_user_id(&mut self) {
		self.user_id = None;
	}

	pub fn set_human(&mut self, human: models::V2AddHumanUserRequest) {
		self.human = Some(human);
	}

	pub fn with_human(
		mut self,
		human: models::V2AddHumanUserRequest,
	) -> AddOrganizationRequestAdmin {
		self.human = Some(human);
		self
	}

	pub fn human(&self) -> Option<&models::V2AddHumanUserRequest> {
		self.human.as_ref()
	}

	pub fn reset_human(&mut self) {
		self.human = None;
	}

	pub fn set_roles(&mut self, roles: Vec<String>) {
		self.roles = Some(roles);
	}

	pub fn with_roles(mut self, roles: Vec<String>) -> AddOrganizationRequestAdmin {
		self.roles = Some(roles);
		self
	}

	pub fn roles(&self) -> Option<&Vec<String>> {
		self.roles.as_ref()
	}

	pub fn reset_roles(&mut self) {
		self.roles = None;
	}
}
