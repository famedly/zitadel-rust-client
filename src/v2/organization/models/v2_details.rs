/*
 * Organization Service
 *
 * This API is intended to manage organizations in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::organization::models;

#[derive(Debug, Serialize, Deserialize)]
pub struct V2Details {
	/// on read: the sequence of the last event reduced by the projection  on
	/// manipulation: the timestamp of the event(s) added by the manipulation
	#[serde(rename = "sequence")]
	sequence: Option<String>,
	/// on read: the timestamp of the last event reduced by the projection  on
	/// manipulation: the timestamp of the event(s) added by the manipulation
	#[serde(rename = "changeDate")]
	change_date: Option<String>,
	#[serde(rename = "resourceOwner")]
	resource_owner: Option<String>,
}

impl V2Details {
	pub fn new() -> V2Details {
		V2Details { sequence: None, change_date: None, resource_owner: None }
	}

	pub fn set_sequence(&mut self, sequence: String) {
		self.sequence = Some(sequence);
	}

	pub fn with_sequence(mut self, sequence: String) -> V2Details {
		self.sequence = Some(sequence);
		self
	}

	pub fn sequence(&self) -> Option<&String> {
		self.sequence.as_ref()
	}

	pub fn reset_sequence(&mut self) {
		self.sequence = None;
	}

	pub fn set_change_date(&mut self, change_date: String) {
		self.change_date = Some(change_date);
	}

	pub fn with_change_date(mut self, change_date: String) -> V2Details {
		self.change_date = Some(change_date);
		self
	}

	pub fn change_date(&self) -> Option<&String> {
		self.change_date.as_ref()
	}

	pub fn reset_change_date(&mut self) {
		self.change_date = None;
	}

	pub fn set_resource_owner(&mut self, resource_owner: String) {
		self.resource_owner = Some(resource_owner);
	}

	pub fn with_resource_owner(mut self, resource_owner: String) -> V2Details {
		self.resource_owner = Some(resource_owner);
		self
	}

	pub fn resource_owner(&self) -> Option<&String> {
		self.resource_owner.as_ref()
	}

	pub fn reset_resource_owner(&mut self) {
		self.resource_owner = None;
	}
}
