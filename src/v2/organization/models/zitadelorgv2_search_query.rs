// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Organization Service
 *
 * This API is intended to manage organizations in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::organization::models;

#[derive(Debug, Serialize, Deserialize)]
pub struct Zitadelorgv2SearchQuery {
	#[serde(rename = "nameQuery")]
	name_query: Option<models::V2OrganizationNameQuery>,
	#[serde(rename = "domainQuery")]
	domain_query: Option<models::V2OrganizationDomainQuery>,
	#[serde(rename = "stateQuery")]
	state_query: Option<models::V2OrganizationStateQuery>,
	#[serde(rename = "idQuery")]
	id_query: Option<models::V2OrganizationIdQuery>,
	#[serde(rename = "defaultQuery")]
	default_query: Option<models::V2DefaultOrganizationQuery>,
}

impl Zitadelorgv2SearchQuery {
	pub fn new() -> Zitadelorgv2SearchQuery {
		Zitadelorgv2SearchQuery {
			name_query: None,
			domain_query: None,
			state_query: None,
			id_query: None,
			default_query: None,
		}
	}

	pub fn set_name_query(&mut self, name_query: models::V2OrganizationNameQuery) {
		self.name_query = Some(name_query);
	}

	pub fn with_name_query(
		mut self,
		name_query: models::V2OrganizationNameQuery,
	) -> Zitadelorgv2SearchQuery {
		self.name_query = Some(name_query);
		self
	}

	pub fn name_query(&self) -> Option<&models::V2OrganizationNameQuery> {
		self.name_query.as_ref()
	}

	pub fn reset_name_query(&mut self) {
		self.name_query = None;
	}

	pub fn set_domain_query(&mut self, domain_query: models::V2OrganizationDomainQuery) {
		self.domain_query = Some(domain_query);
	}

	pub fn with_domain_query(
		mut self,
		domain_query: models::V2OrganizationDomainQuery,
	) -> Zitadelorgv2SearchQuery {
		self.domain_query = Some(domain_query);
		self
	}

	pub fn domain_query(&self) -> Option<&models::V2OrganizationDomainQuery> {
		self.domain_query.as_ref()
	}

	pub fn reset_domain_query(&mut self) {
		self.domain_query = None;
	}

	pub fn set_state_query(&mut self, state_query: models::V2OrganizationStateQuery) {
		self.state_query = Some(state_query);
	}

	pub fn with_state_query(
		mut self,
		state_query: models::V2OrganizationStateQuery,
	) -> Zitadelorgv2SearchQuery {
		self.state_query = Some(state_query);
		self
	}

	pub fn state_query(&self) -> Option<&models::V2OrganizationStateQuery> {
		self.state_query.as_ref()
	}

	pub fn reset_state_query(&mut self) {
		self.state_query = None;
	}

	pub fn set_id_query(&mut self, id_query: models::V2OrganizationIdQuery) {
		self.id_query = Some(id_query);
	}

	pub fn with_id_query(
		mut self,
		id_query: models::V2OrganizationIdQuery,
	) -> Zitadelorgv2SearchQuery {
		self.id_query = Some(id_query);
		self
	}

	pub fn id_query(&self) -> Option<&models::V2OrganizationIdQuery> {
		self.id_query.as_ref()
	}

	pub fn reset_id_query(&mut self) {
		self.id_query = None;
	}

	pub fn set_default_query(&mut self, default_query: models::V2DefaultOrganizationQuery) {
		self.default_query = Some(default_query);
	}

	pub fn with_default_query(
		mut self,
		default_query: models::V2DefaultOrganizationQuery,
	) -> Zitadelorgv2SearchQuery {
		self.default_query = Some(default_query);
		self
	}

	pub fn default_query(&self) -> Option<&models::V2DefaultOrganizationQuery> {
		self.default_query.as_ref()
	}

	pub fn reset_default_query(&mut self) {
		self.default_query = None;
	}
}
