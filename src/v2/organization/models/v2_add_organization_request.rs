/*
 * Organization Service
 *
 * This API is intended to manage organizations in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::organization::models;

#[derive(Debug, Serialize, Deserialize)]
pub struct V2AddOrganizationRequest {
	#[serde(rename = "name")]
	name: String,
	#[serde(rename = "admins")]
	admins: Option<Vec<models::AddOrganizationRequestAdmin>>,
}

impl V2AddOrganizationRequest {
	pub fn new(name: String) -> V2AddOrganizationRequest {
		V2AddOrganizationRequest { name: name, admins: None }
	}

	pub fn set_name(&mut self, name: String) {
		self.name = name;
	}

	pub fn with_name(mut self, name: String) -> V2AddOrganizationRequest {
		self.name = name;
		self
	}

	pub fn name(&self) -> &String {
		&self.name
	}

	pub fn set_admins(&mut self, admins: Vec<models::AddOrganizationRequestAdmin>) {
		self.admins = Some(admins);
	}

	pub fn with_admins(
		mut self,
		admins: Vec<models::AddOrganizationRequestAdmin>,
	) -> V2AddOrganizationRequest {
		self.admins = Some(admins);
		self
	}

	pub fn admins(&self) -> Option<&Vec<models::AddOrganizationRequestAdmin>> {
		self.admins.as_ref()
	}

	pub fn reset_admins(&mut self) {
		self.admins = None;
	}
}
