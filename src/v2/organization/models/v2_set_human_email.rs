/*
 * Organization Service
 *
 * This API is intended to manage organizations in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::organization::models;

#[derive(Debug, Serialize, Deserialize)]
pub struct V2SetHumanEmail {
	#[serde(rename = "email")]
	email: String,
	#[serde(rename = "sendCode")]
	send_code: Option<models::V2SendEmailVerificationCode>,
	#[serde(rename = "returnCode")]
	return_code: Option<models::V2ReturnEmailVerificationCode>,
	#[serde(rename = "isVerified")]
	is_verified: Option<bool>,
}

impl V2SetHumanEmail {
	pub fn new(email: String) -> V2SetHumanEmail {
		V2SetHumanEmail { email: email, send_code: None, return_code: None, is_verified: None }
	}

	pub fn set_email(&mut self, email: String) {
		self.email = email;
	}

	pub fn with_email(mut self, email: String) -> V2SetHumanEmail {
		self.email = email;
		self
	}

	pub fn email(&self) -> &String {
		&self.email
	}

	pub fn set_send_code(&mut self, send_code: models::V2SendEmailVerificationCode) {
		self.send_code = Some(send_code);
	}

	pub fn with_send_code(
		mut self,
		send_code: models::V2SendEmailVerificationCode,
	) -> V2SetHumanEmail {
		self.send_code = Some(send_code);
		self
	}

	pub fn send_code(&self) -> Option<&models::V2SendEmailVerificationCode> {
		self.send_code.as_ref()
	}

	pub fn reset_send_code(&mut self) {
		self.send_code = None;
	}

	pub fn set_return_code(&mut self, return_code: models::V2ReturnEmailVerificationCode) {
		self.return_code = Some(return_code);
	}

	pub fn with_return_code(
		mut self,
		return_code: models::V2ReturnEmailVerificationCode,
	) -> V2SetHumanEmail {
		self.return_code = Some(return_code);
		self
	}

	pub fn return_code(&self) -> Option<&models::V2ReturnEmailVerificationCode> {
		self.return_code.as_ref()
	}

	pub fn reset_return_code(&mut self) {
		self.return_code = None;
	}

	pub fn set_is_verified(&mut self, is_verified: bool) {
		self.is_verified = Some(is_verified);
	}

	pub fn with_is_verified(mut self, is_verified: bool) -> V2SetHumanEmail {
		self.is_verified = Some(is_verified);
		self
	}

	pub fn is_verified(&self) -> Option<&bool> {
		self.is_verified.as_ref()
	}

	pub fn reset_is_verified(&mut self) {
		self.is_verified = None;
	}
}
