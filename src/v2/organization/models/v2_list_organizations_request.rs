/*
 * Organization Service
 *
 * This API is intended to manage organizations in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::organization::models;

#[derive(Debug, Serialize, Deserialize)]
pub struct V2ListOrganizationsRequest {
	#[serde(rename = "query")]
	query: Option<models::V2ListQuery>,
	#[serde(rename = "sortingColumn")]
	sorting_column: Option<models::V2OrganizationFieldName>,
	#[serde(rename = "queries")]
	queries: Option<Vec<models::Zitadelorgv2SearchQuery>>,
}

impl V2ListOrganizationsRequest {
	pub fn new() -> V2ListOrganizationsRequest {
		V2ListOrganizationsRequest { query: None, sorting_column: None, queries: None }
	}

	pub fn set_query(&mut self, query: models::V2ListQuery) {
		self.query = Some(query);
	}

	pub fn with_query(mut self, query: models::V2ListQuery) -> V2ListOrganizationsRequest {
		self.query = Some(query);
		self
	}

	pub fn query(&self) -> Option<&models::V2ListQuery> {
		self.query.as_ref()
	}

	pub fn reset_query(&mut self) {
		self.query = None;
	}

	pub fn set_sorting_column(&mut self, sorting_column: models::V2OrganizationFieldName) {
		self.sorting_column = Some(sorting_column);
	}

	pub fn with_sorting_column(
		mut self,
		sorting_column: models::V2OrganizationFieldName,
	) -> V2ListOrganizationsRequest {
		self.sorting_column = Some(sorting_column);
		self
	}

	pub fn sorting_column(&self) -> Option<&models::V2OrganizationFieldName> {
		self.sorting_column.as_ref()
	}

	pub fn reset_sorting_column(&mut self) {
		self.sorting_column = None;
	}

	pub fn set_queries(&mut self, queries: Vec<models::Zitadelorgv2SearchQuery>) {
		self.queries = Some(queries);
	}

	pub fn with_queries(
		mut self,
		queries: Vec<models::Zitadelorgv2SearchQuery>,
	) -> V2ListOrganizationsRequest {
		self.queries = Some(queries);
		self
	}

	pub fn queries(&self) -> Option<&Vec<models::Zitadelorgv2SearchQuery>> {
		self.queries.as_ref()
	}

	pub fn reset_queries(&mut self) {
		self.queries = None;
	}
}
