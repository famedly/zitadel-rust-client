// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1User {
	#[serde(rename = "id")]
	id: Option<String>,
	#[serde(rename = "details")]
	details: Option<models::V1ObjectDetails>,
	/// current state of the user
	#[serde(rename = "state")]
	state: Option<models::V1UserState>,
	#[serde(rename = "userName")]
	user_name: Option<String>,
	#[serde(rename = "loginNames")]
	login_names: Option<Vec<String>>,
	#[serde(rename = "preferredLoginName")]
	preferred_login_name: Option<String>,
	/// one of type use human or machine
	#[serde(rename = "human")]
	human: Option<models::Userv1Human>,
	/// one of type use human or machine
	#[serde(rename = "machine")]
	machine: Option<models::Userv1Machine>,
}

impl V1User {
	pub fn new() -> V1User {
		V1User {
			id: None,
			details: None,
			state: None,
			user_name: None,
			login_names: None,
			preferred_login_name: None,
			human: None,
			machine: None,
		}
	}

	pub fn set_id(&mut self, id: String) {
		self.id = Some(id);
	}

	pub fn with_id(mut self, id: String) -> V1User {
		self.id = Some(id);
		self
	}

	pub fn id(&self) -> Option<&String> {
		self.id.as_ref()
	}

	pub fn reset_id(&mut self) {
		self.id = None;
	}

	pub fn set_details(&mut self, details: models::V1ObjectDetails) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::V1ObjectDetails) -> V1User {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V1ObjectDetails> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_state(&mut self, state: models::V1UserState) {
		self.state = Some(state);
	}

	pub fn with_state(mut self, state: models::V1UserState) -> V1User {
		self.state = Some(state);
		self
	}

	pub fn state(&self) -> Option<&models::V1UserState> {
		self.state.as_ref()
	}

	pub fn reset_state(&mut self) {
		self.state = None;
	}

	pub fn set_user_name(&mut self, user_name: String) {
		self.user_name = Some(user_name);
	}

	pub fn with_user_name(mut self, user_name: String) -> V1User {
		self.user_name = Some(user_name);
		self
	}

	pub fn user_name(&self) -> Option<&String> {
		self.user_name.as_ref()
	}

	pub fn reset_user_name(&mut self) {
		self.user_name = None;
	}

	pub fn set_login_names(&mut self, login_names: Vec<String>) {
		self.login_names = Some(login_names);
	}

	pub fn with_login_names(mut self, login_names: Vec<String>) -> V1User {
		self.login_names = Some(login_names);
		self
	}

	pub fn login_names(&self) -> Option<&Vec<String>> {
		self.login_names.as_ref()
	}

	pub fn reset_login_names(&mut self) {
		self.login_names = None;
	}

	pub fn set_preferred_login_name(&mut self, preferred_login_name: String) {
		self.preferred_login_name = Some(preferred_login_name);
	}

	pub fn with_preferred_login_name(mut self, preferred_login_name: String) -> V1User {
		self.preferred_login_name = Some(preferred_login_name);
		self
	}

	pub fn preferred_login_name(&self) -> Option<&String> {
		self.preferred_login_name.as_ref()
	}

	pub fn reset_preferred_login_name(&mut self) {
		self.preferred_login_name = None;
	}

	pub fn set_human(&mut self, human: models::Userv1Human) {
		self.human = Some(human);
	}

	pub fn with_human(mut self, human: models::Userv1Human) -> V1User {
		self.human = Some(human);
		self
	}

	pub fn human(&self) -> Option<&models::Userv1Human> {
		self.human.as_ref()
	}

	pub fn reset_human(&mut self) {
		self.human = None;
	}

	pub fn set_machine(&mut self, machine: models::Userv1Machine) {
		self.machine = Some(machine);
	}

	pub fn with_machine(mut self, machine: models::Userv1Machine) -> V1User {
		self.machine = Some(machine);
		self
	}

	pub fn machine(&self) -> Option<&models::Userv1Machine> {
		self.machine.as_ref()
	}

	pub fn reset_machine(&mut self) {
		self.machine = None;
	}
}
