/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1ListDetails {
  #[serde(rename = "totalResult")]
  total_result: Option<String>,
  #[serde(rename = "processedSequence")]
  processed_sequence: Option<String>,
  /// the last time the view got updated
  #[serde(rename = "viewTimestamp")]
  view_timestamp: Option<String>
}

impl V1ListDetails {
  pub fn new() -> V1ListDetails {
    V1ListDetails {
      total_result: None,
      processed_sequence: None,
      view_timestamp: None
    }
  }

  pub fn set_total_result(&mut self, total_result: String) {
    self.total_result = Some(total_result);
  }

  pub fn with_total_result(mut self, total_result: String) -> V1ListDetails {
    self.total_result = Some(total_result);
    self
  }

  pub fn total_result(&self) -> Option<&String> {
    self.total_result.as_ref()
  }

  pub fn reset_total_result(&mut self) {
    self.total_result = None;
  }

  pub fn set_processed_sequence(&mut self, processed_sequence: String) {
    self.processed_sequence = Some(processed_sequence);
  }

  pub fn with_processed_sequence(mut self, processed_sequence: String) -> V1ListDetails {
    self.processed_sequence = Some(processed_sequence);
    self
  }

  pub fn processed_sequence(&self) -> Option<&String> {
    self.processed_sequence.as_ref()
  }

  pub fn reset_processed_sequence(&mut self) {
    self.processed_sequence = None;
  }

  pub fn set_view_timestamp(&mut self, view_timestamp: String) {
    self.view_timestamp = Some(view_timestamp);
  }

  pub fn with_view_timestamp(mut self, view_timestamp: String) -> V1ListDetails {
    self.view_timestamp = Some(view_timestamp);
    self
  }

  pub fn view_timestamp(&self) -> Option<&String> {
    self.view_timestamp.as_ref()
  }

  pub fn reset_view_timestamp(&mut self) {
    self.view_timestamp = None;
  }

}



