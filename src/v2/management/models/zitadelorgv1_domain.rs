/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct Zitadelorgv1Domain {
	#[serde(rename = "orgId")]
	org_id: Option<String>,
	#[serde(rename = "details")]
	details: Option<models::V1ObjectDetails>,
	#[serde(rename = "domainName")]
	domain_name: Option<String>,
	/// defines if the domain is verified
	#[serde(rename = "isVerified")]
	is_verified: Option<bool>,
	/// defines if the domain is the primary domain
	#[serde(rename = "isPrimary")]
	is_primary: Option<bool>,
	/// defines the protocol the domain was validated with
	#[serde(rename = "validationType")]
	validation_type: Option<models::V1DomainValidationType>,
}

impl Zitadelorgv1Domain {
	pub fn new() -> Zitadelorgv1Domain {
		Zitadelorgv1Domain {
			org_id: None,
			details: None,
			domain_name: None,
			is_verified: None,
			is_primary: None,
			validation_type: None,
		}
	}

	pub fn set_org_id(&mut self, org_id: String) {
		self.org_id = Some(org_id);
	}

	pub fn with_org_id(mut self, org_id: String) -> Zitadelorgv1Domain {
		self.org_id = Some(org_id);
		self
	}

	pub fn org_id(&self) -> Option<&String> {
		self.org_id.as_ref()
	}

	pub fn reset_org_id(&mut self) {
		self.org_id = None;
	}

	pub fn set_details(&mut self, details: models::V1ObjectDetails) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::V1ObjectDetails) -> Zitadelorgv1Domain {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V1ObjectDetails> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_domain_name(&mut self, domain_name: String) {
		self.domain_name = Some(domain_name);
	}

	pub fn with_domain_name(mut self, domain_name: String) -> Zitadelorgv1Domain {
		self.domain_name = Some(domain_name);
		self
	}

	pub fn domain_name(&self) -> Option<&String> {
		self.domain_name.as_ref()
	}

	pub fn reset_domain_name(&mut self) {
		self.domain_name = None;
	}

	pub fn set_is_verified(&mut self, is_verified: bool) {
		self.is_verified = Some(is_verified);
	}

	pub fn with_is_verified(mut self, is_verified: bool) -> Zitadelorgv1Domain {
		self.is_verified = Some(is_verified);
		self
	}

	pub fn is_verified(&self) -> Option<&bool> {
		self.is_verified.as_ref()
	}

	pub fn reset_is_verified(&mut self) {
		self.is_verified = None;
	}

	pub fn set_is_primary(&mut self, is_primary: bool) {
		self.is_primary = Some(is_primary);
	}

	pub fn with_is_primary(mut self, is_primary: bool) -> Zitadelorgv1Domain {
		self.is_primary = Some(is_primary);
		self
	}

	pub fn is_primary(&self) -> Option<&bool> {
		self.is_primary.as_ref()
	}

	pub fn reset_is_primary(&mut self) {
		self.is_primary = None;
	}

	pub fn set_validation_type(&mut self, validation_type: models::V1DomainValidationType) {
		self.validation_type = Some(validation_type);
	}

	pub fn with_validation_type(
		mut self,
		validation_type: models::V1DomainValidationType,
	) -> Zitadelorgv1Domain {
		self.validation_type = Some(validation_type);
		self
	}

	pub fn validation_type(&self) -> Option<&models::V1DomainValidationType> {
		self.validation_type.as_ref()
	}

	pub fn reset_validation_type(&mut self) {
		self.validation_type = None;
	}
}
