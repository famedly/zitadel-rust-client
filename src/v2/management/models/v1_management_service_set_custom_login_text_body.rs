// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1ManagementServiceSetCustomLoginTextBody {
	#[serde(rename = "selectAccountText")]
	select_account_text: Option<models::V1SelectAccountScreenText>,
	#[serde(rename = "loginText")]
	login_text: Option<models::V1LoginScreenText>,
	#[serde(rename = "passwordText")]
	password_text: Option<models::V1PasswordScreenText>,
	#[serde(rename = "usernameChangeText")]
	username_change_text: Option<models::V1UsernameChangeScreenText>,
	#[serde(rename = "usernameChangeDoneText")]
	username_change_done_text: Option<models::V1UsernameChangeDoneScreenText>,
	#[serde(rename = "initPasswordText")]
	init_password_text: Option<models::V1InitPasswordScreenText>,
	#[serde(rename = "initPasswordDoneText")]
	init_password_done_text: Option<models::V1InitPasswordDoneScreenText>,
	#[serde(rename = "emailVerificationText")]
	email_verification_text: Option<models::V1EmailVerificationScreenText>,
	#[serde(rename = "emailVerificationDoneText")]
	email_verification_done_text: Option<models::V1EmailVerificationDoneScreenText>,
	#[serde(rename = "initializeUserText")]
	initialize_user_text: Option<models::V1InitializeUserScreenText>,
	#[serde(rename = "initializeDoneText")]
	initialize_done_text: Option<models::V1InitializeUserDoneScreenText>,
	#[serde(rename = "initMfaPromptText")]
	init_mfa_prompt_text: Option<models::V1InitMfaPromptScreenText>,
	#[serde(rename = "initMfaOtpText")]
	init_mfa_otp_text: Option<models::V1InitMfaotpScreenText>,
	#[serde(rename = "initMfaU2fText")]
	init_mfa_u2f_text: Option<models::V1InitMfau2FScreenText>,
	#[serde(rename = "initMfaDoneText")]
	init_mfa_done_text: Option<models::V1InitMfaDoneScreenText>,
	#[serde(rename = "mfaProvidersText")]
	mfa_providers_text: Option<models::V1MfaProvidersText>,
	#[serde(rename = "verifyMfaOtpText")]
	verify_mfa_otp_text: Option<models::V1VerifyMfaotpScreenText>,
	#[serde(rename = "verifyMfaU2fText")]
	verify_mfa_u2f_text: Option<models::V1VerifyMfau2FScreenText>,
	#[serde(rename = "passwordlessText")]
	passwordless_text: Option<models::V1PasswordlessScreenText>,
	#[serde(rename = "passwordChangeText")]
	password_change_text: Option<models::V1PasswordChangeScreenText>,
	#[serde(rename = "passwordChangeDoneText")]
	password_change_done_text: Option<models::V1PasswordChangeDoneScreenText>,
	#[serde(rename = "passwordResetDoneText")]
	password_reset_done_text: Option<models::V1PasswordResetDoneScreenText>,
	#[serde(rename = "registrationOptionText")]
	registration_option_text: Option<models::V1RegistrationOptionScreenText>,
	#[serde(rename = "registrationUserText")]
	registration_user_text: Option<models::V1RegistrationUserScreenText>,
	#[serde(rename = "registrationOrgText")]
	registration_org_text: Option<models::V1RegistrationOrgScreenText>,
	#[serde(rename = "linkingUserDoneText")]
	linking_user_done_text: Option<models::V1LinkingUserDoneScreenText>,
	#[serde(rename = "externalUserNotFoundText")]
	external_user_not_found_text: Option<models::V1ExternalUserNotFoundScreenText>,
	#[serde(rename = "successLoginText")]
	success_login_text: Option<models::V1SuccessLoginScreenText>,
	#[serde(rename = "logoutText")]
	logout_text: Option<models::V1LogoutDoneScreenText>,
	#[serde(rename = "footerText")]
	footer_text: Option<models::V1FooterText>,
	#[serde(rename = "passwordlessPromptText")]
	passwordless_prompt_text: Option<models::V1PasswordlessPromptScreenText>,
	#[serde(rename = "passwordlessRegistrationText")]
	passwordless_registration_text: Option<models::V1PasswordlessRegistrationScreenText>,
	#[serde(rename = "passwordlessRegistrationDoneText")]
	passwordless_registration_done_text: Option<models::V1PasswordlessRegistrationDoneScreenText>,
	#[serde(rename = "externalRegistrationUserOverviewText")]
	external_registration_user_overview_text:
		Option<models::V1ExternalRegistrationUserOverviewScreenText>,
	#[serde(rename = "linkingUserPromptText")]
	linking_user_prompt_text: Option<models::V1LinkingUserPromptScreenText>,
}

impl V1ManagementServiceSetCustomLoginTextBody {
	pub fn new() -> V1ManagementServiceSetCustomLoginTextBody {
		V1ManagementServiceSetCustomLoginTextBody {
			select_account_text: None,
			login_text: None,
			password_text: None,
			username_change_text: None,
			username_change_done_text: None,
			init_password_text: None,
			init_password_done_text: None,
			email_verification_text: None,
			email_verification_done_text: None,
			initialize_user_text: None,
			initialize_done_text: None,
			init_mfa_prompt_text: None,
			init_mfa_otp_text: None,
			init_mfa_u2f_text: None,
			init_mfa_done_text: None,
			mfa_providers_text: None,
			verify_mfa_otp_text: None,
			verify_mfa_u2f_text: None,
			passwordless_text: None,
			password_change_text: None,
			password_change_done_text: None,
			password_reset_done_text: None,
			registration_option_text: None,
			registration_user_text: None,
			registration_org_text: None,
			linking_user_done_text: None,
			external_user_not_found_text: None,
			success_login_text: None,
			logout_text: None,
			footer_text: None,
			passwordless_prompt_text: None,
			passwordless_registration_text: None,
			passwordless_registration_done_text: None,
			external_registration_user_overview_text: None,
			linking_user_prompt_text: None,
		}
	}

	pub fn set_select_account_text(
		&mut self,
		select_account_text: models::V1SelectAccountScreenText,
	) {
		self.select_account_text = Some(select_account_text);
	}

	pub fn with_select_account_text(
		mut self,
		select_account_text: models::V1SelectAccountScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.select_account_text = Some(select_account_text);
		self
	}

	pub fn select_account_text(&self) -> Option<&models::V1SelectAccountScreenText> {
		self.select_account_text.as_ref()
	}

	pub fn reset_select_account_text(&mut self) {
		self.select_account_text = None;
	}

	pub fn set_login_text(&mut self, login_text: models::V1LoginScreenText) {
		self.login_text = Some(login_text);
	}

	pub fn with_login_text(
		mut self,
		login_text: models::V1LoginScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.login_text = Some(login_text);
		self
	}

	pub fn login_text(&self) -> Option<&models::V1LoginScreenText> {
		self.login_text.as_ref()
	}

	pub fn reset_login_text(&mut self) {
		self.login_text = None;
	}

	pub fn set_password_text(&mut self, password_text: models::V1PasswordScreenText) {
		self.password_text = Some(password_text);
	}

	pub fn with_password_text(
		mut self,
		password_text: models::V1PasswordScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.password_text = Some(password_text);
		self
	}

	pub fn password_text(&self) -> Option<&models::V1PasswordScreenText> {
		self.password_text.as_ref()
	}

	pub fn reset_password_text(&mut self) {
		self.password_text = None;
	}

	pub fn set_username_change_text(
		&mut self,
		username_change_text: models::V1UsernameChangeScreenText,
	) {
		self.username_change_text = Some(username_change_text);
	}

	pub fn with_username_change_text(
		mut self,
		username_change_text: models::V1UsernameChangeScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.username_change_text = Some(username_change_text);
		self
	}

	pub fn username_change_text(&self) -> Option<&models::V1UsernameChangeScreenText> {
		self.username_change_text.as_ref()
	}

	pub fn reset_username_change_text(&mut self) {
		self.username_change_text = None;
	}

	pub fn set_username_change_done_text(
		&mut self,
		username_change_done_text: models::V1UsernameChangeDoneScreenText,
	) {
		self.username_change_done_text = Some(username_change_done_text);
	}

	pub fn with_username_change_done_text(
		mut self,
		username_change_done_text: models::V1UsernameChangeDoneScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.username_change_done_text = Some(username_change_done_text);
		self
	}

	pub fn username_change_done_text(&self) -> Option<&models::V1UsernameChangeDoneScreenText> {
		self.username_change_done_text.as_ref()
	}

	pub fn reset_username_change_done_text(&mut self) {
		self.username_change_done_text = None;
	}

	pub fn set_init_password_text(&mut self, init_password_text: models::V1InitPasswordScreenText) {
		self.init_password_text = Some(init_password_text);
	}

	pub fn with_init_password_text(
		mut self,
		init_password_text: models::V1InitPasswordScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.init_password_text = Some(init_password_text);
		self
	}

	pub fn init_password_text(&self) -> Option<&models::V1InitPasswordScreenText> {
		self.init_password_text.as_ref()
	}

	pub fn reset_init_password_text(&mut self) {
		self.init_password_text = None;
	}

	pub fn set_init_password_done_text(
		&mut self,
		init_password_done_text: models::V1InitPasswordDoneScreenText,
	) {
		self.init_password_done_text = Some(init_password_done_text);
	}

	pub fn with_init_password_done_text(
		mut self,
		init_password_done_text: models::V1InitPasswordDoneScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.init_password_done_text = Some(init_password_done_text);
		self
	}

	pub fn init_password_done_text(&self) -> Option<&models::V1InitPasswordDoneScreenText> {
		self.init_password_done_text.as_ref()
	}

	pub fn reset_init_password_done_text(&mut self) {
		self.init_password_done_text = None;
	}

	pub fn set_email_verification_text(
		&mut self,
		email_verification_text: models::V1EmailVerificationScreenText,
	) {
		self.email_verification_text = Some(email_verification_text);
	}

	pub fn with_email_verification_text(
		mut self,
		email_verification_text: models::V1EmailVerificationScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.email_verification_text = Some(email_verification_text);
		self
	}

	pub fn email_verification_text(&self) -> Option<&models::V1EmailVerificationScreenText> {
		self.email_verification_text.as_ref()
	}

	pub fn reset_email_verification_text(&mut self) {
		self.email_verification_text = None;
	}

	pub fn set_email_verification_done_text(
		&mut self,
		email_verification_done_text: models::V1EmailVerificationDoneScreenText,
	) {
		self.email_verification_done_text = Some(email_verification_done_text);
	}

	pub fn with_email_verification_done_text(
		mut self,
		email_verification_done_text: models::V1EmailVerificationDoneScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.email_verification_done_text = Some(email_verification_done_text);
		self
	}

	pub fn email_verification_done_text(
		&self,
	) -> Option<&models::V1EmailVerificationDoneScreenText> {
		self.email_verification_done_text.as_ref()
	}

	pub fn reset_email_verification_done_text(&mut self) {
		self.email_verification_done_text = None;
	}

	pub fn set_initialize_user_text(
		&mut self,
		initialize_user_text: models::V1InitializeUserScreenText,
	) {
		self.initialize_user_text = Some(initialize_user_text);
	}

	pub fn with_initialize_user_text(
		mut self,
		initialize_user_text: models::V1InitializeUserScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.initialize_user_text = Some(initialize_user_text);
		self
	}

	pub fn initialize_user_text(&self) -> Option<&models::V1InitializeUserScreenText> {
		self.initialize_user_text.as_ref()
	}

	pub fn reset_initialize_user_text(&mut self) {
		self.initialize_user_text = None;
	}

	pub fn set_initialize_done_text(
		&mut self,
		initialize_done_text: models::V1InitializeUserDoneScreenText,
	) {
		self.initialize_done_text = Some(initialize_done_text);
	}

	pub fn with_initialize_done_text(
		mut self,
		initialize_done_text: models::V1InitializeUserDoneScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.initialize_done_text = Some(initialize_done_text);
		self
	}

	pub fn initialize_done_text(&self) -> Option<&models::V1InitializeUserDoneScreenText> {
		self.initialize_done_text.as_ref()
	}

	pub fn reset_initialize_done_text(&mut self) {
		self.initialize_done_text = None;
	}

	pub fn set_init_mfa_prompt_text(
		&mut self,
		init_mfa_prompt_text: models::V1InitMfaPromptScreenText,
	) {
		self.init_mfa_prompt_text = Some(init_mfa_prompt_text);
	}

	pub fn with_init_mfa_prompt_text(
		mut self,
		init_mfa_prompt_text: models::V1InitMfaPromptScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.init_mfa_prompt_text = Some(init_mfa_prompt_text);
		self
	}

	pub fn init_mfa_prompt_text(&self) -> Option<&models::V1InitMfaPromptScreenText> {
		self.init_mfa_prompt_text.as_ref()
	}

	pub fn reset_init_mfa_prompt_text(&mut self) {
		self.init_mfa_prompt_text = None;
	}

	pub fn set_init_mfa_otp_text(&mut self, init_mfa_otp_text: models::V1InitMfaotpScreenText) {
		self.init_mfa_otp_text = Some(init_mfa_otp_text);
	}

	pub fn with_init_mfa_otp_text(
		mut self,
		init_mfa_otp_text: models::V1InitMfaotpScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.init_mfa_otp_text = Some(init_mfa_otp_text);
		self
	}

	pub fn init_mfa_otp_text(&self) -> Option<&models::V1InitMfaotpScreenText> {
		self.init_mfa_otp_text.as_ref()
	}

	pub fn reset_init_mfa_otp_text(&mut self) {
		self.init_mfa_otp_text = None;
	}

	pub fn set_init_mfa_u2f_text(&mut self, init_mfa_u2f_text: models::V1InitMfau2FScreenText) {
		self.init_mfa_u2f_text = Some(init_mfa_u2f_text);
	}

	pub fn with_init_mfa_u2f_text(
		mut self,
		init_mfa_u2f_text: models::V1InitMfau2FScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.init_mfa_u2f_text = Some(init_mfa_u2f_text);
		self
	}

	pub fn init_mfa_u2f_text(&self) -> Option<&models::V1InitMfau2FScreenText> {
		self.init_mfa_u2f_text.as_ref()
	}

	pub fn reset_init_mfa_u2f_text(&mut self) {
		self.init_mfa_u2f_text = None;
	}

	pub fn set_init_mfa_done_text(&mut self, init_mfa_done_text: models::V1InitMfaDoneScreenText) {
		self.init_mfa_done_text = Some(init_mfa_done_text);
	}

	pub fn with_init_mfa_done_text(
		mut self,
		init_mfa_done_text: models::V1InitMfaDoneScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.init_mfa_done_text = Some(init_mfa_done_text);
		self
	}

	pub fn init_mfa_done_text(&self) -> Option<&models::V1InitMfaDoneScreenText> {
		self.init_mfa_done_text.as_ref()
	}

	pub fn reset_init_mfa_done_text(&mut self) {
		self.init_mfa_done_text = None;
	}

	pub fn set_mfa_providers_text(&mut self, mfa_providers_text: models::V1MfaProvidersText) {
		self.mfa_providers_text = Some(mfa_providers_text);
	}

	pub fn with_mfa_providers_text(
		mut self,
		mfa_providers_text: models::V1MfaProvidersText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.mfa_providers_text = Some(mfa_providers_text);
		self
	}

	pub fn mfa_providers_text(&self) -> Option<&models::V1MfaProvidersText> {
		self.mfa_providers_text.as_ref()
	}

	pub fn reset_mfa_providers_text(&mut self) {
		self.mfa_providers_text = None;
	}

	pub fn set_verify_mfa_otp_text(
		&mut self,
		verify_mfa_otp_text: models::V1VerifyMfaotpScreenText,
	) {
		self.verify_mfa_otp_text = Some(verify_mfa_otp_text);
	}

	pub fn with_verify_mfa_otp_text(
		mut self,
		verify_mfa_otp_text: models::V1VerifyMfaotpScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.verify_mfa_otp_text = Some(verify_mfa_otp_text);
		self
	}

	pub fn verify_mfa_otp_text(&self) -> Option<&models::V1VerifyMfaotpScreenText> {
		self.verify_mfa_otp_text.as_ref()
	}

	pub fn reset_verify_mfa_otp_text(&mut self) {
		self.verify_mfa_otp_text = None;
	}

	pub fn set_verify_mfa_u2f_text(
		&mut self,
		verify_mfa_u2f_text: models::V1VerifyMfau2FScreenText,
	) {
		self.verify_mfa_u2f_text = Some(verify_mfa_u2f_text);
	}

	pub fn with_verify_mfa_u2f_text(
		mut self,
		verify_mfa_u2f_text: models::V1VerifyMfau2FScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.verify_mfa_u2f_text = Some(verify_mfa_u2f_text);
		self
	}

	pub fn verify_mfa_u2f_text(&self) -> Option<&models::V1VerifyMfau2FScreenText> {
		self.verify_mfa_u2f_text.as_ref()
	}

	pub fn reset_verify_mfa_u2f_text(&mut self) {
		self.verify_mfa_u2f_text = None;
	}

	pub fn set_passwordless_text(&mut self, passwordless_text: models::V1PasswordlessScreenText) {
		self.passwordless_text = Some(passwordless_text);
	}

	pub fn with_passwordless_text(
		mut self,
		passwordless_text: models::V1PasswordlessScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.passwordless_text = Some(passwordless_text);
		self
	}

	pub fn passwordless_text(&self) -> Option<&models::V1PasswordlessScreenText> {
		self.passwordless_text.as_ref()
	}

	pub fn reset_passwordless_text(&mut self) {
		self.passwordless_text = None;
	}

	pub fn set_password_change_text(
		&mut self,
		password_change_text: models::V1PasswordChangeScreenText,
	) {
		self.password_change_text = Some(password_change_text);
	}

	pub fn with_password_change_text(
		mut self,
		password_change_text: models::V1PasswordChangeScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.password_change_text = Some(password_change_text);
		self
	}

	pub fn password_change_text(&self) -> Option<&models::V1PasswordChangeScreenText> {
		self.password_change_text.as_ref()
	}

	pub fn reset_password_change_text(&mut self) {
		self.password_change_text = None;
	}

	pub fn set_password_change_done_text(
		&mut self,
		password_change_done_text: models::V1PasswordChangeDoneScreenText,
	) {
		self.password_change_done_text = Some(password_change_done_text);
	}

	pub fn with_password_change_done_text(
		mut self,
		password_change_done_text: models::V1PasswordChangeDoneScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.password_change_done_text = Some(password_change_done_text);
		self
	}

	pub fn password_change_done_text(&self) -> Option<&models::V1PasswordChangeDoneScreenText> {
		self.password_change_done_text.as_ref()
	}

	pub fn reset_password_change_done_text(&mut self) {
		self.password_change_done_text = None;
	}

	pub fn set_password_reset_done_text(
		&mut self,
		password_reset_done_text: models::V1PasswordResetDoneScreenText,
	) {
		self.password_reset_done_text = Some(password_reset_done_text);
	}

	pub fn with_password_reset_done_text(
		mut self,
		password_reset_done_text: models::V1PasswordResetDoneScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.password_reset_done_text = Some(password_reset_done_text);
		self
	}

	pub fn password_reset_done_text(&self) -> Option<&models::V1PasswordResetDoneScreenText> {
		self.password_reset_done_text.as_ref()
	}

	pub fn reset_password_reset_done_text(&mut self) {
		self.password_reset_done_text = None;
	}

	pub fn set_registration_option_text(
		&mut self,
		registration_option_text: models::V1RegistrationOptionScreenText,
	) {
		self.registration_option_text = Some(registration_option_text);
	}

	pub fn with_registration_option_text(
		mut self,
		registration_option_text: models::V1RegistrationOptionScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.registration_option_text = Some(registration_option_text);
		self
	}

	pub fn registration_option_text(&self) -> Option<&models::V1RegistrationOptionScreenText> {
		self.registration_option_text.as_ref()
	}

	pub fn reset_registration_option_text(&mut self) {
		self.registration_option_text = None;
	}

	pub fn set_registration_user_text(
		&mut self,
		registration_user_text: models::V1RegistrationUserScreenText,
	) {
		self.registration_user_text = Some(registration_user_text);
	}

	pub fn with_registration_user_text(
		mut self,
		registration_user_text: models::V1RegistrationUserScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.registration_user_text = Some(registration_user_text);
		self
	}

	pub fn registration_user_text(&self) -> Option<&models::V1RegistrationUserScreenText> {
		self.registration_user_text.as_ref()
	}

	pub fn reset_registration_user_text(&mut self) {
		self.registration_user_text = None;
	}

	pub fn set_registration_org_text(
		&mut self,
		registration_org_text: models::V1RegistrationOrgScreenText,
	) {
		self.registration_org_text = Some(registration_org_text);
	}

	pub fn with_registration_org_text(
		mut self,
		registration_org_text: models::V1RegistrationOrgScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.registration_org_text = Some(registration_org_text);
		self
	}

	pub fn registration_org_text(&self) -> Option<&models::V1RegistrationOrgScreenText> {
		self.registration_org_text.as_ref()
	}

	pub fn reset_registration_org_text(&mut self) {
		self.registration_org_text = None;
	}

	pub fn set_linking_user_done_text(
		&mut self,
		linking_user_done_text: models::V1LinkingUserDoneScreenText,
	) {
		self.linking_user_done_text = Some(linking_user_done_text);
	}

	pub fn with_linking_user_done_text(
		mut self,
		linking_user_done_text: models::V1LinkingUserDoneScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.linking_user_done_text = Some(linking_user_done_text);
		self
	}

	pub fn linking_user_done_text(&self) -> Option<&models::V1LinkingUserDoneScreenText> {
		self.linking_user_done_text.as_ref()
	}

	pub fn reset_linking_user_done_text(&mut self) {
		self.linking_user_done_text = None;
	}

	pub fn set_external_user_not_found_text(
		&mut self,
		external_user_not_found_text: models::V1ExternalUserNotFoundScreenText,
	) {
		self.external_user_not_found_text = Some(external_user_not_found_text);
	}

	pub fn with_external_user_not_found_text(
		mut self,
		external_user_not_found_text: models::V1ExternalUserNotFoundScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.external_user_not_found_text = Some(external_user_not_found_text);
		self
	}

	pub fn external_user_not_found_text(
		&self,
	) -> Option<&models::V1ExternalUserNotFoundScreenText> {
		self.external_user_not_found_text.as_ref()
	}

	pub fn reset_external_user_not_found_text(&mut self) {
		self.external_user_not_found_text = None;
	}

	pub fn set_success_login_text(&mut self, success_login_text: models::V1SuccessLoginScreenText) {
		self.success_login_text = Some(success_login_text);
	}

	pub fn with_success_login_text(
		mut self,
		success_login_text: models::V1SuccessLoginScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.success_login_text = Some(success_login_text);
		self
	}

	pub fn success_login_text(&self) -> Option<&models::V1SuccessLoginScreenText> {
		self.success_login_text.as_ref()
	}

	pub fn reset_success_login_text(&mut self) {
		self.success_login_text = None;
	}

	pub fn set_logout_text(&mut self, logout_text: models::V1LogoutDoneScreenText) {
		self.logout_text = Some(logout_text);
	}

	pub fn with_logout_text(
		mut self,
		logout_text: models::V1LogoutDoneScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.logout_text = Some(logout_text);
		self
	}

	pub fn logout_text(&self) -> Option<&models::V1LogoutDoneScreenText> {
		self.logout_text.as_ref()
	}

	pub fn reset_logout_text(&mut self) {
		self.logout_text = None;
	}

	pub fn set_footer_text(&mut self, footer_text: models::V1FooterText) {
		self.footer_text = Some(footer_text);
	}

	pub fn with_footer_text(
		mut self,
		footer_text: models::V1FooterText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.footer_text = Some(footer_text);
		self
	}

	pub fn footer_text(&self) -> Option<&models::V1FooterText> {
		self.footer_text.as_ref()
	}

	pub fn reset_footer_text(&mut self) {
		self.footer_text = None;
	}

	pub fn set_passwordless_prompt_text(
		&mut self,
		passwordless_prompt_text: models::V1PasswordlessPromptScreenText,
	) {
		self.passwordless_prompt_text = Some(passwordless_prompt_text);
	}

	pub fn with_passwordless_prompt_text(
		mut self,
		passwordless_prompt_text: models::V1PasswordlessPromptScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.passwordless_prompt_text = Some(passwordless_prompt_text);
		self
	}

	pub fn passwordless_prompt_text(&self) -> Option<&models::V1PasswordlessPromptScreenText> {
		self.passwordless_prompt_text.as_ref()
	}

	pub fn reset_passwordless_prompt_text(&mut self) {
		self.passwordless_prompt_text = None;
	}

	pub fn set_passwordless_registration_text(
		&mut self,
		passwordless_registration_text: models::V1PasswordlessRegistrationScreenText,
	) {
		self.passwordless_registration_text = Some(passwordless_registration_text);
	}

	pub fn with_passwordless_registration_text(
		mut self,
		passwordless_registration_text: models::V1PasswordlessRegistrationScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.passwordless_registration_text = Some(passwordless_registration_text);
		self
	}

	pub fn passwordless_registration_text(
		&self,
	) -> Option<&models::V1PasswordlessRegistrationScreenText> {
		self.passwordless_registration_text.as_ref()
	}

	pub fn reset_passwordless_registration_text(&mut self) {
		self.passwordless_registration_text = None;
	}

	pub fn set_passwordless_registration_done_text(
		&mut self,
		passwordless_registration_done_text: models::V1PasswordlessRegistrationDoneScreenText,
	) {
		self.passwordless_registration_done_text = Some(passwordless_registration_done_text);
	}

	pub fn with_passwordless_registration_done_text(
		mut self,
		passwordless_registration_done_text: models::V1PasswordlessRegistrationDoneScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.passwordless_registration_done_text = Some(passwordless_registration_done_text);
		self
	}

	pub fn passwordless_registration_done_text(
		&self,
	) -> Option<&models::V1PasswordlessRegistrationDoneScreenText> {
		self.passwordless_registration_done_text.as_ref()
	}

	pub fn reset_passwordless_registration_done_text(&mut self) {
		self.passwordless_registration_done_text = None;
	}

	pub fn set_external_registration_user_overview_text(
		&mut self,
		external_registration_user_overview_text: models::V1ExternalRegistrationUserOverviewScreenText,
	) {
		self.external_registration_user_overview_text =
			Some(external_registration_user_overview_text);
	}

	pub fn with_external_registration_user_overview_text(
		mut self,
		external_registration_user_overview_text: models::V1ExternalRegistrationUserOverviewScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.external_registration_user_overview_text =
			Some(external_registration_user_overview_text);
		self
	}

	pub fn external_registration_user_overview_text(
		&self,
	) -> Option<&models::V1ExternalRegistrationUserOverviewScreenText> {
		self.external_registration_user_overview_text.as_ref()
	}

	pub fn reset_external_registration_user_overview_text(&mut self) {
		self.external_registration_user_overview_text = None;
	}

	pub fn set_linking_user_prompt_text(
		&mut self,
		linking_user_prompt_text: models::V1LinkingUserPromptScreenText,
	) {
		self.linking_user_prompt_text = Some(linking_user_prompt_text);
	}

	pub fn with_linking_user_prompt_text(
		mut self,
		linking_user_prompt_text: models::V1LinkingUserPromptScreenText,
	) -> V1ManagementServiceSetCustomLoginTextBody {
		self.linking_user_prompt_text = Some(linking_user_prompt_text);
		self
	}

	pub fn linking_user_prompt_text(&self) -> Option<&models::V1LinkingUserPromptScreenText> {
		self.linking_user_prompt_text.as_ref()
	}

	pub fn reset_linking_user_prompt_text(&mut self) {
		self.linking_user_prompt_text = None;
	}
}
