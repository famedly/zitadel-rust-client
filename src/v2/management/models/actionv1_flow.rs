// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct Actionv1Flow {
	/// \"the type of the flow\"
	#[serde(rename = "type")]
	_type: Option<models::Zitadelactionv1FlowType>,
	#[serde(rename = "details")]
	details: Option<models::V1ObjectDetails>,
	/// the state of the flow
	#[serde(rename = "state")]
	state: Option<models::V1FlowState>,
	#[serde(rename = "triggerActions")]
	trigger_actions: Option<Vec<models::V1TriggerAction>>,
}

impl Actionv1Flow {
	pub fn new() -> Actionv1Flow {
		Actionv1Flow { _type: None, details: None, state: None, trigger_actions: None }
	}

	pub fn set__type(&mut self, _type: models::Zitadelactionv1FlowType) {
		self._type = Some(_type);
	}

	pub fn with__type(mut self, _type: models::Zitadelactionv1FlowType) -> Actionv1Flow {
		self._type = Some(_type);
		self
	}

	pub fn _type(&self) -> Option<&models::Zitadelactionv1FlowType> {
		self._type.as_ref()
	}

	pub fn reset__type(&mut self) {
		self._type = None;
	}

	pub fn set_details(&mut self, details: models::V1ObjectDetails) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::V1ObjectDetails) -> Actionv1Flow {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V1ObjectDetails> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_state(&mut self, state: models::V1FlowState) {
		self.state = Some(state);
	}

	pub fn with_state(mut self, state: models::V1FlowState) -> Actionv1Flow {
		self.state = Some(state);
		self
	}

	pub fn state(&self) -> Option<&models::V1FlowState> {
		self.state.as_ref()
	}

	pub fn reset_state(&mut self) {
		self.state = None;
	}

	pub fn set_trigger_actions(&mut self, trigger_actions: Vec<models::V1TriggerAction>) {
		self.trigger_actions = Some(trigger_actions);
	}

	pub fn with_trigger_actions(
		mut self,
		trigger_actions: Vec<models::V1TriggerAction>,
	) -> Actionv1Flow {
		self.trigger_actions = Some(trigger_actions);
		self
	}

	pub fn trigger_actions(&self) -> Option<&Vec<models::V1TriggerAction>> {
		self.trigger_actions.as_ref()
	}

	pub fn reset_trigger_actions(&mut self) {
		self.trigger_actions = None;
	}
}
