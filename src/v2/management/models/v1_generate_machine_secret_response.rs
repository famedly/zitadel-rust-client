/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1GenerateMachineSecretResponse {
	#[serde(rename = "clientId")]
	client_id: Option<String>,
	#[serde(rename = "clientSecret")]
	client_secret: Option<String>,
	#[serde(rename = "details")]
	details: Option<models::V1ObjectDetails>,
}

impl V1GenerateMachineSecretResponse {
	pub fn new() -> V1GenerateMachineSecretResponse {
		V1GenerateMachineSecretResponse { client_id: None, client_secret: None, details: None }
	}

	pub fn set_client_id(&mut self, client_id: String) {
		self.client_id = Some(client_id);
	}

	pub fn with_client_id(mut self, client_id: String) -> V1GenerateMachineSecretResponse {
		self.client_id = Some(client_id);
		self
	}

	pub fn client_id(&self) -> Option<&String> {
		self.client_id.as_ref()
	}

	pub fn reset_client_id(&mut self) {
		self.client_id = None;
	}

	pub fn set_client_secret(&mut self, client_secret: String) {
		self.client_secret = Some(client_secret);
	}

	pub fn with_client_secret(mut self, client_secret: String) -> V1GenerateMachineSecretResponse {
		self.client_secret = Some(client_secret);
		self
	}

	pub fn client_secret(&self) -> Option<&String> {
		self.client_secret.as_ref()
	}

	pub fn reset_client_secret(&mut self) {
		self.client_secret = None;
	}

	pub fn set_details(&mut self, details: models::V1ObjectDetails) {
		self.details = Some(details);
	}

	pub fn with_details(
		mut self,
		details: models::V1ObjectDetails,
	) -> V1GenerateMachineSecretResponse {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V1ObjectDetails> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}
}
