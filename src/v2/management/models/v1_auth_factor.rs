/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1AuthFactor {
  /// current state of the auth factor
  #[serde(rename = "state")]
  state: Option<models::V1AuthFactorState>,
  /// one type use OTP, OTPSMS, OTPEmail or U2F
  #[serde(rename = "otp")]
  otp: Option<models::V1AuthFactorOtp>,
  /// one type use OTP, OTPSMS, OTPEmail or U2F
  #[serde(rename = "u2f")]
  u2f: Option<models::V1AuthFactorU2F>,
  /// one type use OTP, OTPSMS, OTPEmail or U2F
  #[serde(rename = "otpSms")]
  otp_sms: Option<models::V1AuthFactorOtpsms>,
  /// one type use OTP, OTPSMS, OTPEmail or U2F
  #[serde(rename = "otpEmail")]
  otp_email: Option<models::V1AuthFactorOtpEmail>
}

impl V1AuthFactor {
  pub fn new() -> V1AuthFactor {
    V1AuthFactor {
      state: None,
      otp: None,
      u2f: None,
      otp_sms: None,
      otp_email: None
    }
  }

  pub fn set_state(&mut self, state: models::V1AuthFactorState) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: models::V1AuthFactorState) -> V1AuthFactor {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&models::V1AuthFactorState> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_otp(&mut self, otp: models::V1AuthFactorOtp) {
    self.otp = Some(otp);
  }

  pub fn with_otp(mut self, otp: models::V1AuthFactorOtp) -> V1AuthFactor {
    self.otp = Some(otp);
    self
  }

  pub fn otp(&self) -> Option<&models::V1AuthFactorOtp> {
    self.otp.as_ref()
  }

  pub fn reset_otp(&mut self) {
    self.otp = None;
  }

  pub fn set_u2f(&mut self, u2f: models::V1AuthFactorU2F) {
    self.u2f = Some(u2f);
  }

  pub fn with_u2f(mut self, u2f: models::V1AuthFactorU2F) -> V1AuthFactor {
    self.u2f = Some(u2f);
    self
  }

  pub fn u2f(&self) -> Option<&models::V1AuthFactorU2F> {
    self.u2f.as_ref()
  }

  pub fn reset_u2f(&mut self) {
    self.u2f = None;
  }

  pub fn set_otp_sms(&mut self, otp_sms: models::V1AuthFactorOtpsms) {
    self.otp_sms = Some(otp_sms);
  }

  pub fn with_otp_sms(mut self, otp_sms: models::V1AuthFactorOtpsms) -> V1AuthFactor {
    self.otp_sms = Some(otp_sms);
    self
  }

  pub fn otp_sms(&self) -> Option<&models::V1AuthFactorOtpsms> {
    self.otp_sms.as_ref()
  }

  pub fn reset_otp_sms(&mut self) {
    self.otp_sms = None;
  }

  pub fn set_otp_email(&mut self, otp_email: models::V1AuthFactorOtpEmail) {
    self.otp_email = Some(otp_email);
  }

  pub fn with_otp_email(mut self, otp_email: models::V1AuthFactorOtpEmail) -> V1AuthFactor {
    self.otp_email = Some(otp_email);
    self
  }

  pub fn otp_email(&self) -> Option<&models::V1AuthFactorOtpEmail> {
    self.otp_email.as_ref()
  }

  pub fn reset_otp_email(&mut self) {
    self.otp_email = None;
  }

}



