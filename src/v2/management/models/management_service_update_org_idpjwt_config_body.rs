/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct ManagementServiceUpdateOrgIdpjwtConfigBody {
	/// the endpoint where the JWT can be extracted
	#[serde(rename = "jwtEndpoint")]
	jwt_endpoint: String,
	/// the issuer of the JWT (for validation)
	#[serde(rename = "issuer")]
	issuer: String,
	/// the endpoint to the key (JWK) which is used to sign the JWT with
	#[serde(rename = "keysEndpoint")]
	keys_endpoint: String,
	/// the name of the header where the JWT is sent in, default is
	/// authorization
	#[serde(rename = "headerName")]
	header_name: String,
}

impl ManagementServiceUpdateOrgIdpjwtConfigBody {
	pub fn new(
		jwt_endpoint: String,
		issuer: String,
		keys_endpoint: String,
		header_name: String,
	) -> ManagementServiceUpdateOrgIdpjwtConfigBody {
		ManagementServiceUpdateOrgIdpjwtConfigBody {
			jwt_endpoint: jwt_endpoint,
			issuer: issuer,
			keys_endpoint: keys_endpoint,
			header_name: header_name,
		}
	}

	pub fn set_jwt_endpoint(&mut self, jwt_endpoint: String) {
		self.jwt_endpoint = jwt_endpoint;
	}

	pub fn with_jwt_endpoint(
		mut self,
		jwt_endpoint: String,
	) -> ManagementServiceUpdateOrgIdpjwtConfigBody {
		self.jwt_endpoint = jwt_endpoint;
		self
	}

	pub fn jwt_endpoint(&self) -> &String {
		&self.jwt_endpoint
	}

	pub fn set_issuer(&mut self, issuer: String) {
		self.issuer = issuer;
	}

	pub fn with_issuer(mut self, issuer: String) -> ManagementServiceUpdateOrgIdpjwtConfigBody {
		self.issuer = issuer;
		self
	}

	pub fn issuer(&self) -> &String {
		&self.issuer
	}

	pub fn set_keys_endpoint(&mut self, keys_endpoint: String) {
		self.keys_endpoint = keys_endpoint;
	}

	pub fn with_keys_endpoint(
		mut self,
		keys_endpoint: String,
	) -> ManagementServiceUpdateOrgIdpjwtConfigBody {
		self.keys_endpoint = keys_endpoint;
		self
	}

	pub fn keys_endpoint(&self) -> &String {
		&self.keys_endpoint
	}

	pub fn set_header_name(&mut self, header_name: String) {
		self.header_name = header_name;
	}

	pub fn with_header_name(
		mut self,
		header_name: String,
	) -> ManagementServiceUpdateOrgIdpjwtConfigBody {
		self.header_name = header_name;
		self
	}

	pub fn header_name(&self) -> &String {
		&self.header_name
	}
}
