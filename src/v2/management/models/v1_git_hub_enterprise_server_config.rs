/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1GitHubEnterpriseServerConfig {
  /// the client ID of the GitHub App
  #[serde(rename = "clientId")]
  client_id: Option<String>,
  #[serde(rename = "authorizationEndpoint")]
  authorization_endpoint: Option<String>,
  #[serde(rename = "tokenEndpoint")]
  token_endpoint: Option<String>,
  #[serde(rename = "userEndpoint")]
  user_endpoint: Option<String>,
  /// the scopes requested by ZITADEL during the request to GitHub
  #[serde(rename = "scopes")]
  scopes: Option<Vec<String>>
}

impl V1GitHubEnterpriseServerConfig {
  pub fn new() -> V1GitHubEnterpriseServerConfig {
    V1GitHubEnterpriseServerConfig {
      client_id: None,
      authorization_endpoint: None,
      token_endpoint: None,
      user_endpoint: None,
      scopes: None
    }
  }

  pub fn set_client_id(&mut self, client_id: String) {
    self.client_id = Some(client_id);
  }

  pub fn with_client_id(mut self, client_id: String) -> V1GitHubEnterpriseServerConfig {
    self.client_id = Some(client_id);
    self
  }

  pub fn client_id(&self) -> Option<&String> {
    self.client_id.as_ref()
  }

  pub fn reset_client_id(&mut self) {
    self.client_id = None;
  }

  pub fn set_authorization_endpoint(&mut self, authorization_endpoint: String) {
    self.authorization_endpoint = Some(authorization_endpoint);
  }

  pub fn with_authorization_endpoint(mut self, authorization_endpoint: String) -> V1GitHubEnterpriseServerConfig {
    self.authorization_endpoint = Some(authorization_endpoint);
    self
  }

  pub fn authorization_endpoint(&self) -> Option<&String> {
    self.authorization_endpoint.as_ref()
  }

  pub fn reset_authorization_endpoint(&mut self) {
    self.authorization_endpoint = None;
  }

  pub fn set_token_endpoint(&mut self, token_endpoint: String) {
    self.token_endpoint = Some(token_endpoint);
  }

  pub fn with_token_endpoint(mut self, token_endpoint: String) -> V1GitHubEnterpriseServerConfig {
    self.token_endpoint = Some(token_endpoint);
    self
  }

  pub fn token_endpoint(&self) -> Option<&String> {
    self.token_endpoint.as_ref()
  }

  pub fn reset_token_endpoint(&mut self) {
    self.token_endpoint = None;
  }

  pub fn set_user_endpoint(&mut self, user_endpoint: String) {
    self.user_endpoint = Some(user_endpoint);
  }

  pub fn with_user_endpoint(mut self, user_endpoint: String) -> V1GitHubEnterpriseServerConfig {
    self.user_endpoint = Some(user_endpoint);
    self
  }

  pub fn user_endpoint(&self) -> Option<&String> {
    self.user_endpoint.as_ref()
  }

  pub fn reset_user_endpoint(&mut self) {
    self.user_endpoint = None;
  }

  pub fn set_scopes(&mut self, scopes: Vec<String>) {
    self.scopes = Some(scopes);
  }

  pub fn with_scopes(mut self, scopes: Vec<String>) -> V1GitHubEnterpriseServerConfig {
    self.scopes = Some(scopes);
    self
  }

  pub fn scopes(&self) -> Option<&Vec<String>> {
    self.scopes.as_ref()
  }

  pub fn reset_scopes(&mut self) {
    self.scopes = None;
  }

}



