/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct ManagementServiceAddAppKeyBody {
	#[serde(rename = "type")]
	_type: Option<models::V1KeyType>,
	/// The date the key will expire and no logins will be possible
	#[serde(rename = "expirationDate")]
	expiration_date: Option<String>,
}

impl ManagementServiceAddAppKeyBody {
	pub fn new() -> ManagementServiceAddAppKeyBody {
		ManagementServiceAddAppKeyBody { _type: None, expiration_date: None }
	}

	pub fn set__type(&mut self, _type: models::V1KeyType) {
		self._type = Some(_type);
	}

	pub fn with__type(mut self, _type: models::V1KeyType) -> ManagementServiceAddAppKeyBody {
		self._type = Some(_type);
		self
	}

	pub fn _type(&self) -> Option<&models::V1KeyType> {
		self._type.as_ref()
	}

	pub fn reset__type(&mut self) {
		self._type = None;
	}

	pub fn set_expiration_date(&mut self, expiration_date: String) {
		self.expiration_date = Some(expiration_date);
	}

	pub fn with_expiration_date(
		mut self,
		expiration_date: String,
	) -> ManagementServiceAddAppKeyBody {
		self.expiration_date = Some(expiration_date);
		self
	}

	pub fn expiration_date(&self) -> Option<&String> {
		self.expiration_date.as_ref()
	}

	pub fn reset_expiration_date(&mut self) {
		self.expiration_date = None;
	}
}
