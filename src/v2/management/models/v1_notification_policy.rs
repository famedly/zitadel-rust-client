// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1NotificationPolicy {
	#[serde(rename = "details")]
	details: Option<models::V1ObjectDetails>,
	#[serde(rename = "isDefault")]
	is_default: Option<bool>,
	/// If set to true the users will get a notification whenever their password
	/// has been changed.
	#[serde(rename = "passwordChange")]
	password_change: Option<bool>,
}

impl V1NotificationPolicy {
	pub fn new() -> V1NotificationPolicy {
		V1NotificationPolicy { details: None, is_default: None, password_change: None }
	}

	pub fn set_details(&mut self, details: models::V1ObjectDetails) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::V1ObjectDetails) -> V1NotificationPolicy {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V1ObjectDetails> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_is_default(&mut self, is_default: bool) {
		self.is_default = Some(is_default);
	}

	pub fn with_is_default(mut self, is_default: bool) -> V1NotificationPolicy {
		self.is_default = Some(is_default);
		self
	}

	pub fn is_default(&self) -> Option<&bool> {
		self.is_default.as_ref()
	}

	pub fn reset_is_default(&mut self) {
		self.is_default = None;
	}

	pub fn set_password_change(&mut self, password_change: bool) {
		self.password_change = Some(password_change);
	}

	pub fn with_password_change(mut self, password_change: bool) -> V1NotificationPolicy {
		self.password_change = Some(password_change);
		self
	}

	pub fn password_change(&self) -> Option<&bool> {
		self.password_change.as_ref()
	}

	pub fn reset_password_change(&mut self) {
		self.password_change = None;
	}
}
