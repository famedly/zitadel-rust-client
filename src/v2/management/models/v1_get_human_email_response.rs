/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1GetHumanEmailResponse {
	#[serde(rename = "details")]
	details: Option<models::V1ObjectDetails>,
	#[serde(rename = "email")]
	email: Option<models::Userv1Email>,
}

impl V1GetHumanEmailResponse {
	pub fn new() -> V1GetHumanEmailResponse {
		V1GetHumanEmailResponse { details: None, email: None }
	}

	pub fn set_details(&mut self, details: models::V1ObjectDetails) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::V1ObjectDetails) -> V1GetHumanEmailResponse {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V1ObjectDetails> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_email(&mut self, email: models::Userv1Email) {
		self.email = Some(email);
	}

	pub fn with_email(mut self, email: models::Userv1Email) -> V1GetHumanEmailResponse {
		self.email = Some(email);
		self
	}

	pub fn email(&self) -> Option<&models::Userv1Email> {
		self.email.as_ref()
	}

	pub fn reset_email(&mut self) {
		self.email = None;
	}
}
