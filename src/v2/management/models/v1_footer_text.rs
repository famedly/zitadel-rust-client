// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1FooterText {
	#[serde(rename = "tos")]
	tos: Option<String>,
	#[serde(rename = "privacyPolicy")]
	privacy_policy: Option<String>,
	#[serde(rename = "help")]
	help: Option<String>,
	#[serde(rename = "supportEmail")]
	support_email: Option<String>,
}

impl V1FooterText {
	pub fn new() -> V1FooterText {
		V1FooterText { tos: None, privacy_policy: None, help: None, support_email: None }
	}

	pub fn set_tos(&mut self, tos: String) {
		self.tos = Some(tos);
	}

	pub fn with_tos(mut self, tos: String) -> V1FooterText {
		self.tos = Some(tos);
		self
	}

	pub fn tos(&self) -> Option<&String> {
		self.tos.as_ref()
	}

	pub fn reset_tos(&mut self) {
		self.tos = None;
	}

	pub fn set_privacy_policy(&mut self, privacy_policy: String) {
		self.privacy_policy = Some(privacy_policy);
	}

	pub fn with_privacy_policy(mut self, privacy_policy: String) -> V1FooterText {
		self.privacy_policy = Some(privacy_policy);
		self
	}

	pub fn privacy_policy(&self) -> Option<&String> {
		self.privacy_policy.as_ref()
	}

	pub fn reset_privacy_policy(&mut self) {
		self.privacy_policy = None;
	}

	pub fn set_help(&mut self, help: String) {
		self.help = Some(help);
	}

	pub fn with_help(mut self, help: String) -> V1FooterText {
		self.help = Some(help);
		self
	}

	pub fn help(&self) -> Option<&String> {
		self.help.as_ref()
	}

	pub fn reset_help(&mut self) {
		self.help = None;
	}

	pub fn set_support_email(&mut self, support_email: String) {
		self.support_email = Some(support_email);
	}

	pub fn with_support_email(mut self, support_email: String) -> V1FooterText {
		self.support_email = Some(support_email);
		self
	}

	pub fn support_email(&self) -> Option<&String> {
		self.support_email.as_ref()
	}

	pub fn reset_support_email(&mut self) {
		self.support_email = None;
	}
}
