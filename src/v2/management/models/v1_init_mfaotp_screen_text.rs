/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1InitMfaotpScreenText {
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "descriptionOtp")]
  description_otp: Option<String>,
  #[serde(rename = "secretLabel")]
  secret_label: Option<String>,
  #[serde(rename = "codeLabel")]
  code_label: Option<String>,
  #[serde(rename = "nextButtonText")]
  next_button_text: Option<String>,
  #[serde(rename = "cancelButtonText")]
  cancel_button_text: Option<String>
}

impl V1InitMfaotpScreenText {
  pub fn new() -> V1InitMfaotpScreenText {
    V1InitMfaotpScreenText {
      title: None,
      description: None,
      description_otp: None,
      secret_label: None,
      code_label: None,
      next_button_text: None,
      cancel_button_text: None
    }
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> V1InitMfaotpScreenText {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> V1InitMfaotpScreenText {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_description_otp(&mut self, description_otp: String) {
    self.description_otp = Some(description_otp);
  }

  pub fn with_description_otp(mut self, description_otp: String) -> V1InitMfaotpScreenText {
    self.description_otp = Some(description_otp);
    self
  }

  pub fn description_otp(&self) -> Option<&String> {
    self.description_otp.as_ref()
  }

  pub fn reset_description_otp(&mut self) {
    self.description_otp = None;
  }

  pub fn set_secret_label(&mut self, secret_label: String) {
    self.secret_label = Some(secret_label);
  }

  pub fn with_secret_label(mut self, secret_label: String) -> V1InitMfaotpScreenText {
    self.secret_label = Some(secret_label);
    self
  }

  pub fn secret_label(&self) -> Option<&String> {
    self.secret_label.as_ref()
  }

  pub fn reset_secret_label(&mut self) {
    self.secret_label = None;
  }

  pub fn set_code_label(&mut self, code_label: String) {
    self.code_label = Some(code_label);
  }

  pub fn with_code_label(mut self, code_label: String) -> V1InitMfaotpScreenText {
    self.code_label = Some(code_label);
    self
  }

  pub fn code_label(&self) -> Option<&String> {
    self.code_label.as_ref()
  }

  pub fn reset_code_label(&mut self) {
    self.code_label = None;
  }

  pub fn set_next_button_text(&mut self, next_button_text: String) {
    self.next_button_text = Some(next_button_text);
  }

  pub fn with_next_button_text(mut self, next_button_text: String) -> V1InitMfaotpScreenText {
    self.next_button_text = Some(next_button_text);
    self
  }

  pub fn next_button_text(&self) -> Option<&String> {
    self.next_button_text.as_ref()
  }

  pub fn reset_next_button_text(&mut self) {
    self.next_button_text = None;
  }

  pub fn set_cancel_button_text(&mut self, cancel_button_text: String) {
    self.cancel_button_text = Some(cancel_button_text);
  }

  pub fn with_cancel_button_text(mut self, cancel_button_text: String) -> V1InitMfaotpScreenText {
    self.cancel_button_text = Some(cancel_button_text);
    self
  }

  pub fn cancel_button_text(&self) -> Option<&String> {
    self.cancel_button_text.as_ref()
  }

  pub fn reset_cancel_button_text(&mut self) {
    self.cancel_button_text = None;
  }

}



