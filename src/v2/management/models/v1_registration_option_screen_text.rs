/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1RegistrationOptionScreenText {
	#[serde(rename = "title")]
	title: Option<String>,
	#[serde(rename = "description")]
	description: Option<String>,
	#[serde(rename = "userNameButtonText")]
	user_name_button_text: Option<String>,
	#[serde(rename = "externalLoginDescription")]
	external_login_description: Option<String>,
	#[serde(rename = "loginButtonText")]
	login_button_text: Option<String>,
}

impl V1RegistrationOptionScreenText {
	pub fn new() -> V1RegistrationOptionScreenText {
		V1RegistrationOptionScreenText {
			title: None,
			description: None,
			user_name_button_text: None,
			external_login_description: None,
			login_button_text: None,
		}
	}

	pub fn set_title(&mut self, title: String) {
		self.title = Some(title);
	}

	pub fn with_title(mut self, title: String) -> V1RegistrationOptionScreenText {
		self.title = Some(title);
		self
	}

	pub fn title(&self) -> Option<&String> {
		self.title.as_ref()
	}

	pub fn reset_title(&mut self) {
		self.title = None;
	}

	pub fn set_description(&mut self, description: String) {
		self.description = Some(description);
	}

	pub fn with_description(mut self, description: String) -> V1RegistrationOptionScreenText {
		self.description = Some(description);
		self
	}

	pub fn description(&self) -> Option<&String> {
		self.description.as_ref()
	}

	pub fn reset_description(&mut self) {
		self.description = None;
	}

	pub fn set_user_name_button_text(&mut self, user_name_button_text: String) {
		self.user_name_button_text = Some(user_name_button_text);
	}

	pub fn with_user_name_button_text(
		mut self,
		user_name_button_text: String,
	) -> V1RegistrationOptionScreenText {
		self.user_name_button_text = Some(user_name_button_text);
		self
	}

	pub fn user_name_button_text(&self) -> Option<&String> {
		self.user_name_button_text.as_ref()
	}

	pub fn reset_user_name_button_text(&mut self) {
		self.user_name_button_text = None;
	}

	pub fn set_external_login_description(&mut self, external_login_description: String) {
		self.external_login_description = Some(external_login_description);
	}

	pub fn with_external_login_description(
		mut self,
		external_login_description: String,
	) -> V1RegistrationOptionScreenText {
		self.external_login_description = Some(external_login_description);
		self
	}

	pub fn external_login_description(&self) -> Option<&String> {
		self.external_login_description.as_ref()
	}

	pub fn reset_external_login_description(&mut self) {
		self.external_login_description = None;
	}

	pub fn set_login_button_text(&mut self, login_button_text: String) {
		self.login_button_text = Some(login_button_text);
	}

	pub fn with_login_button_text(
		mut self,
		login_button_text: String,
	) -> V1RegistrationOptionScreenText {
		self.login_button_text = Some(login_button_text);
		self
	}

	pub fn login_button_text(&self) -> Option<&String> {
		self.login_button_text.as_ref()
	}

	pub fn reset_login_button_text(&mut self) {
		self.login_button_text = None;
	}
}
