/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1AddOidcAppResponse {
	#[serde(rename = "appId")]
	app_id: Option<String>,
	#[serde(rename = "details")]
	details: Option<models::V1ObjectDetails>,
	/// generated client id for this config
	#[serde(rename = "clientId")]
	client_id: Option<String>,
	/// generated secret for this config
	#[serde(rename = "clientSecret")]
	client_secret: Option<String>,
	#[serde(rename = "noneCompliant")]
	none_compliant: Option<bool>,
	#[serde(rename = "complianceProblems")]
	compliance_problems: Option<Vec<models::V1LocalizedMessage>>,
}

impl V1AddOidcAppResponse {
	pub fn new() -> V1AddOidcAppResponse {
		V1AddOidcAppResponse {
			app_id: None,
			details: None,
			client_id: None,
			client_secret: None,
			none_compliant: None,
			compliance_problems: None,
		}
	}

	pub fn set_app_id(&mut self, app_id: String) {
		self.app_id = Some(app_id);
	}

	pub fn with_app_id(mut self, app_id: String) -> V1AddOidcAppResponse {
		self.app_id = Some(app_id);
		self
	}

	pub fn app_id(&self) -> Option<&String> {
		self.app_id.as_ref()
	}

	pub fn reset_app_id(&mut self) {
		self.app_id = None;
	}

	pub fn set_details(&mut self, details: models::V1ObjectDetails) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::V1ObjectDetails) -> V1AddOidcAppResponse {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V1ObjectDetails> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_client_id(&mut self, client_id: String) {
		self.client_id = Some(client_id);
	}

	pub fn with_client_id(mut self, client_id: String) -> V1AddOidcAppResponse {
		self.client_id = Some(client_id);
		self
	}

	pub fn client_id(&self) -> Option<&String> {
		self.client_id.as_ref()
	}

	pub fn reset_client_id(&mut self) {
		self.client_id = None;
	}

	pub fn set_client_secret(&mut self, client_secret: String) {
		self.client_secret = Some(client_secret);
	}

	pub fn with_client_secret(mut self, client_secret: String) -> V1AddOidcAppResponse {
		self.client_secret = Some(client_secret);
		self
	}

	pub fn client_secret(&self) -> Option<&String> {
		self.client_secret.as_ref()
	}

	pub fn reset_client_secret(&mut self) {
		self.client_secret = None;
	}

	pub fn set_none_compliant(&mut self, none_compliant: bool) {
		self.none_compliant = Some(none_compliant);
	}

	pub fn with_none_compliant(mut self, none_compliant: bool) -> V1AddOidcAppResponse {
		self.none_compliant = Some(none_compliant);
		self
	}

	pub fn none_compliant(&self) -> Option<&bool> {
		self.none_compliant.as_ref()
	}

	pub fn reset_none_compliant(&mut self) {
		self.none_compliant = None;
	}

	pub fn set_compliance_problems(
		&mut self,
		compliance_problems: Vec<models::V1LocalizedMessage>,
	) {
		self.compliance_problems = Some(compliance_problems);
	}

	pub fn with_compliance_problems(
		mut self,
		compliance_problems: Vec<models::V1LocalizedMessage>,
	) -> V1AddOidcAppResponse {
		self.compliance_problems = Some(compliance_problems);
		self
	}

	pub fn compliance_problems(&self) -> Option<&Vec<models::V1LocalizedMessage>> {
		self.compliance_problems.as_ref()
	}

	pub fn reset_compliance_problems(&mut self) {
		self.compliance_problems = None;
	}
}
