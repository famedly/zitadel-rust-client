/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1LabelPolicy {
	#[serde(rename = "details")]
	details: Option<models::V1ObjectDetails>,
	/// hex value for primary color
	#[serde(rename = "primaryColor")]
	primary_color: Option<String>,
	/// defines if the organization's admin changed the policy
	#[serde(rename = "isDefault")]
	is_default: Option<bool>,
	/// hides the org suffix on the login form if the scope
	/// \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set
	#[serde(rename = "hideLoginNameSuffix")]
	hide_login_name_suffix: Option<bool>,
	/// hex value for warn color
	#[serde(rename = "warnColor")]
	warn_color: Option<String>,
	/// hex value for background color
	#[serde(rename = "backgroundColor")]
	background_color: Option<String>,
	/// hex value for font color
	#[serde(rename = "fontColor")]
	font_color: Option<String>,
	/// hex value for the primary color dark theme
	#[serde(rename = "primaryColorDark")]
	primary_color_dark: Option<String>,
	/// hex value for background color dark theme
	#[serde(rename = "backgroundColorDark")]
	background_color_dark: Option<String>,
	/// hex value for warning color dark theme
	#[serde(rename = "warnColorDark")]
	warn_color_dark: Option<String>,
	/// hex value for font color dark theme
	#[serde(rename = "fontColorDark")]
	font_color_dark: Option<String>,
	#[serde(rename = "disableWatermark")]
	disable_watermark: Option<bool>,
	/// hex value for font color dark theme
	#[serde(rename = "logoUrl")]
	logo_url: Option<String>,
	/// hex value for font color dark theme
	#[serde(rename = "iconUrl")]
	icon_url: Option<String>,
	/// hex value for font color dark theme
	#[serde(rename = "logoUrlDark")]
	logo_url_dark: Option<String>,
	/// hex value for font color dark theme
	#[serde(rename = "iconUrlDark")]
	icon_url_dark: Option<String>,
	#[serde(rename = "fontUrl")]
	font_url: Option<String>,
	#[serde(rename = "themeMode")]
	theme_mode: Option<models::V1ThemeMode>,
}

impl V1LabelPolicy {
	pub fn new() -> V1LabelPolicy {
		V1LabelPolicy {
			details: None,
			primary_color: None,
			is_default: None,
			hide_login_name_suffix: None,
			warn_color: None,
			background_color: None,
			font_color: None,
			primary_color_dark: None,
			background_color_dark: None,
			warn_color_dark: None,
			font_color_dark: None,
			disable_watermark: None,
			logo_url: None,
			icon_url: None,
			logo_url_dark: None,
			icon_url_dark: None,
			font_url: None,
			theme_mode: None,
		}
	}

	pub fn set_details(&mut self, details: models::V1ObjectDetails) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::V1ObjectDetails) -> V1LabelPolicy {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V1ObjectDetails> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_primary_color(&mut self, primary_color: String) {
		self.primary_color = Some(primary_color);
	}

	pub fn with_primary_color(mut self, primary_color: String) -> V1LabelPolicy {
		self.primary_color = Some(primary_color);
		self
	}

	pub fn primary_color(&self) -> Option<&String> {
		self.primary_color.as_ref()
	}

	pub fn reset_primary_color(&mut self) {
		self.primary_color = None;
	}

	pub fn set_is_default(&mut self, is_default: bool) {
		self.is_default = Some(is_default);
	}

	pub fn with_is_default(mut self, is_default: bool) -> V1LabelPolicy {
		self.is_default = Some(is_default);
		self
	}

	pub fn is_default(&self) -> Option<&bool> {
		self.is_default.as_ref()
	}

	pub fn reset_is_default(&mut self) {
		self.is_default = None;
	}

	pub fn set_hide_login_name_suffix(&mut self, hide_login_name_suffix: bool) {
		self.hide_login_name_suffix = Some(hide_login_name_suffix);
	}

	pub fn with_hide_login_name_suffix(mut self, hide_login_name_suffix: bool) -> V1LabelPolicy {
		self.hide_login_name_suffix = Some(hide_login_name_suffix);
		self
	}

	pub fn hide_login_name_suffix(&self) -> Option<&bool> {
		self.hide_login_name_suffix.as_ref()
	}

	pub fn reset_hide_login_name_suffix(&mut self) {
		self.hide_login_name_suffix = None;
	}

	pub fn set_warn_color(&mut self, warn_color: String) {
		self.warn_color = Some(warn_color);
	}

	pub fn with_warn_color(mut self, warn_color: String) -> V1LabelPolicy {
		self.warn_color = Some(warn_color);
		self
	}

	pub fn warn_color(&self) -> Option<&String> {
		self.warn_color.as_ref()
	}

	pub fn reset_warn_color(&mut self) {
		self.warn_color = None;
	}

	pub fn set_background_color(&mut self, background_color: String) {
		self.background_color = Some(background_color);
	}

	pub fn with_background_color(mut self, background_color: String) -> V1LabelPolicy {
		self.background_color = Some(background_color);
		self
	}

	pub fn background_color(&self) -> Option<&String> {
		self.background_color.as_ref()
	}

	pub fn reset_background_color(&mut self) {
		self.background_color = None;
	}

	pub fn set_font_color(&mut self, font_color: String) {
		self.font_color = Some(font_color);
	}

	pub fn with_font_color(mut self, font_color: String) -> V1LabelPolicy {
		self.font_color = Some(font_color);
		self
	}

	pub fn font_color(&self) -> Option<&String> {
		self.font_color.as_ref()
	}

	pub fn reset_font_color(&mut self) {
		self.font_color = None;
	}

	pub fn set_primary_color_dark(&mut self, primary_color_dark: String) {
		self.primary_color_dark = Some(primary_color_dark);
	}

	pub fn with_primary_color_dark(mut self, primary_color_dark: String) -> V1LabelPolicy {
		self.primary_color_dark = Some(primary_color_dark);
		self
	}

	pub fn primary_color_dark(&self) -> Option<&String> {
		self.primary_color_dark.as_ref()
	}

	pub fn reset_primary_color_dark(&mut self) {
		self.primary_color_dark = None;
	}

	pub fn set_background_color_dark(&mut self, background_color_dark: String) {
		self.background_color_dark = Some(background_color_dark);
	}

	pub fn with_background_color_dark(mut self, background_color_dark: String) -> V1LabelPolicy {
		self.background_color_dark = Some(background_color_dark);
		self
	}

	pub fn background_color_dark(&self) -> Option<&String> {
		self.background_color_dark.as_ref()
	}

	pub fn reset_background_color_dark(&mut self) {
		self.background_color_dark = None;
	}

	pub fn set_warn_color_dark(&mut self, warn_color_dark: String) {
		self.warn_color_dark = Some(warn_color_dark);
	}

	pub fn with_warn_color_dark(mut self, warn_color_dark: String) -> V1LabelPolicy {
		self.warn_color_dark = Some(warn_color_dark);
		self
	}

	pub fn warn_color_dark(&self) -> Option<&String> {
		self.warn_color_dark.as_ref()
	}

	pub fn reset_warn_color_dark(&mut self) {
		self.warn_color_dark = None;
	}

	pub fn set_font_color_dark(&mut self, font_color_dark: String) {
		self.font_color_dark = Some(font_color_dark);
	}

	pub fn with_font_color_dark(mut self, font_color_dark: String) -> V1LabelPolicy {
		self.font_color_dark = Some(font_color_dark);
		self
	}

	pub fn font_color_dark(&self) -> Option<&String> {
		self.font_color_dark.as_ref()
	}

	pub fn reset_font_color_dark(&mut self) {
		self.font_color_dark = None;
	}

	pub fn set_disable_watermark(&mut self, disable_watermark: bool) {
		self.disable_watermark = Some(disable_watermark);
	}

	pub fn with_disable_watermark(mut self, disable_watermark: bool) -> V1LabelPolicy {
		self.disable_watermark = Some(disable_watermark);
		self
	}

	pub fn disable_watermark(&self) -> Option<&bool> {
		self.disable_watermark.as_ref()
	}

	pub fn reset_disable_watermark(&mut self) {
		self.disable_watermark = None;
	}

	pub fn set_logo_url(&mut self, logo_url: String) {
		self.logo_url = Some(logo_url);
	}

	pub fn with_logo_url(mut self, logo_url: String) -> V1LabelPolicy {
		self.logo_url = Some(logo_url);
		self
	}

	pub fn logo_url(&self) -> Option<&String> {
		self.logo_url.as_ref()
	}

	pub fn reset_logo_url(&mut self) {
		self.logo_url = None;
	}

	pub fn set_icon_url(&mut self, icon_url: String) {
		self.icon_url = Some(icon_url);
	}

	pub fn with_icon_url(mut self, icon_url: String) -> V1LabelPolicy {
		self.icon_url = Some(icon_url);
		self
	}

	pub fn icon_url(&self) -> Option<&String> {
		self.icon_url.as_ref()
	}

	pub fn reset_icon_url(&mut self) {
		self.icon_url = None;
	}

	pub fn set_logo_url_dark(&mut self, logo_url_dark: String) {
		self.logo_url_dark = Some(logo_url_dark);
	}

	pub fn with_logo_url_dark(mut self, logo_url_dark: String) -> V1LabelPolicy {
		self.logo_url_dark = Some(logo_url_dark);
		self
	}

	pub fn logo_url_dark(&self) -> Option<&String> {
		self.logo_url_dark.as_ref()
	}

	pub fn reset_logo_url_dark(&mut self) {
		self.logo_url_dark = None;
	}

	pub fn set_icon_url_dark(&mut self, icon_url_dark: String) {
		self.icon_url_dark = Some(icon_url_dark);
	}

	pub fn with_icon_url_dark(mut self, icon_url_dark: String) -> V1LabelPolicy {
		self.icon_url_dark = Some(icon_url_dark);
		self
	}

	pub fn icon_url_dark(&self) -> Option<&String> {
		self.icon_url_dark.as_ref()
	}

	pub fn reset_icon_url_dark(&mut self) {
		self.icon_url_dark = None;
	}

	pub fn set_font_url(&mut self, font_url: String) {
		self.font_url = Some(font_url);
	}

	pub fn with_font_url(mut self, font_url: String) -> V1LabelPolicy {
		self.font_url = Some(font_url);
		self
	}

	pub fn font_url(&self) -> Option<&String> {
		self.font_url.as_ref()
	}

	pub fn reset_font_url(&mut self) {
		self.font_url = None;
	}

	pub fn set_theme_mode(&mut self, theme_mode: models::V1ThemeMode) {
		self.theme_mode = Some(theme_mode);
	}

	pub fn with_theme_mode(mut self, theme_mode: models::V1ThemeMode) -> V1LabelPolicy {
		self.theme_mode = Some(theme_mode);
		self
	}

	pub fn theme_mode(&self) -> Option<&models::V1ThemeMode> {
		self.theme_mode.as_ref()
	}

	pub fn reset_theme_mode(&mut self) {
		self.theme_mode = None;
	}
}
