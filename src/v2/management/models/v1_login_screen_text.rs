/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1LoginScreenText {
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "titleLinkingProcess")]
  title_linking_process: Option<String>,
  #[serde(rename = "descriptionLinkingProcess")]
  description_linking_process: Option<String>,
  #[serde(rename = "userMustBeMemberOfOrg")]
  user_must_be_member_of_org: Option<String>,
  #[serde(rename = "loginNameLabel")]
  login_name_label: Option<String>,
  #[serde(rename = "registerButtonText")]
  register_button_text: Option<String>,
  #[serde(rename = "nextButtonText")]
  next_button_text: Option<String>,
  #[serde(rename = "externalUserDescription")]
  external_user_description: Option<String>,
  #[serde(rename = "userNamePlaceholder")]
  user_name_placeholder: Option<String>,
  #[serde(rename = "loginNamePlaceholder")]
  login_name_placeholder: Option<String>
}

impl V1LoginScreenText {
  pub fn new() -> V1LoginScreenText {
    V1LoginScreenText {
      title: None,
      description: None,
      title_linking_process: None,
      description_linking_process: None,
      user_must_be_member_of_org: None,
      login_name_label: None,
      register_button_text: None,
      next_button_text: None,
      external_user_description: None,
      user_name_placeholder: None,
      login_name_placeholder: None
    }
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> V1LoginScreenText {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> V1LoginScreenText {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_title_linking_process(&mut self, title_linking_process: String) {
    self.title_linking_process = Some(title_linking_process);
  }

  pub fn with_title_linking_process(mut self, title_linking_process: String) -> V1LoginScreenText {
    self.title_linking_process = Some(title_linking_process);
    self
  }

  pub fn title_linking_process(&self) -> Option<&String> {
    self.title_linking_process.as_ref()
  }

  pub fn reset_title_linking_process(&mut self) {
    self.title_linking_process = None;
  }

  pub fn set_description_linking_process(&mut self, description_linking_process: String) {
    self.description_linking_process = Some(description_linking_process);
  }

  pub fn with_description_linking_process(mut self, description_linking_process: String) -> V1LoginScreenText {
    self.description_linking_process = Some(description_linking_process);
    self
  }

  pub fn description_linking_process(&self) -> Option<&String> {
    self.description_linking_process.as_ref()
  }

  pub fn reset_description_linking_process(&mut self) {
    self.description_linking_process = None;
  }

  pub fn set_user_must_be_member_of_org(&mut self, user_must_be_member_of_org: String) {
    self.user_must_be_member_of_org = Some(user_must_be_member_of_org);
  }

  pub fn with_user_must_be_member_of_org(mut self, user_must_be_member_of_org: String) -> V1LoginScreenText {
    self.user_must_be_member_of_org = Some(user_must_be_member_of_org);
    self
  }

  pub fn user_must_be_member_of_org(&self) -> Option<&String> {
    self.user_must_be_member_of_org.as_ref()
  }

  pub fn reset_user_must_be_member_of_org(&mut self) {
    self.user_must_be_member_of_org = None;
  }

  pub fn set_login_name_label(&mut self, login_name_label: String) {
    self.login_name_label = Some(login_name_label);
  }

  pub fn with_login_name_label(mut self, login_name_label: String) -> V1LoginScreenText {
    self.login_name_label = Some(login_name_label);
    self
  }

  pub fn login_name_label(&self) -> Option<&String> {
    self.login_name_label.as_ref()
  }

  pub fn reset_login_name_label(&mut self) {
    self.login_name_label = None;
  }

  pub fn set_register_button_text(&mut self, register_button_text: String) {
    self.register_button_text = Some(register_button_text);
  }

  pub fn with_register_button_text(mut self, register_button_text: String) -> V1LoginScreenText {
    self.register_button_text = Some(register_button_text);
    self
  }

  pub fn register_button_text(&self) -> Option<&String> {
    self.register_button_text.as_ref()
  }

  pub fn reset_register_button_text(&mut self) {
    self.register_button_text = None;
  }

  pub fn set_next_button_text(&mut self, next_button_text: String) {
    self.next_button_text = Some(next_button_text);
  }

  pub fn with_next_button_text(mut self, next_button_text: String) -> V1LoginScreenText {
    self.next_button_text = Some(next_button_text);
    self
  }

  pub fn next_button_text(&self) -> Option<&String> {
    self.next_button_text.as_ref()
  }

  pub fn reset_next_button_text(&mut self) {
    self.next_button_text = None;
  }

  pub fn set_external_user_description(&mut self, external_user_description: String) {
    self.external_user_description = Some(external_user_description);
  }

  pub fn with_external_user_description(mut self, external_user_description: String) -> V1LoginScreenText {
    self.external_user_description = Some(external_user_description);
    self
  }

  pub fn external_user_description(&self) -> Option<&String> {
    self.external_user_description.as_ref()
  }

  pub fn reset_external_user_description(&mut self) {
    self.external_user_description = None;
  }

  pub fn set_user_name_placeholder(&mut self, user_name_placeholder: String) {
    self.user_name_placeholder = Some(user_name_placeholder);
  }

  pub fn with_user_name_placeholder(mut self, user_name_placeholder: String) -> V1LoginScreenText {
    self.user_name_placeholder = Some(user_name_placeholder);
    self
  }

  pub fn user_name_placeholder(&self) -> Option<&String> {
    self.user_name_placeholder.as_ref()
  }

  pub fn reset_user_name_placeholder(&mut self) {
    self.user_name_placeholder = None;
  }

  pub fn set_login_name_placeholder(&mut self, login_name_placeholder: String) {
    self.login_name_placeholder = Some(login_name_placeholder);
  }

  pub fn with_login_name_placeholder(mut self, login_name_placeholder: String) -> V1LoginScreenText {
    self.login_name_placeholder = Some(login_name_placeholder);
    self
  }

  pub fn login_name_placeholder(&self) -> Option<&String> {
    self.login_name_placeholder.as_ref()
  }

  pub fn reset_login_name_placeholder(&mut self) {
    self.login_name_placeholder = None;
  }

}



