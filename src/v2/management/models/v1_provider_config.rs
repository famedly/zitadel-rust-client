// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1ProviderConfig {
	#[serde(rename = "options")]
	options: Option<models::V1Options>,
	#[serde(rename = "ldap")]
	ldap: Option<models::V1LdapConfig>,
	#[serde(rename = "google")]
	google: Option<models::V1GoogleConfig>,
	#[serde(rename = "oauth")]
	oauth: Option<models::V1OAuthConfig>,
	#[serde(rename = "oidc")]
	oidc: Option<models::V1GenericOidcConfig>,
	#[serde(rename = "jwt")]
	jwt: Option<models::V1JwtConfig>,
	#[serde(rename = "github")]
	github: Option<models::V1GitHubConfig>,
	#[serde(rename = "githubEs")]
	github_es: Option<models::V1GitHubEnterpriseServerConfig>,
	#[serde(rename = "gitlab")]
	gitlab: Option<models::V1GitLabConfig>,
	#[serde(rename = "gitlabSelfHosted")]
	gitlab_self_hosted: Option<models::V1GitLabSelfHostedConfig>,
	#[serde(rename = "azureAd")]
	azure_ad: Option<models::V1AzureAdConfig>,
	#[serde(rename = "apple")]
	apple: Option<models::V1AppleConfig>,
	#[serde(rename = "saml")]
	saml: Option<models::Zitadelidpv1SamlConfig>,
}

impl V1ProviderConfig {
	pub fn new() -> V1ProviderConfig {
		V1ProviderConfig {
			options: None,
			ldap: None,
			google: None,
			oauth: None,
			oidc: None,
			jwt: None,
			github: None,
			github_es: None,
			gitlab: None,
			gitlab_self_hosted: None,
			azure_ad: None,
			apple: None,
			saml: None,
		}
	}

	pub fn set_options(&mut self, options: models::V1Options) {
		self.options = Some(options);
	}

	pub fn with_options(mut self, options: models::V1Options) -> V1ProviderConfig {
		self.options = Some(options);
		self
	}

	pub fn options(&self) -> Option<&models::V1Options> {
		self.options.as_ref()
	}

	pub fn reset_options(&mut self) {
		self.options = None;
	}

	pub fn set_ldap(&mut self, ldap: models::V1LdapConfig) {
		self.ldap = Some(ldap);
	}

	pub fn with_ldap(mut self, ldap: models::V1LdapConfig) -> V1ProviderConfig {
		self.ldap = Some(ldap);
		self
	}

	pub fn ldap(&self) -> Option<&models::V1LdapConfig> {
		self.ldap.as_ref()
	}

	pub fn reset_ldap(&mut self) {
		self.ldap = None;
	}

	pub fn set_google(&mut self, google: models::V1GoogleConfig) {
		self.google = Some(google);
	}

	pub fn with_google(mut self, google: models::V1GoogleConfig) -> V1ProviderConfig {
		self.google = Some(google);
		self
	}

	pub fn google(&self) -> Option<&models::V1GoogleConfig> {
		self.google.as_ref()
	}

	pub fn reset_google(&mut self) {
		self.google = None;
	}

	pub fn set_oauth(&mut self, oauth: models::V1OAuthConfig) {
		self.oauth = Some(oauth);
	}

	pub fn with_oauth(mut self, oauth: models::V1OAuthConfig) -> V1ProviderConfig {
		self.oauth = Some(oauth);
		self
	}

	pub fn oauth(&self) -> Option<&models::V1OAuthConfig> {
		self.oauth.as_ref()
	}

	pub fn reset_oauth(&mut self) {
		self.oauth = None;
	}

	pub fn set_oidc(&mut self, oidc: models::V1GenericOidcConfig) {
		self.oidc = Some(oidc);
	}

	pub fn with_oidc(mut self, oidc: models::V1GenericOidcConfig) -> V1ProviderConfig {
		self.oidc = Some(oidc);
		self
	}

	pub fn oidc(&self) -> Option<&models::V1GenericOidcConfig> {
		self.oidc.as_ref()
	}

	pub fn reset_oidc(&mut self) {
		self.oidc = None;
	}

	pub fn set_jwt(&mut self, jwt: models::V1JwtConfig) {
		self.jwt = Some(jwt);
	}

	pub fn with_jwt(mut self, jwt: models::V1JwtConfig) -> V1ProviderConfig {
		self.jwt = Some(jwt);
		self
	}

	pub fn jwt(&self) -> Option<&models::V1JwtConfig> {
		self.jwt.as_ref()
	}

	pub fn reset_jwt(&mut self) {
		self.jwt = None;
	}

	pub fn set_github(&mut self, github: models::V1GitHubConfig) {
		self.github = Some(github);
	}

	pub fn with_github(mut self, github: models::V1GitHubConfig) -> V1ProviderConfig {
		self.github = Some(github);
		self
	}

	pub fn github(&self) -> Option<&models::V1GitHubConfig> {
		self.github.as_ref()
	}

	pub fn reset_github(&mut self) {
		self.github = None;
	}

	pub fn set_github_es(&mut self, github_es: models::V1GitHubEnterpriseServerConfig) {
		self.github_es = Some(github_es);
	}

	pub fn with_github_es(
		mut self,
		github_es: models::V1GitHubEnterpriseServerConfig,
	) -> V1ProviderConfig {
		self.github_es = Some(github_es);
		self
	}

	pub fn github_es(&self) -> Option<&models::V1GitHubEnterpriseServerConfig> {
		self.github_es.as_ref()
	}

	pub fn reset_github_es(&mut self) {
		self.github_es = None;
	}

	pub fn set_gitlab(&mut self, gitlab: models::V1GitLabConfig) {
		self.gitlab = Some(gitlab);
	}

	pub fn with_gitlab(mut self, gitlab: models::V1GitLabConfig) -> V1ProviderConfig {
		self.gitlab = Some(gitlab);
		self
	}

	pub fn gitlab(&self) -> Option<&models::V1GitLabConfig> {
		self.gitlab.as_ref()
	}

	pub fn reset_gitlab(&mut self) {
		self.gitlab = None;
	}

	pub fn set_gitlab_self_hosted(&mut self, gitlab_self_hosted: models::V1GitLabSelfHostedConfig) {
		self.gitlab_self_hosted = Some(gitlab_self_hosted);
	}

	pub fn with_gitlab_self_hosted(
		mut self,
		gitlab_self_hosted: models::V1GitLabSelfHostedConfig,
	) -> V1ProviderConfig {
		self.gitlab_self_hosted = Some(gitlab_self_hosted);
		self
	}

	pub fn gitlab_self_hosted(&self) -> Option<&models::V1GitLabSelfHostedConfig> {
		self.gitlab_self_hosted.as_ref()
	}

	pub fn reset_gitlab_self_hosted(&mut self) {
		self.gitlab_self_hosted = None;
	}

	pub fn set_azure_ad(&mut self, azure_ad: models::V1AzureAdConfig) {
		self.azure_ad = Some(azure_ad);
	}

	pub fn with_azure_ad(mut self, azure_ad: models::V1AzureAdConfig) -> V1ProviderConfig {
		self.azure_ad = Some(azure_ad);
		self
	}

	pub fn azure_ad(&self) -> Option<&models::V1AzureAdConfig> {
		self.azure_ad.as_ref()
	}

	pub fn reset_azure_ad(&mut self) {
		self.azure_ad = None;
	}

	pub fn set_apple(&mut self, apple: models::V1AppleConfig) {
		self.apple = Some(apple);
	}

	pub fn with_apple(mut self, apple: models::V1AppleConfig) -> V1ProviderConfig {
		self.apple = Some(apple);
		self
	}

	pub fn apple(&self) -> Option<&models::V1AppleConfig> {
		self.apple.as_ref()
	}

	pub fn reset_apple(&mut self) {
		self.apple = None;
	}

	pub fn set_saml(&mut self, saml: models::Zitadelidpv1SamlConfig) {
		self.saml = Some(saml);
	}

	pub fn with_saml(mut self, saml: models::Zitadelidpv1SamlConfig) -> V1ProviderConfig {
		self.saml = Some(saml);
		self
	}

	pub fn saml(&self) -> Option<&models::Zitadelidpv1SamlConfig> {
		self.saml.as_ref()
	}

	pub fn reset_saml(&mut self) {
		self.saml = None;
	}
}
