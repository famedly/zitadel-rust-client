/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1WebAuthNToken {
  #[serde(rename = "id")]
  id: Option<String>,
  /// current state of the token
  #[serde(rename = "state")]
  state: Option<models::V1AuthFactorState>,
  #[serde(rename = "name")]
  name: Option<String>
}

impl V1WebAuthNToken {
  pub fn new() -> V1WebAuthNToken {
    V1WebAuthNToken {
      id: None,
      state: None,
      name: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> V1WebAuthNToken {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_state(&mut self, state: models::V1AuthFactorState) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: models::V1AuthFactorState) -> V1WebAuthNToken {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&models::V1AuthFactorState> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> V1WebAuthNToken {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



