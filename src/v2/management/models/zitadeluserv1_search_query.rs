/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct Zitadeluserv1SearchQuery {
	#[serde(rename = "userNameQuery")]
	user_name_query: Option<models::V1UserNameQuery>,
	#[serde(rename = "firstNameQuery")]
	first_name_query: Option<models::Zitadeluserv1FirstNameQuery>,
	#[serde(rename = "lastNameQuery")]
	last_name_query: Option<models::Zitadeluserv1LastNameQuery>,
	#[serde(rename = "nickNameQuery")]
	nick_name_query: Option<models::V1NickNameQuery>,
	#[serde(rename = "displayNameQuery")]
	display_name_query: Option<models::V1DisplayNameQuery>,
	#[serde(rename = "emailQuery")]
	email_query: Option<models::Zitadeluserv1EmailQuery>,
	#[serde(rename = "stateQuery")]
	state_query: Option<models::V1StateQuery>,
	#[serde(rename = "typeQuery")]
	type_query: Option<models::V1TypeQuery>,
	#[serde(rename = "loginNameQuery")]
	login_name_query: Option<models::V1LoginNameQuery>,
	#[serde(rename = "inUserIdsQuery")]
	in_user_ids_query: Option<models::V1InUserIdQuery>,
	#[serde(rename = "orQuery")]
	or_query: Option<models::V1OrQuery>,
	#[serde(rename = "andQuery")]
	and_query: Option<models::V1AndQuery>,
	#[serde(rename = "inUserEmailsQuery")]
	in_user_emails_query: Option<models::V1InUserEmailsQuery>,
}

impl Zitadeluserv1SearchQuery {
	pub fn new() -> Zitadeluserv1SearchQuery {
		Zitadeluserv1SearchQuery {
			user_name_query: None,
			first_name_query: None,
			last_name_query: None,
			nick_name_query: None,
			display_name_query: None,
			email_query: None,
			state_query: None,
			type_query: None,
			login_name_query: None,
			in_user_ids_query: None,
			or_query: None,
			and_query: None,
			in_user_emails_query: None,
		}
	}

	pub fn set_user_name_query(&mut self, user_name_query: models::V1UserNameQuery) {
		self.user_name_query = Some(user_name_query);
	}

	pub fn with_user_name_query(
		mut self,
		user_name_query: models::V1UserNameQuery,
	) -> Zitadeluserv1SearchQuery {
		self.user_name_query = Some(user_name_query);
		self
	}

	pub fn user_name_query(&self) -> Option<&models::V1UserNameQuery> {
		self.user_name_query.as_ref()
	}

	pub fn reset_user_name_query(&mut self) {
		self.user_name_query = None;
	}

	pub fn set_first_name_query(&mut self, first_name_query: models::Zitadeluserv1FirstNameQuery) {
		self.first_name_query = Some(first_name_query);
	}

	pub fn with_first_name_query(
		mut self,
		first_name_query: models::Zitadeluserv1FirstNameQuery,
	) -> Zitadeluserv1SearchQuery {
		self.first_name_query = Some(first_name_query);
		self
	}

	pub fn first_name_query(&self) -> Option<&models::Zitadeluserv1FirstNameQuery> {
		self.first_name_query.as_ref()
	}

	pub fn reset_first_name_query(&mut self) {
		self.first_name_query = None;
	}

	pub fn set_last_name_query(&mut self, last_name_query: models::Zitadeluserv1LastNameQuery) {
		self.last_name_query = Some(last_name_query);
	}

	pub fn with_last_name_query(
		mut self,
		last_name_query: models::Zitadeluserv1LastNameQuery,
	) -> Zitadeluserv1SearchQuery {
		self.last_name_query = Some(last_name_query);
		self
	}

	pub fn last_name_query(&self) -> Option<&models::Zitadeluserv1LastNameQuery> {
		self.last_name_query.as_ref()
	}

	pub fn reset_last_name_query(&mut self) {
		self.last_name_query = None;
	}

	pub fn set_nick_name_query(&mut self, nick_name_query: models::V1NickNameQuery) {
		self.nick_name_query = Some(nick_name_query);
	}

	pub fn with_nick_name_query(
		mut self,
		nick_name_query: models::V1NickNameQuery,
	) -> Zitadeluserv1SearchQuery {
		self.nick_name_query = Some(nick_name_query);
		self
	}

	pub fn nick_name_query(&self) -> Option<&models::V1NickNameQuery> {
		self.nick_name_query.as_ref()
	}

	pub fn reset_nick_name_query(&mut self) {
		self.nick_name_query = None;
	}

	pub fn set_display_name_query(&mut self, display_name_query: models::V1DisplayNameQuery) {
		self.display_name_query = Some(display_name_query);
	}

	pub fn with_display_name_query(
		mut self,
		display_name_query: models::V1DisplayNameQuery,
	) -> Zitadeluserv1SearchQuery {
		self.display_name_query = Some(display_name_query);
		self
	}

	pub fn display_name_query(&self) -> Option<&models::V1DisplayNameQuery> {
		self.display_name_query.as_ref()
	}

	pub fn reset_display_name_query(&mut self) {
		self.display_name_query = None;
	}

	pub fn set_email_query(&mut self, email_query: models::Zitadeluserv1EmailQuery) {
		self.email_query = Some(email_query);
	}

	pub fn with_email_query(
		mut self,
		email_query: models::Zitadeluserv1EmailQuery,
	) -> Zitadeluserv1SearchQuery {
		self.email_query = Some(email_query);
		self
	}

	pub fn email_query(&self) -> Option<&models::Zitadeluserv1EmailQuery> {
		self.email_query.as_ref()
	}

	pub fn reset_email_query(&mut self) {
		self.email_query = None;
	}

	pub fn set_state_query(&mut self, state_query: models::V1StateQuery) {
		self.state_query = Some(state_query);
	}

	pub fn with_state_query(
		mut self,
		state_query: models::V1StateQuery,
	) -> Zitadeluserv1SearchQuery {
		self.state_query = Some(state_query);
		self
	}

	pub fn state_query(&self) -> Option<&models::V1StateQuery> {
		self.state_query.as_ref()
	}

	pub fn reset_state_query(&mut self) {
		self.state_query = None;
	}

	pub fn set_type_query(&mut self, type_query: models::V1TypeQuery) {
		self.type_query = Some(type_query);
	}

	pub fn with_type_query(mut self, type_query: models::V1TypeQuery) -> Zitadeluserv1SearchQuery {
		self.type_query = Some(type_query);
		self
	}

	pub fn type_query(&self) -> Option<&models::V1TypeQuery> {
		self.type_query.as_ref()
	}

	pub fn reset_type_query(&mut self) {
		self.type_query = None;
	}

	pub fn set_login_name_query(&mut self, login_name_query: models::V1LoginNameQuery) {
		self.login_name_query = Some(login_name_query);
	}

	pub fn with_login_name_query(
		mut self,
		login_name_query: models::V1LoginNameQuery,
	) -> Zitadeluserv1SearchQuery {
		self.login_name_query = Some(login_name_query);
		self
	}

	pub fn login_name_query(&self) -> Option<&models::V1LoginNameQuery> {
		self.login_name_query.as_ref()
	}

	pub fn reset_login_name_query(&mut self) {
		self.login_name_query = None;
	}

	pub fn set_in_user_ids_query(&mut self, in_user_ids_query: models::V1InUserIdQuery) {
		self.in_user_ids_query = Some(in_user_ids_query);
	}

	pub fn with_in_user_ids_query(
		mut self,
		in_user_ids_query: models::V1InUserIdQuery,
	) -> Zitadeluserv1SearchQuery {
		self.in_user_ids_query = Some(in_user_ids_query);
		self
	}

	pub fn in_user_ids_query(&self) -> Option<&models::V1InUserIdQuery> {
		self.in_user_ids_query.as_ref()
	}

	pub fn reset_in_user_ids_query(&mut self) {
		self.in_user_ids_query = None;
	}

	pub fn set_or_query(&mut self, or_query: models::V1OrQuery) {
		self.or_query = Some(or_query);
	}

	pub fn with_or_query(mut self, or_query: models::V1OrQuery) -> Zitadeluserv1SearchQuery {
		self.or_query = Some(or_query);
		self
	}

	pub fn or_query(&self) -> Option<&models::V1OrQuery> {
		self.or_query.as_ref()
	}

	pub fn reset_or_query(&mut self) {
		self.or_query = None;
	}

	pub fn set_and_query(&mut self, and_query: models::V1AndQuery) {
		self.and_query = Some(and_query);
	}

	pub fn with_and_query(mut self, and_query: models::V1AndQuery) -> Zitadeluserv1SearchQuery {
		self.and_query = Some(and_query);
		self
	}

	pub fn and_query(&self) -> Option<&models::V1AndQuery> {
		self.and_query.as_ref()
	}

	pub fn reset_and_query(&mut self) {
		self.and_query = None;
	}

	pub fn set_in_user_emails_query(&mut self, in_user_emails_query: models::V1InUserEmailsQuery) {
		self.in_user_emails_query = Some(in_user_emails_query);
	}

	pub fn with_in_user_emails_query(
		mut self,
		in_user_emails_query: models::V1InUserEmailsQuery,
	) -> Zitadeluserv1SearchQuery {
		self.in_user_emails_query = Some(in_user_emails_query);
		self
	}

	pub fn in_user_emails_query(&self) -> Option<&models::V1InUserEmailsQuery> {
		self.in_user_emails_query.as_ref()
	}

	pub fn reset_in_user_emails_query(&mut self) {
		self.in_user_emails_query = None;
	}
}
