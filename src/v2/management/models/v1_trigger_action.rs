// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1TriggerAction {
	#[serde(rename = "triggerType")]
	trigger_type: Option<models::Zitadelactionv1TriggerType>,
	#[serde(rename = "actions")]
	actions: Option<Vec<models::V1Action>>,
}

impl V1TriggerAction {
	pub fn new() -> V1TriggerAction {
		V1TriggerAction { trigger_type: None, actions: None }
	}

	pub fn set_trigger_type(&mut self, trigger_type: models::Zitadelactionv1TriggerType) {
		self.trigger_type = Some(trigger_type);
	}

	pub fn with_trigger_type(
		mut self,
		trigger_type: models::Zitadelactionv1TriggerType,
	) -> V1TriggerAction {
		self.trigger_type = Some(trigger_type);
		self
	}

	pub fn trigger_type(&self) -> Option<&models::Zitadelactionv1TriggerType> {
		self.trigger_type.as_ref()
	}

	pub fn reset_trigger_type(&mut self) {
		self.trigger_type = None;
	}

	pub fn set_actions(&mut self, actions: Vec<models::V1Action>) {
		self.actions = Some(actions);
	}

	pub fn with_actions(mut self, actions: Vec<models::V1Action>) -> V1TriggerAction {
		self.actions = Some(actions);
		self
	}

	pub fn actions(&self) -> Option<&Vec<models::V1Action>> {
		self.actions.as_ref()
	}

	pub fn reset_actions(&mut self) {
		self.actions = None;
	}
}
