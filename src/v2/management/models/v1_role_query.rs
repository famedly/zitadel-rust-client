// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1RoleQuery {
	#[serde(rename = "keyQuery")]
	key_query: Option<models::V1RoleKeyQuery>,
	#[serde(rename = "displayNameQuery")]
	display_name_query: Option<models::V1RoleDisplayNameQuery>,
}

impl V1RoleQuery {
	pub fn new() -> V1RoleQuery {
		V1RoleQuery { key_query: None, display_name_query: None }
	}

	pub fn set_key_query(&mut self, key_query: models::V1RoleKeyQuery) {
		self.key_query = Some(key_query);
	}

	pub fn with_key_query(mut self, key_query: models::V1RoleKeyQuery) -> V1RoleQuery {
		self.key_query = Some(key_query);
		self
	}

	pub fn key_query(&self) -> Option<&models::V1RoleKeyQuery> {
		self.key_query.as_ref()
	}

	pub fn reset_key_query(&mut self) {
		self.key_query = None;
	}

	pub fn set_display_name_query(&mut self, display_name_query: models::V1RoleDisplayNameQuery) {
		self.display_name_query = Some(display_name_query);
	}

	pub fn with_display_name_query(
		mut self,
		display_name_query: models::V1RoleDisplayNameQuery,
	) -> V1RoleQuery {
		self.display_name_query = Some(display_name_query);
		self
	}

	pub fn display_name_query(&self) -> Option<&models::V1RoleDisplayNameQuery> {
		self.display_name_query.as_ref()
	}

	pub fn reset_display_name_query(&mut self) {
		self.display_name_query = None;
	}
}
