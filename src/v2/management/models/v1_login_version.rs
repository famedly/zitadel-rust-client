// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1LoginVersion {
	#[serde(rename = "loginV1")]
	login_v1: Option<models::V1LoginV1>,
	#[serde(rename = "loginV2")]
	login_v2: Option<models::V1LoginV2>,
}

impl V1LoginVersion {
	pub fn new() -> V1LoginVersion {
		V1LoginVersion { login_v1: None, login_v2: None }
	}

	pub fn set_login_v1(&mut self, login_v1: models::V1LoginV1) {
		self.login_v1 = Some(login_v1);
	}

	pub fn with_login_v1(mut self, login_v1: models::V1LoginV1) -> V1LoginVersion {
		self.login_v1 = Some(login_v1);
		self
	}

	pub fn login_v1(&self) -> Option<&models::V1LoginV1> {
		self.login_v1.as_ref()
	}

	pub fn reset_login_v1(&mut self) {
		self.login_v1 = None;
	}

	pub fn set_login_v2(&mut self, login_v2: models::V1LoginV2) {
		self.login_v2 = Some(login_v2);
	}

	pub fn with_login_v2(mut self, login_v2: models::V1LoginV2) -> V1LoginVersion {
		self.login_v2 = Some(login_v2);
		self
	}

	pub fn login_v2(&self) -> Option<&models::V1LoginV2> {
		self.login_v2.as_ref()
	}

	pub fn reset_login_v2(&mut self) {
		self.login_v2 = None;
	}
}
