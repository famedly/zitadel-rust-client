// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1AddHumanUserRequest {
	#[serde(rename = "userName")]
	user_name: Option<String>,
	#[serde(rename = "profile")]
	profile: Option<models::V1AddHumanUserRequestProfile>,
	#[serde(rename = "email")]
	email: Option<models::V1AddHumanUserRequestEmail>,
	#[serde(rename = "phone")]
	phone: Option<models::V1AddHumanUserRequestPhone>,
	#[serde(rename = "initialPassword")]
	initial_password: Option<String>,
}

impl V1AddHumanUserRequest {
	pub fn new() -> V1AddHumanUserRequest {
		V1AddHumanUserRequest {
			user_name: None,
			profile: None,
			email: None,
			phone: None,
			initial_password: None,
		}
	}

	pub fn set_user_name(&mut self, user_name: String) {
		self.user_name = Some(user_name);
	}

	pub fn with_user_name(mut self, user_name: String) -> V1AddHumanUserRequest {
		self.user_name = Some(user_name);
		self
	}

	pub fn user_name(&self) -> Option<&String> {
		self.user_name.as_ref()
	}

	pub fn reset_user_name(&mut self) {
		self.user_name = None;
	}

	pub fn set_profile(&mut self, profile: models::V1AddHumanUserRequestProfile) {
		self.profile = Some(profile);
	}

	pub fn with_profile(
		mut self,
		profile: models::V1AddHumanUserRequestProfile,
	) -> V1AddHumanUserRequest {
		self.profile = Some(profile);
		self
	}

	pub fn profile(&self) -> Option<&models::V1AddHumanUserRequestProfile> {
		self.profile.as_ref()
	}

	pub fn reset_profile(&mut self) {
		self.profile = None;
	}

	pub fn set_email(&mut self, email: models::V1AddHumanUserRequestEmail) {
		self.email = Some(email);
	}

	pub fn with_email(
		mut self,
		email: models::V1AddHumanUserRequestEmail,
	) -> V1AddHumanUserRequest {
		self.email = Some(email);
		self
	}

	pub fn email(&self) -> Option<&models::V1AddHumanUserRequestEmail> {
		self.email.as_ref()
	}

	pub fn reset_email(&mut self) {
		self.email = None;
	}

	pub fn set_phone(&mut self, phone: models::V1AddHumanUserRequestPhone) {
		self.phone = Some(phone);
	}

	pub fn with_phone(
		mut self,
		phone: models::V1AddHumanUserRequestPhone,
	) -> V1AddHumanUserRequest {
		self.phone = Some(phone);
		self
	}

	pub fn phone(&self) -> Option<&models::V1AddHumanUserRequestPhone> {
		self.phone.as_ref()
	}

	pub fn reset_phone(&mut self) {
		self.phone = None;
	}

	pub fn set_initial_password(&mut self, initial_password: String) {
		self.initial_password = Some(initial_password);
	}

	pub fn with_initial_password(mut self, initial_password: String) -> V1AddHumanUserRequest {
		self.initial_password = Some(initial_password);
		self
	}

	pub fn initial_password(&self) -> Option<&String> {
		self.initial_password.as_ref()
	}

	pub fn reset_initial_password(&mut self) {
		self.initial_password = None;
	}
}
