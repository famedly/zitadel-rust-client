/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct Zitadeluserv1EmailQuery {
  /// email address of the user
  #[serde(rename = "emailAddress")]
  email_address: Option<String>,
  /// defines which text equality method is used
  #[serde(rename = "method")]
  method: Option<models::V1TextQueryMethod>
}

impl Zitadeluserv1EmailQuery {
  pub fn new() -> Zitadeluserv1EmailQuery {
    Zitadeluserv1EmailQuery {
      email_address: None,
      method: None
    }
  }

  pub fn set_email_address(&mut self, email_address: String) {
    self.email_address = Some(email_address);
  }

  pub fn with_email_address(mut self, email_address: String) -> Zitadeluserv1EmailQuery {
    self.email_address = Some(email_address);
    self
  }

  pub fn email_address(&self) -> Option<&String> {
    self.email_address.as_ref()
  }

  pub fn reset_email_address(&mut self) {
    self.email_address = None;
  }

  pub fn set_method(&mut self, method: models::V1TextQueryMethod) {
    self.method = Some(method);
  }

  pub fn with_method(mut self, method: models::V1TextQueryMethod) -> Zitadeluserv1EmailQuery {
    self.method = Some(method);
    self
  }

  pub fn method(&self) -> Option<&models::V1TextQueryMethod> {
    self.method.as_ref()
  }

  pub fn reset_method(&mut self) {
    self.method = None;
  }

}



