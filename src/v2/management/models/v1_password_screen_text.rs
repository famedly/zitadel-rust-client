// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1PasswordScreenText {
	#[serde(rename = "title")]
	title: Option<String>,
	#[serde(rename = "description")]
	description: Option<String>,
	#[serde(rename = "passwordLabel")]
	password_label: Option<String>,
	#[serde(rename = "resetLinkText")]
	reset_link_text: Option<String>,
	#[serde(rename = "backButtonText")]
	back_button_text: Option<String>,
	#[serde(rename = "nextButtonText")]
	next_button_text: Option<String>,
	#[serde(rename = "minLength")]
	min_length: Option<String>,
	#[serde(rename = "hasUppercase")]
	has_uppercase: Option<String>,
	#[serde(rename = "hasLowercase")]
	has_lowercase: Option<String>,
	#[serde(rename = "hasNumber")]
	has_number: Option<String>,
	#[serde(rename = "hasSymbol")]
	has_symbol: Option<String>,
	#[serde(rename = "confirmation")]
	confirmation: Option<String>,
}

impl V1PasswordScreenText {
	pub fn new() -> V1PasswordScreenText {
		V1PasswordScreenText {
			title: None,
			description: None,
			password_label: None,
			reset_link_text: None,
			back_button_text: None,
			next_button_text: None,
			min_length: None,
			has_uppercase: None,
			has_lowercase: None,
			has_number: None,
			has_symbol: None,
			confirmation: None,
		}
	}

	pub fn set_title(&mut self, title: String) {
		self.title = Some(title);
	}

	pub fn with_title(mut self, title: String) -> V1PasswordScreenText {
		self.title = Some(title);
		self
	}

	pub fn title(&self) -> Option<&String> {
		self.title.as_ref()
	}

	pub fn reset_title(&mut self) {
		self.title = None;
	}

	pub fn set_description(&mut self, description: String) {
		self.description = Some(description);
	}

	pub fn with_description(mut self, description: String) -> V1PasswordScreenText {
		self.description = Some(description);
		self
	}

	pub fn description(&self) -> Option<&String> {
		self.description.as_ref()
	}

	pub fn reset_description(&mut self) {
		self.description = None;
	}

	pub fn set_password_label(&mut self, password_label: String) {
		self.password_label = Some(password_label);
	}

	pub fn with_password_label(mut self, password_label: String) -> V1PasswordScreenText {
		self.password_label = Some(password_label);
		self
	}

	pub fn password_label(&self) -> Option<&String> {
		self.password_label.as_ref()
	}

	pub fn reset_password_label(&mut self) {
		self.password_label = None;
	}

	pub fn set_reset_link_text(&mut self, reset_link_text: String) {
		self.reset_link_text = Some(reset_link_text);
	}

	pub fn with_reset_link_text(mut self, reset_link_text: String) -> V1PasswordScreenText {
		self.reset_link_text = Some(reset_link_text);
		self
	}

	pub fn reset_link_text(&self) -> Option<&String> {
		self.reset_link_text.as_ref()
	}

	pub fn reset_reset_link_text(&mut self) {
		self.reset_link_text = None;
	}

	pub fn set_back_button_text(&mut self, back_button_text: String) {
		self.back_button_text = Some(back_button_text);
	}

	pub fn with_back_button_text(mut self, back_button_text: String) -> V1PasswordScreenText {
		self.back_button_text = Some(back_button_text);
		self
	}

	pub fn back_button_text(&self) -> Option<&String> {
		self.back_button_text.as_ref()
	}

	pub fn reset_back_button_text(&mut self) {
		self.back_button_text = None;
	}

	pub fn set_next_button_text(&mut self, next_button_text: String) {
		self.next_button_text = Some(next_button_text);
	}

	pub fn with_next_button_text(mut self, next_button_text: String) -> V1PasswordScreenText {
		self.next_button_text = Some(next_button_text);
		self
	}

	pub fn next_button_text(&self) -> Option<&String> {
		self.next_button_text.as_ref()
	}

	pub fn reset_next_button_text(&mut self) {
		self.next_button_text = None;
	}

	pub fn set_min_length(&mut self, min_length: String) {
		self.min_length = Some(min_length);
	}

	pub fn with_min_length(mut self, min_length: String) -> V1PasswordScreenText {
		self.min_length = Some(min_length);
		self
	}

	pub fn min_length(&self) -> Option<&String> {
		self.min_length.as_ref()
	}

	pub fn reset_min_length(&mut self) {
		self.min_length = None;
	}

	pub fn set_has_uppercase(&mut self, has_uppercase: String) {
		self.has_uppercase = Some(has_uppercase);
	}

	pub fn with_has_uppercase(mut self, has_uppercase: String) -> V1PasswordScreenText {
		self.has_uppercase = Some(has_uppercase);
		self
	}

	pub fn has_uppercase(&self) -> Option<&String> {
		self.has_uppercase.as_ref()
	}

	pub fn reset_has_uppercase(&mut self) {
		self.has_uppercase = None;
	}

	pub fn set_has_lowercase(&mut self, has_lowercase: String) {
		self.has_lowercase = Some(has_lowercase);
	}

	pub fn with_has_lowercase(mut self, has_lowercase: String) -> V1PasswordScreenText {
		self.has_lowercase = Some(has_lowercase);
		self
	}

	pub fn has_lowercase(&self) -> Option<&String> {
		self.has_lowercase.as_ref()
	}

	pub fn reset_has_lowercase(&mut self) {
		self.has_lowercase = None;
	}

	pub fn set_has_number(&mut self, has_number: String) {
		self.has_number = Some(has_number);
	}

	pub fn with_has_number(mut self, has_number: String) -> V1PasswordScreenText {
		self.has_number = Some(has_number);
		self
	}

	pub fn has_number(&self) -> Option<&String> {
		self.has_number.as_ref()
	}

	pub fn reset_has_number(&mut self) {
		self.has_number = None;
	}

	pub fn set_has_symbol(&mut self, has_symbol: String) {
		self.has_symbol = Some(has_symbol);
	}

	pub fn with_has_symbol(mut self, has_symbol: String) -> V1PasswordScreenText {
		self.has_symbol = Some(has_symbol);
		self
	}

	pub fn has_symbol(&self) -> Option<&String> {
		self.has_symbol.as_ref()
	}

	pub fn reset_has_symbol(&mut self) {
		self.has_symbol = None;
	}

	pub fn set_confirmation(&mut self, confirmation: String) {
		self.confirmation = Some(confirmation);
	}

	pub fn with_confirmation(mut self, confirmation: String) -> V1PasswordScreenText {
		self.confirmation = Some(confirmation);
		self
	}

	pub fn confirmation(&self) -> Option<&String> {
		self.confirmation.as_ref()
	}

	pub fn reset_confirmation(&mut self) {
		self.confirmation = None;
	}
}
