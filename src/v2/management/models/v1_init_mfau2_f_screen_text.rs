/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1InitMfau2FScreenText {
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "tokenNameLabel")]
  token_name_label: Option<String>,
  #[serde(rename = "notSupported")]
  not_supported: Option<String>,
  #[serde(rename = "registerTokenButtonText")]
  register_token_button_text: Option<String>,
  #[serde(rename = "errorRetry")]
  error_retry: Option<String>
}

impl V1InitMfau2FScreenText {
  pub fn new() -> V1InitMfau2FScreenText {
    V1InitMfau2FScreenText {
      title: None,
      description: None,
      token_name_label: None,
      not_supported: None,
      register_token_button_text: None,
      error_retry: None
    }
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> V1InitMfau2FScreenText {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> V1InitMfau2FScreenText {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_token_name_label(&mut self, token_name_label: String) {
    self.token_name_label = Some(token_name_label);
  }

  pub fn with_token_name_label(mut self, token_name_label: String) -> V1InitMfau2FScreenText {
    self.token_name_label = Some(token_name_label);
    self
  }

  pub fn token_name_label(&self) -> Option<&String> {
    self.token_name_label.as_ref()
  }

  pub fn reset_token_name_label(&mut self) {
    self.token_name_label = None;
  }

  pub fn set_not_supported(&mut self, not_supported: String) {
    self.not_supported = Some(not_supported);
  }

  pub fn with_not_supported(mut self, not_supported: String) -> V1InitMfau2FScreenText {
    self.not_supported = Some(not_supported);
    self
  }

  pub fn not_supported(&self) -> Option<&String> {
    self.not_supported.as_ref()
  }

  pub fn reset_not_supported(&mut self) {
    self.not_supported = None;
  }

  pub fn set_register_token_button_text(&mut self, register_token_button_text: String) {
    self.register_token_button_text = Some(register_token_button_text);
  }

  pub fn with_register_token_button_text(mut self, register_token_button_text: String) -> V1InitMfau2FScreenText {
    self.register_token_button_text = Some(register_token_button_text);
    self
  }

  pub fn register_token_button_text(&self) -> Option<&String> {
    self.register_token_button_text.as_ref()
  }

  pub fn reset_register_token_button_text(&mut self) {
    self.register_token_button_text = None;
  }

  pub fn set_error_retry(&mut self, error_retry: String) {
    self.error_retry = Some(error_retry);
  }

  pub fn with_error_retry(mut self, error_retry: String) -> V1InitMfau2FScreenText {
    self.error_retry = Some(error_retry);
    self
  }

  pub fn error_retry(&self) -> Option<&String> {
    self.error_retry.as_ref()
  }

  pub fn reset_error_retry(&mut self) {
    self.error_retry = None;
  }

}



