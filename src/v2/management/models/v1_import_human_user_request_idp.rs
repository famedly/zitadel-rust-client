// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1ImportHumanUserRequestIdp {
	/// The internal ID of the identity provider configured in ZITADEL.
	#[serde(rename = "configId")]
	config_id: Option<String>,
	/// The id of the user in the external identity provider
	#[serde(rename = "externalUserId")]
	external_user_id: Option<String>,
	/// A display name ZITADEL can show on the linked provider.
	#[serde(rename = "displayName")]
	display_name: Option<String>,
}

impl V1ImportHumanUserRequestIdp {
	pub fn new() -> V1ImportHumanUserRequestIdp {
		V1ImportHumanUserRequestIdp { config_id: None, external_user_id: None, display_name: None }
	}

	pub fn set_config_id(&mut self, config_id: String) {
		self.config_id = Some(config_id);
	}

	pub fn with_config_id(mut self, config_id: String) -> V1ImportHumanUserRequestIdp {
		self.config_id = Some(config_id);
		self
	}

	pub fn config_id(&self) -> Option<&String> {
		self.config_id.as_ref()
	}

	pub fn reset_config_id(&mut self) {
		self.config_id = None;
	}

	pub fn set_external_user_id(&mut self, external_user_id: String) {
		self.external_user_id = Some(external_user_id);
	}

	pub fn with_external_user_id(
		mut self,
		external_user_id: String,
	) -> V1ImportHumanUserRequestIdp {
		self.external_user_id = Some(external_user_id);
		self
	}

	pub fn external_user_id(&self) -> Option<&String> {
		self.external_user_id.as_ref()
	}

	pub fn reset_external_user_id(&mut self) {
		self.external_user_id = None;
	}

	pub fn set_display_name(&mut self, display_name: String) {
		self.display_name = Some(display_name);
	}

	pub fn with_display_name(mut self, display_name: String) -> V1ImportHumanUserRequestIdp {
		self.display_name = Some(display_name);
		self
	}

	pub fn display_name(&self) -> Option<&String> {
		self.display_name.as_ref()
	}

	pub fn reset_display_name(&mut self) {
		self.display_name = None;
	}
}
