/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1ExternalUserNotFoundScreenText {
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "linkButtonText")]
  link_button_text: Option<String>,
  #[serde(rename = "autoRegisterButtonText")]
  auto_register_button_text: Option<String>,
  #[serde(rename = "tosAndPrivacyLabel")]
  tos_and_privacy_label: Option<String>,
  #[serde(rename = "tosConfirm")]
  tos_confirm: Option<String>,
  #[serde(rename = "tosLinkText")]
  tos_link_text: Option<String>,
  #[serde(rename = "privacyLinkText")]
  privacy_link_text: Option<String>,
  #[serde(rename = "privacyConfirm")]
  privacy_confirm: Option<String>
}

impl V1ExternalUserNotFoundScreenText {
  pub fn new() -> V1ExternalUserNotFoundScreenText {
    V1ExternalUserNotFoundScreenText {
      title: None,
      description: None,
      link_button_text: None,
      auto_register_button_text: None,
      tos_and_privacy_label: None,
      tos_confirm: None,
      tos_link_text: None,
      privacy_link_text: None,
      privacy_confirm: None
    }
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> V1ExternalUserNotFoundScreenText {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> V1ExternalUserNotFoundScreenText {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_link_button_text(&mut self, link_button_text: String) {
    self.link_button_text = Some(link_button_text);
  }

  pub fn with_link_button_text(mut self, link_button_text: String) -> V1ExternalUserNotFoundScreenText {
    self.link_button_text = Some(link_button_text);
    self
  }

  pub fn link_button_text(&self) -> Option<&String> {
    self.link_button_text.as_ref()
  }

  pub fn reset_link_button_text(&mut self) {
    self.link_button_text = None;
  }

  pub fn set_auto_register_button_text(&mut self, auto_register_button_text: String) {
    self.auto_register_button_text = Some(auto_register_button_text);
  }

  pub fn with_auto_register_button_text(mut self, auto_register_button_text: String) -> V1ExternalUserNotFoundScreenText {
    self.auto_register_button_text = Some(auto_register_button_text);
    self
  }

  pub fn auto_register_button_text(&self) -> Option<&String> {
    self.auto_register_button_text.as_ref()
  }

  pub fn reset_auto_register_button_text(&mut self) {
    self.auto_register_button_text = None;
  }

  pub fn set_tos_and_privacy_label(&mut self, tos_and_privacy_label: String) {
    self.tos_and_privacy_label = Some(tos_and_privacy_label);
  }

  pub fn with_tos_and_privacy_label(mut self, tos_and_privacy_label: String) -> V1ExternalUserNotFoundScreenText {
    self.tos_and_privacy_label = Some(tos_and_privacy_label);
    self
  }

  pub fn tos_and_privacy_label(&self) -> Option<&String> {
    self.tos_and_privacy_label.as_ref()
  }

  pub fn reset_tos_and_privacy_label(&mut self) {
    self.tos_and_privacy_label = None;
  }

  pub fn set_tos_confirm(&mut self, tos_confirm: String) {
    self.tos_confirm = Some(tos_confirm);
  }

  pub fn with_tos_confirm(mut self, tos_confirm: String) -> V1ExternalUserNotFoundScreenText {
    self.tos_confirm = Some(tos_confirm);
    self
  }

  pub fn tos_confirm(&self) -> Option<&String> {
    self.tos_confirm.as_ref()
  }

  pub fn reset_tos_confirm(&mut self) {
    self.tos_confirm = None;
  }

  pub fn set_tos_link_text(&mut self, tos_link_text: String) {
    self.tos_link_text = Some(tos_link_text);
  }

  pub fn with_tos_link_text(mut self, tos_link_text: String) -> V1ExternalUserNotFoundScreenText {
    self.tos_link_text = Some(tos_link_text);
    self
  }

  pub fn tos_link_text(&self) -> Option<&String> {
    self.tos_link_text.as_ref()
  }

  pub fn reset_tos_link_text(&mut self) {
    self.tos_link_text = None;
  }

  pub fn set_privacy_link_text(&mut self, privacy_link_text: String) {
    self.privacy_link_text = Some(privacy_link_text);
  }

  pub fn with_privacy_link_text(mut self, privacy_link_text: String) -> V1ExternalUserNotFoundScreenText {
    self.privacy_link_text = Some(privacy_link_text);
    self
  }

  pub fn privacy_link_text(&self) -> Option<&String> {
    self.privacy_link_text.as_ref()
  }

  pub fn reset_privacy_link_text(&mut self) {
    self.privacy_link_text = None;
  }

  pub fn set_privacy_confirm(&mut self, privacy_confirm: String) {
    self.privacy_confirm = Some(privacy_confirm);
  }

  pub fn with_privacy_confirm(mut self, privacy_confirm: String) -> V1ExternalUserNotFoundScreenText {
    self.privacy_confirm = Some(privacy_confirm);
    self
  }

  pub fn privacy_confirm(&self) -> Option<&String> {
    self.privacy_confirm.as_ref()
  }

  pub fn reset_privacy_confirm(&mut self) {
    self.privacy_confirm = None;
  }

}



