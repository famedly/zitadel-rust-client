// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1App {
	#[serde(rename = "id")]
	id: Option<String>,
	#[serde(rename = "details")]
	details: Option<models::V1ObjectDetails>,
	/// current state of the application
	#[serde(rename = "state")]
	state: Option<models::V1AppState>,
	#[serde(rename = "name")]
	name: Option<String>,
	#[serde(rename = "oidcConfig")]
	oidc_config: Option<models::Zitadelappv1OidcConfig>,
	#[serde(rename = "apiConfig")]
	api_config: Option<models::V1ApiConfig>,
	#[serde(rename = "samlConfig")]
	saml_config: Option<models::Zitadelappv1SamlConfig>,
}

impl V1App {
	pub fn new() -> V1App {
		V1App {
			id: None,
			details: None,
			state: None,
			name: None,
			oidc_config: None,
			api_config: None,
			saml_config: None,
		}
	}

	pub fn set_id(&mut self, id: String) {
		self.id = Some(id);
	}

	pub fn with_id(mut self, id: String) -> V1App {
		self.id = Some(id);
		self
	}

	pub fn id(&self) -> Option<&String> {
		self.id.as_ref()
	}

	pub fn reset_id(&mut self) {
		self.id = None;
	}

	pub fn set_details(&mut self, details: models::V1ObjectDetails) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::V1ObjectDetails) -> V1App {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V1ObjectDetails> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_state(&mut self, state: models::V1AppState) {
		self.state = Some(state);
	}

	pub fn with_state(mut self, state: models::V1AppState) -> V1App {
		self.state = Some(state);
		self
	}

	pub fn state(&self) -> Option<&models::V1AppState> {
		self.state.as_ref()
	}

	pub fn reset_state(&mut self) {
		self.state = None;
	}

	pub fn set_name(&mut self, name: String) {
		self.name = Some(name);
	}

	pub fn with_name(mut self, name: String) -> V1App {
		self.name = Some(name);
		self
	}

	pub fn name(&self) -> Option<&String> {
		self.name.as_ref()
	}

	pub fn reset_name(&mut self) {
		self.name = None;
	}

	pub fn set_oidc_config(&mut self, oidc_config: models::Zitadelappv1OidcConfig) {
		self.oidc_config = Some(oidc_config);
	}

	pub fn with_oidc_config(mut self, oidc_config: models::Zitadelappv1OidcConfig) -> V1App {
		self.oidc_config = Some(oidc_config);
		self
	}

	pub fn oidc_config(&self) -> Option<&models::Zitadelappv1OidcConfig> {
		self.oidc_config.as_ref()
	}

	pub fn reset_oidc_config(&mut self) {
		self.oidc_config = None;
	}

	pub fn set_api_config(&mut self, api_config: models::V1ApiConfig) {
		self.api_config = Some(api_config);
	}

	pub fn with_api_config(mut self, api_config: models::V1ApiConfig) -> V1App {
		self.api_config = Some(api_config);
		self
	}

	pub fn api_config(&self) -> Option<&models::V1ApiConfig> {
		self.api_config.as_ref()
	}

	pub fn reset_api_config(&mut self) {
		self.api_config = None;
	}

	pub fn set_saml_config(&mut self, saml_config: models::Zitadelappv1SamlConfig) {
		self.saml_config = Some(saml_config);
	}

	pub fn with_saml_config(mut self, saml_config: models::Zitadelappv1SamlConfig) -> V1App {
		self.saml_config = Some(saml_config);
		self
	}

	pub fn saml_config(&self) -> Option<&models::Zitadelappv1SamlConfig> {
		self.saml_config.as_ref()
	}

	pub fn reset_saml_config(&mut self) {
		self.saml_config = None;
	}
}
