/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1UserGrantQuery {
  #[serde(rename = "projectIdQuery")]
  project_id_query: Option<models::V1UserGrantProjectIdQuery>,
  #[serde(rename = "userIdQuery")]
  user_id_query: Option<models::V1UserGrantUserIdQuery>,
  #[serde(rename = "withGrantedQuery")]
  with_granted_query: Option<models::V1UserGrantWithGrantedQuery>,
  #[serde(rename = "roleKeyQuery")]
  role_key_query: Option<models::V1UserGrantRoleKeyQuery>,
  #[serde(rename = "projectGrantIdQuery")]
  project_grant_id_query: Option<models::V1UserGrantProjectGrantIdQuery>,
  #[serde(rename = "userNameQuery")]
  user_name_query: Option<models::V1UserGrantUserNameQuery>,
  #[serde(rename = "firstNameQuery")]
  first_name_query: Option<models::V1UserGrantFirstNameQuery>,
  #[serde(rename = "lastNameQuery")]
  last_name_query: Option<models::V1UserGrantLastNameQuery>,
  #[serde(rename = "emailQuery")]
  email_query: Option<models::V1UserGrantEmailQuery>,
  #[serde(rename = "orgNameQuery")]
  org_name_query: Option<models::V1UserGrantOrgNameQuery>,
  #[serde(rename = "orgDomainQuery")]
  org_domain_query: Option<models::V1UserGrantOrgDomainQuery>,
  #[serde(rename = "projectNameQuery")]
  project_name_query: Option<models::V1UserGrantProjectNameQuery>,
  #[serde(rename = "displayNameQuery")]
  display_name_query: Option<models::V1UserGrantDisplayNameQuery>,
  #[serde(rename = "userTypeQuery")]
  user_type_query: Option<models::V1UserGrantUserTypeQuery>
}

impl V1UserGrantQuery {
  pub fn new() -> V1UserGrantQuery {
    V1UserGrantQuery {
      project_id_query: None,
      user_id_query: None,
      with_granted_query: None,
      role_key_query: None,
      project_grant_id_query: None,
      user_name_query: None,
      first_name_query: None,
      last_name_query: None,
      email_query: None,
      org_name_query: None,
      org_domain_query: None,
      project_name_query: None,
      display_name_query: None,
      user_type_query: None
    }
  }

  pub fn set_project_id_query(&mut self, project_id_query: models::V1UserGrantProjectIdQuery) {
    self.project_id_query = Some(project_id_query);
  }

  pub fn with_project_id_query(mut self, project_id_query: models::V1UserGrantProjectIdQuery) -> V1UserGrantQuery {
    self.project_id_query = Some(project_id_query);
    self
  }

  pub fn project_id_query(&self) -> Option<&models::V1UserGrantProjectIdQuery> {
    self.project_id_query.as_ref()
  }

  pub fn reset_project_id_query(&mut self) {
    self.project_id_query = None;
  }

  pub fn set_user_id_query(&mut self, user_id_query: models::V1UserGrantUserIdQuery) {
    self.user_id_query = Some(user_id_query);
  }

  pub fn with_user_id_query(mut self, user_id_query: models::V1UserGrantUserIdQuery) -> V1UserGrantQuery {
    self.user_id_query = Some(user_id_query);
    self
  }

  pub fn user_id_query(&self) -> Option<&models::V1UserGrantUserIdQuery> {
    self.user_id_query.as_ref()
  }

  pub fn reset_user_id_query(&mut self) {
    self.user_id_query = None;
  }

  pub fn set_with_granted_query(&mut self, with_granted_query: models::V1UserGrantWithGrantedQuery) {
    self.with_granted_query = Some(with_granted_query);
  }

  pub fn with_with_granted_query(mut self, with_granted_query: models::V1UserGrantWithGrantedQuery) -> V1UserGrantQuery {
    self.with_granted_query = Some(with_granted_query);
    self
  }

  pub fn with_granted_query(&self) -> Option<&models::V1UserGrantWithGrantedQuery> {
    self.with_granted_query.as_ref()
  }

  pub fn reset_with_granted_query(&mut self) {
    self.with_granted_query = None;
  }

  pub fn set_role_key_query(&mut self, role_key_query: models::V1UserGrantRoleKeyQuery) {
    self.role_key_query = Some(role_key_query);
  }

  pub fn with_role_key_query(mut self, role_key_query: models::V1UserGrantRoleKeyQuery) -> V1UserGrantQuery {
    self.role_key_query = Some(role_key_query);
    self
  }

  pub fn role_key_query(&self) -> Option<&models::V1UserGrantRoleKeyQuery> {
    self.role_key_query.as_ref()
  }

  pub fn reset_role_key_query(&mut self) {
    self.role_key_query = None;
  }

  pub fn set_project_grant_id_query(&mut self, project_grant_id_query: models::V1UserGrantProjectGrantIdQuery) {
    self.project_grant_id_query = Some(project_grant_id_query);
  }

  pub fn with_project_grant_id_query(mut self, project_grant_id_query: models::V1UserGrantProjectGrantIdQuery) -> V1UserGrantQuery {
    self.project_grant_id_query = Some(project_grant_id_query);
    self
  }

  pub fn project_grant_id_query(&self) -> Option<&models::V1UserGrantProjectGrantIdQuery> {
    self.project_grant_id_query.as_ref()
  }

  pub fn reset_project_grant_id_query(&mut self) {
    self.project_grant_id_query = None;
  }

  pub fn set_user_name_query(&mut self, user_name_query: models::V1UserGrantUserNameQuery) {
    self.user_name_query = Some(user_name_query);
  }

  pub fn with_user_name_query(mut self, user_name_query: models::V1UserGrantUserNameQuery) -> V1UserGrantQuery {
    self.user_name_query = Some(user_name_query);
    self
  }

  pub fn user_name_query(&self) -> Option<&models::V1UserGrantUserNameQuery> {
    self.user_name_query.as_ref()
  }

  pub fn reset_user_name_query(&mut self) {
    self.user_name_query = None;
  }

  pub fn set_first_name_query(&mut self, first_name_query: models::V1UserGrantFirstNameQuery) {
    self.first_name_query = Some(first_name_query);
  }

  pub fn with_first_name_query(mut self, first_name_query: models::V1UserGrantFirstNameQuery) -> V1UserGrantQuery {
    self.first_name_query = Some(first_name_query);
    self
  }

  pub fn first_name_query(&self) -> Option<&models::V1UserGrantFirstNameQuery> {
    self.first_name_query.as_ref()
  }

  pub fn reset_first_name_query(&mut self) {
    self.first_name_query = None;
  }

  pub fn set_last_name_query(&mut self, last_name_query: models::V1UserGrantLastNameQuery) {
    self.last_name_query = Some(last_name_query);
  }

  pub fn with_last_name_query(mut self, last_name_query: models::V1UserGrantLastNameQuery) -> V1UserGrantQuery {
    self.last_name_query = Some(last_name_query);
    self
  }

  pub fn last_name_query(&self) -> Option<&models::V1UserGrantLastNameQuery> {
    self.last_name_query.as_ref()
  }

  pub fn reset_last_name_query(&mut self) {
    self.last_name_query = None;
  }

  pub fn set_email_query(&mut self, email_query: models::V1UserGrantEmailQuery) {
    self.email_query = Some(email_query);
  }

  pub fn with_email_query(mut self, email_query: models::V1UserGrantEmailQuery) -> V1UserGrantQuery {
    self.email_query = Some(email_query);
    self
  }

  pub fn email_query(&self) -> Option<&models::V1UserGrantEmailQuery> {
    self.email_query.as_ref()
  }

  pub fn reset_email_query(&mut self) {
    self.email_query = None;
  }

  pub fn set_org_name_query(&mut self, org_name_query: models::V1UserGrantOrgNameQuery) {
    self.org_name_query = Some(org_name_query);
  }

  pub fn with_org_name_query(mut self, org_name_query: models::V1UserGrantOrgNameQuery) -> V1UserGrantQuery {
    self.org_name_query = Some(org_name_query);
    self
  }

  pub fn org_name_query(&self) -> Option<&models::V1UserGrantOrgNameQuery> {
    self.org_name_query.as_ref()
  }

  pub fn reset_org_name_query(&mut self) {
    self.org_name_query = None;
  }

  pub fn set_org_domain_query(&mut self, org_domain_query: models::V1UserGrantOrgDomainQuery) {
    self.org_domain_query = Some(org_domain_query);
  }

  pub fn with_org_domain_query(mut self, org_domain_query: models::V1UserGrantOrgDomainQuery) -> V1UserGrantQuery {
    self.org_domain_query = Some(org_domain_query);
    self
  }

  pub fn org_domain_query(&self) -> Option<&models::V1UserGrantOrgDomainQuery> {
    self.org_domain_query.as_ref()
  }

  pub fn reset_org_domain_query(&mut self) {
    self.org_domain_query = None;
  }

  pub fn set_project_name_query(&mut self, project_name_query: models::V1UserGrantProjectNameQuery) {
    self.project_name_query = Some(project_name_query);
  }

  pub fn with_project_name_query(mut self, project_name_query: models::V1UserGrantProjectNameQuery) -> V1UserGrantQuery {
    self.project_name_query = Some(project_name_query);
    self
  }

  pub fn project_name_query(&self) -> Option<&models::V1UserGrantProjectNameQuery> {
    self.project_name_query.as_ref()
  }

  pub fn reset_project_name_query(&mut self) {
    self.project_name_query = None;
  }

  pub fn set_display_name_query(&mut self, display_name_query: models::V1UserGrantDisplayNameQuery) {
    self.display_name_query = Some(display_name_query);
  }

  pub fn with_display_name_query(mut self, display_name_query: models::V1UserGrantDisplayNameQuery) -> V1UserGrantQuery {
    self.display_name_query = Some(display_name_query);
    self
  }

  pub fn display_name_query(&self) -> Option<&models::V1UserGrantDisplayNameQuery> {
    self.display_name_query.as_ref()
  }

  pub fn reset_display_name_query(&mut self) {
    self.display_name_query = None;
  }

  pub fn set_user_type_query(&mut self, user_type_query: models::V1UserGrantUserTypeQuery) {
    self.user_type_query = Some(user_type_query);
  }

  pub fn with_user_type_query(mut self, user_type_query: models::V1UserGrantUserTypeQuery) -> V1UserGrantQuery {
    self.user_type_query = Some(user_type_query);
    self
  }

  pub fn user_type_query(&self) -> Option<&models::V1UserGrantUserTypeQuery> {
    self.user_type_query.as_ref()
  }

  pub fn reset_user_type_query(&mut self) {
    self.user_type_query = None;
  }

}



