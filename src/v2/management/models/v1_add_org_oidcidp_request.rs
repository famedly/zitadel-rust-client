// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1AddOrgOidcidpRequest {
	#[serde(rename = "name")]
	name: String,
	/// some identity providers specify the styling of the button to their login
	#[serde(rename = "stylingType")]
	styling_type: Option<models::V1IdpStylingType>,
	/// client id generated by the identity provider
	#[serde(rename = "clientId")]
	client_id: String,
	/// client secret generated by the identity provider
	#[serde(rename = "clientSecret")]
	client_secret: String,
	/// the OIDC issuer of the identity provider
	#[serde(rename = "issuer")]
	issuer: String,
	/// the scopes requested by ZITADEL during the request on the identity
	/// provider
	#[serde(rename = "scopes")]
	scopes: Option<Vec<String>>,
	/// definition which field is mapped to the display name of the user
	#[serde(rename = "displayNameMapping")]
	display_name_mapping: Option<models::V1OidcMappingField>,
	/// definition which field is mapped to the email of the user
	#[serde(rename = "usernameMapping")]
	username_mapping: Option<models::V1OidcMappingField>,
	#[serde(rename = "autoRegister")]
	auto_register: Option<bool>,
}

impl V1AddOrgOidcidpRequest {
	pub fn new(
		name: String,
		client_id: String,
		client_secret: String,
		issuer: String,
	) -> V1AddOrgOidcidpRequest {
		V1AddOrgOidcidpRequest {
			name: name,
			styling_type: None,
			client_id: client_id,
			client_secret: client_secret,
			issuer: issuer,
			scopes: None,
			display_name_mapping: None,
			username_mapping: None,
			auto_register: None,
		}
	}

	pub fn set_name(&mut self, name: String) {
		self.name = name;
	}

	pub fn with_name(mut self, name: String) -> V1AddOrgOidcidpRequest {
		self.name = name;
		self
	}

	pub fn name(&self) -> &String {
		&self.name
	}

	pub fn set_styling_type(&mut self, styling_type: models::V1IdpStylingType) {
		self.styling_type = Some(styling_type);
	}

	pub fn with_styling_type(
		mut self,
		styling_type: models::V1IdpStylingType,
	) -> V1AddOrgOidcidpRequest {
		self.styling_type = Some(styling_type);
		self
	}

	pub fn styling_type(&self) -> Option<&models::V1IdpStylingType> {
		self.styling_type.as_ref()
	}

	pub fn reset_styling_type(&mut self) {
		self.styling_type = None;
	}

	pub fn set_client_id(&mut self, client_id: String) {
		self.client_id = client_id;
	}

	pub fn with_client_id(mut self, client_id: String) -> V1AddOrgOidcidpRequest {
		self.client_id = client_id;
		self
	}

	pub fn client_id(&self) -> &String {
		&self.client_id
	}

	pub fn set_client_secret(&mut self, client_secret: String) {
		self.client_secret = client_secret;
	}

	pub fn with_client_secret(mut self, client_secret: String) -> V1AddOrgOidcidpRequest {
		self.client_secret = client_secret;
		self
	}

	pub fn client_secret(&self) -> &String {
		&self.client_secret
	}

	pub fn set_issuer(&mut self, issuer: String) {
		self.issuer = issuer;
	}

	pub fn with_issuer(mut self, issuer: String) -> V1AddOrgOidcidpRequest {
		self.issuer = issuer;
		self
	}

	pub fn issuer(&self) -> &String {
		&self.issuer
	}

	pub fn set_scopes(&mut self, scopes: Vec<String>) {
		self.scopes = Some(scopes);
	}

	pub fn with_scopes(mut self, scopes: Vec<String>) -> V1AddOrgOidcidpRequest {
		self.scopes = Some(scopes);
		self
	}

	pub fn scopes(&self) -> Option<&Vec<String>> {
		self.scopes.as_ref()
	}

	pub fn reset_scopes(&mut self) {
		self.scopes = None;
	}

	pub fn set_display_name_mapping(&mut self, display_name_mapping: models::V1OidcMappingField) {
		self.display_name_mapping = Some(display_name_mapping);
	}

	pub fn with_display_name_mapping(
		mut self,
		display_name_mapping: models::V1OidcMappingField,
	) -> V1AddOrgOidcidpRequest {
		self.display_name_mapping = Some(display_name_mapping);
		self
	}

	pub fn display_name_mapping(&self) -> Option<&models::V1OidcMappingField> {
		self.display_name_mapping.as_ref()
	}

	pub fn reset_display_name_mapping(&mut self) {
		self.display_name_mapping = None;
	}

	pub fn set_username_mapping(&mut self, username_mapping: models::V1OidcMappingField) {
		self.username_mapping = Some(username_mapping);
	}

	pub fn with_username_mapping(
		mut self,
		username_mapping: models::V1OidcMappingField,
	) -> V1AddOrgOidcidpRequest {
		self.username_mapping = Some(username_mapping);
		self
	}

	pub fn username_mapping(&self) -> Option<&models::V1OidcMappingField> {
		self.username_mapping.as_ref()
	}

	pub fn reset_username_mapping(&mut self) {
		self.username_mapping = None;
	}

	pub fn set_auto_register(&mut self, auto_register: bool) {
		self.auto_register = Some(auto_register);
	}

	pub fn with_auto_register(mut self, auto_register: bool) -> V1AddOrgOidcidpRequest {
		self.auto_register = Some(auto_register);
		self
	}

	pub fn auto_register(&self) -> Option<&bool> {
		self.auto_register.as_ref()
	}

	pub fn reset_auto_register(&mut self) {
		self.auto_register = None;
	}
}
