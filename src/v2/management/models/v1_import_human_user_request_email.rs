/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1ImportHumanUserRequestEmail {
  /// Object that contains the email address and a verified flag.
  #[serde(rename = "email")]
  email: String,
  /// If email verified is set to true, the email will be added as verified and the user doesn't have to verify.
  #[serde(rename = "isEmailVerified")]
  is_email_verified: Option<bool>
}

impl V1ImportHumanUserRequestEmail {
  pub fn new(email: String) -> V1ImportHumanUserRequestEmail {
    V1ImportHumanUserRequestEmail {
      email: email,
      is_email_verified: None
    }
  }

  pub fn set_email(&mut self, email: String) {
    self.email = email;
  }

  pub fn with_email(mut self, email: String) -> V1ImportHumanUserRequestEmail {
    self.email = email;
    self
  }

  pub fn email(&self) -> &String {
    &self.email
  }


  pub fn set_is_email_verified(&mut self, is_email_verified: bool) {
    self.is_email_verified = Some(is_email_verified);
  }

  pub fn with_is_email_verified(mut self, is_email_verified: bool) -> V1ImportHumanUserRequestEmail {
    self.is_email_verified = Some(is_email_verified);
    self
  }

  pub fn is_email_verified(&self) -> Option<&bool> {
    self.is_email_verified.as_ref()
  }

  pub fn reset_is_email_verified(&mut self) {
    self.is_email_verified = None;
  }

}



