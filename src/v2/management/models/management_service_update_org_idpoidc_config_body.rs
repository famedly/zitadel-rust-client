/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct ManagementServiceUpdateOrgIdpoidcConfigBody {
  /// client id generated by the identity provider
  #[serde(rename = "clientId")]
  client_id: String,
  /// client secret generated by the identity provider. If empty the secret is not overwritten
  #[serde(rename = "clientSecret")]
  client_secret: Option<String>,
  /// the OIDC issuer of the identity provider
  #[serde(rename = "issuer")]
  issuer: String,
  /// the scopes requested by ZITADEL during the request on the identity provider
  #[serde(rename = "scopes")]
  scopes: Option<Vec<String>>,
  /// definition which field is mapped to the display name of the user
  #[serde(rename = "displayNameMapping")]
  display_name_mapping: Option<models::V1OidcMappingField>,
  /// definition which field is mapped to the email of the user
  #[serde(rename = "usernameMapping")]
  username_mapping: Option<models::V1OidcMappingField>
}

impl ManagementServiceUpdateOrgIdpoidcConfigBody {
  pub fn new(client_id: String, issuer: String) -> ManagementServiceUpdateOrgIdpoidcConfigBody {
    ManagementServiceUpdateOrgIdpoidcConfigBody {
      client_id: client_id,
      client_secret: None,
      issuer: issuer,
      scopes: None,
      display_name_mapping: None,
      username_mapping: None
    }
  }

  pub fn set_client_id(&mut self, client_id: String) {
    self.client_id = client_id;
  }

  pub fn with_client_id(mut self, client_id: String) -> ManagementServiceUpdateOrgIdpoidcConfigBody {
    self.client_id = client_id;
    self
  }

  pub fn client_id(&self) -> &String {
    &self.client_id
  }


  pub fn set_client_secret(&mut self, client_secret: String) {
    self.client_secret = Some(client_secret);
  }

  pub fn with_client_secret(mut self, client_secret: String) -> ManagementServiceUpdateOrgIdpoidcConfigBody {
    self.client_secret = Some(client_secret);
    self
  }

  pub fn client_secret(&self) -> Option<&String> {
    self.client_secret.as_ref()
  }

  pub fn reset_client_secret(&mut self) {
    self.client_secret = None;
  }

  pub fn set_issuer(&mut self, issuer: String) {
    self.issuer = issuer;
  }

  pub fn with_issuer(mut self, issuer: String) -> ManagementServiceUpdateOrgIdpoidcConfigBody {
    self.issuer = issuer;
    self
  }

  pub fn issuer(&self) -> &String {
    &self.issuer
  }


  pub fn set_scopes(&mut self, scopes: Vec<String>) {
    self.scopes = Some(scopes);
  }

  pub fn with_scopes(mut self, scopes: Vec<String>) -> ManagementServiceUpdateOrgIdpoidcConfigBody {
    self.scopes = Some(scopes);
    self
  }

  pub fn scopes(&self) -> Option<&Vec<String>> {
    self.scopes.as_ref()
  }

  pub fn reset_scopes(&mut self) {
    self.scopes = None;
  }

  pub fn set_display_name_mapping(&mut self, display_name_mapping: models::V1OidcMappingField) {
    self.display_name_mapping = Some(display_name_mapping);
  }

  pub fn with_display_name_mapping(mut self, display_name_mapping: models::V1OidcMappingField) -> ManagementServiceUpdateOrgIdpoidcConfigBody {
    self.display_name_mapping = Some(display_name_mapping);
    self
  }

  pub fn display_name_mapping(&self) -> Option<&models::V1OidcMappingField> {
    self.display_name_mapping.as_ref()
  }

  pub fn reset_display_name_mapping(&mut self) {
    self.display_name_mapping = None;
  }

  pub fn set_username_mapping(&mut self, username_mapping: models::V1OidcMappingField) {
    self.username_mapping = Some(username_mapping);
  }

  pub fn with_username_mapping(mut self, username_mapping: models::V1OidcMappingField) -> ManagementServiceUpdateOrgIdpoidcConfigBody {
    self.username_mapping = Some(username_mapping);
    self
  }

  pub fn username_mapping(&self) -> Option<&models::V1OidcMappingField> {
    self.username_mapping.as_ref()
  }

  pub fn reset_username_mapping(&mut self) {
    self.username_mapping = None;
  }

}



