/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1ExternalRegistrationUserOverviewScreenText {
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "emailLabel")]
  email_label: Option<String>,
  #[serde(rename = "usernameLabel")]
  username_label: Option<String>,
  #[serde(rename = "firstnameLabel")]
  firstname_label: Option<String>,
  #[serde(rename = "lastnameLabel")]
  lastname_label: Option<String>,
  #[serde(rename = "nicknameLabel")]
  nickname_label: Option<String>,
  #[serde(rename = "languageLabel")]
  language_label: Option<String>,
  #[serde(rename = "phoneLabel")]
  phone_label: Option<String>,
  #[serde(rename = "tosAndPrivacyLabel")]
  tos_and_privacy_label: Option<String>,
  #[serde(rename = "tosConfirm")]
  tos_confirm: Option<String>,
  #[serde(rename = "tosLinkText")]
  tos_link_text: Option<String>,
  #[serde(rename = "privacyLinkText")]
  privacy_link_text: Option<String>,
  #[serde(rename = "backButtonText")]
  back_button_text: Option<String>,
  #[serde(rename = "nextButtonText")]
  next_button_text: Option<String>,
  #[serde(rename = "privacyConfirm")]
  privacy_confirm: Option<String>
}

impl V1ExternalRegistrationUserOverviewScreenText {
  pub fn new() -> V1ExternalRegistrationUserOverviewScreenText {
    V1ExternalRegistrationUserOverviewScreenText {
      title: None,
      description: None,
      email_label: None,
      username_label: None,
      firstname_label: None,
      lastname_label: None,
      nickname_label: None,
      language_label: None,
      phone_label: None,
      tos_and_privacy_label: None,
      tos_confirm: None,
      tos_link_text: None,
      privacy_link_text: None,
      back_button_text: None,
      next_button_text: None,
      privacy_confirm: None
    }
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> V1ExternalRegistrationUserOverviewScreenText {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> V1ExternalRegistrationUserOverviewScreenText {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_email_label(&mut self, email_label: String) {
    self.email_label = Some(email_label);
  }

  pub fn with_email_label(mut self, email_label: String) -> V1ExternalRegistrationUserOverviewScreenText {
    self.email_label = Some(email_label);
    self
  }

  pub fn email_label(&self) -> Option<&String> {
    self.email_label.as_ref()
  }

  pub fn reset_email_label(&mut self) {
    self.email_label = None;
  }

  pub fn set_username_label(&mut self, username_label: String) {
    self.username_label = Some(username_label);
  }

  pub fn with_username_label(mut self, username_label: String) -> V1ExternalRegistrationUserOverviewScreenText {
    self.username_label = Some(username_label);
    self
  }

  pub fn username_label(&self) -> Option<&String> {
    self.username_label.as_ref()
  }

  pub fn reset_username_label(&mut self) {
    self.username_label = None;
  }

  pub fn set_firstname_label(&mut self, firstname_label: String) {
    self.firstname_label = Some(firstname_label);
  }

  pub fn with_firstname_label(mut self, firstname_label: String) -> V1ExternalRegistrationUserOverviewScreenText {
    self.firstname_label = Some(firstname_label);
    self
  }

  pub fn firstname_label(&self) -> Option<&String> {
    self.firstname_label.as_ref()
  }

  pub fn reset_firstname_label(&mut self) {
    self.firstname_label = None;
  }

  pub fn set_lastname_label(&mut self, lastname_label: String) {
    self.lastname_label = Some(lastname_label);
  }

  pub fn with_lastname_label(mut self, lastname_label: String) -> V1ExternalRegistrationUserOverviewScreenText {
    self.lastname_label = Some(lastname_label);
    self
  }

  pub fn lastname_label(&self) -> Option<&String> {
    self.lastname_label.as_ref()
  }

  pub fn reset_lastname_label(&mut self) {
    self.lastname_label = None;
  }

  pub fn set_nickname_label(&mut self, nickname_label: String) {
    self.nickname_label = Some(nickname_label);
  }

  pub fn with_nickname_label(mut self, nickname_label: String) -> V1ExternalRegistrationUserOverviewScreenText {
    self.nickname_label = Some(nickname_label);
    self
  }

  pub fn nickname_label(&self) -> Option<&String> {
    self.nickname_label.as_ref()
  }

  pub fn reset_nickname_label(&mut self) {
    self.nickname_label = None;
  }

  pub fn set_language_label(&mut self, language_label: String) {
    self.language_label = Some(language_label);
  }

  pub fn with_language_label(mut self, language_label: String) -> V1ExternalRegistrationUserOverviewScreenText {
    self.language_label = Some(language_label);
    self
  }

  pub fn language_label(&self) -> Option<&String> {
    self.language_label.as_ref()
  }

  pub fn reset_language_label(&mut self) {
    self.language_label = None;
  }

  pub fn set_phone_label(&mut self, phone_label: String) {
    self.phone_label = Some(phone_label);
  }

  pub fn with_phone_label(mut self, phone_label: String) -> V1ExternalRegistrationUserOverviewScreenText {
    self.phone_label = Some(phone_label);
    self
  }

  pub fn phone_label(&self) -> Option<&String> {
    self.phone_label.as_ref()
  }

  pub fn reset_phone_label(&mut self) {
    self.phone_label = None;
  }

  pub fn set_tos_and_privacy_label(&mut self, tos_and_privacy_label: String) {
    self.tos_and_privacy_label = Some(tos_and_privacy_label);
  }

  pub fn with_tos_and_privacy_label(mut self, tos_and_privacy_label: String) -> V1ExternalRegistrationUserOverviewScreenText {
    self.tos_and_privacy_label = Some(tos_and_privacy_label);
    self
  }

  pub fn tos_and_privacy_label(&self) -> Option<&String> {
    self.tos_and_privacy_label.as_ref()
  }

  pub fn reset_tos_and_privacy_label(&mut self) {
    self.tos_and_privacy_label = None;
  }

  pub fn set_tos_confirm(&mut self, tos_confirm: String) {
    self.tos_confirm = Some(tos_confirm);
  }

  pub fn with_tos_confirm(mut self, tos_confirm: String) -> V1ExternalRegistrationUserOverviewScreenText {
    self.tos_confirm = Some(tos_confirm);
    self
  }

  pub fn tos_confirm(&self) -> Option<&String> {
    self.tos_confirm.as_ref()
  }

  pub fn reset_tos_confirm(&mut self) {
    self.tos_confirm = None;
  }

  pub fn set_tos_link_text(&mut self, tos_link_text: String) {
    self.tos_link_text = Some(tos_link_text);
  }

  pub fn with_tos_link_text(mut self, tos_link_text: String) -> V1ExternalRegistrationUserOverviewScreenText {
    self.tos_link_text = Some(tos_link_text);
    self
  }

  pub fn tos_link_text(&self) -> Option<&String> {
    self.tos_link_text.as_ref()
  }

  pub fn reset_tos_link_text(&mut self) {
    self.tos_link_text = None;
  }

  pub fn set_privacy_link_text(&mut self, privacy_link_text: String) {
    self.privacy_link_text = Some(privacy_link_text);
  }

  pub fn with_privacy_link_text(mut self, privacy_link_text: String) -> V1ExternalRegistrationUserOverviewScreenText {
    self.privacy_link_text = Some(privacy_link_text);
    self
  }

  pub fn privacy_link_text(&self) -> Option<&String> {
    self.privacy_link_text.as_ref()
  }

  pub fn reset_privacy_link_text(&mut self) {
    self.privacy_link_text = None;
  }

  pub fn set_back_button_text(&mut self, back_button_text: String) {
    self.back_button_text = Some(back_button_text);
  }

  pub fn with_back_button_text(mut self, back_button_text: String) -> V1ExternalRegistrationUserOverviewScreenText {
    self.back_button_text = Some(back_button_text);
    self
  }

  pub fn back_button_text(&self) -> Option<&String> {
    self.back_button_text.as_ref()
  }

  pub fn reset_back_button_text(&mut self) {
    self.back_button_text = None;
  }

  pub fn set_next_button_text(&mut self, next_button_text: String) {
    self.next_button_text = Some(next_button_text);
  }

  pub fn with_next_button_text(mut self, next_button_text: String) -> V1ExternalRegistrationUserOverviewScreenText {
    self.next_button_text = Some(next_button_text);
    self
  }

  pub fn next_button_text(&self) -> Option<&String> {
    self.next_button_text.as_ref()
  }

  pub fn reset_next_button_text(&mut self) {
    self.next_button_text = None;
  }

  pub fn set_privacy_confirm(&mut self, privacy_confirm: String) {
    self.privacy_confirm = Some(privacy_confirm);
  }

  pub fn with_privacy_confirm(mut self, privacy_confirm: String) -> V1ExternalRegistrationUserOverviewScreenText {
    self.privacy_confirm = Some(privacy_confirm);
    self
  }

  pub fn privacy_confirm(&self) -> Option<&String> {
    self.privacy_confirm.as_ref()
  }

  pub fn reset_privacy_confirm(&mut self) {
    self.privacy_confirm = None;
  }

}



