/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct ManagementServiceUpdateOrgIdpBody {
	#[serde(rename = "name")]
	name: String,
	/// some identity providers specify the styling of the button to their login
	#[serde(rename = "stylingType")]
	styling_type: Option<models::V1IdpStylingType>,
	#[serde(rename = "autoRegister")]
	auto_register: Option<bool>,
}

impl ManagementServiceUpdateOrgIdpBody {
	pub fn new(name: String) -> ManagementServiceUpdateOrgIdpBody {
		ManagementServiceUpdateOrgIdpBody { name: name, styling_type: None, auto_register: None }
	}

	pub fn set_name(&mut self, name: String) {
		self.name = name;
	}

	pub fn with_name(mut self, name: String) -> ManagementServiceUpdateOrgIdpBody {
		self.name = name;
		self
	}

	pub fn name(&self) -> &String {
		&self.name
	}

	pub fn set_styling_type(&mut self, styling_type: models::V1IdpStylingType) {
		self.styling_type = Some(styling_type);
	}

	pub fn with_styling_type(
		mut self,
		styling_type: models::V1IdpStylingType,
	) -> ManagementServiceUpdateOrgIdpBody {
		self.styling_type = Some(styling_type);
		self
	}

	pub fn styling_type(&self) -> Option<&models::V1IdpStylingType> {
		self.styling_type.as_ref()
	}

	pub fn reset_styling_type(&mut self) {
		self.styling_type = None;
	}

	pub fn set_auto_register(&mut self, auto_register: bool) {
		self.auto_register = Some(auto_register);
	}

	pub fn with_auto_register(mut self, auto_register: bool) -> ManagementServiceUpdateOrgIdpBody {
		self.auto_register = Some(auto_register);
		self
	}

	pub fn auto_register(&self) -> Option<&bool> {
		self.auto_register.as_ref()
	}

	pub fn reset_auto_register(&mut self) {
		self.auto_register = None;
	}
}
