/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1AddPasswordlessRegistrationResponse {
  #[serde(rename = "details")]
  details: Option<models::V1ObjectDetails>,
  #[serde(rename = "link")]
  link: Option<String>,
  #[serde(rename = "expiration")]
  expiration: Option<String>
}

impl V1AddPasswordlessRegistrationResponse {
  pub fn new() -> V1AddPasswordlessRegistrationResponse {
    V1AddPasswordlessRegistrationResponse {
      details: None,
      link: None,
      expiration: None
    }
  }

  pub fn set_details(&mut self, details: models::V1ObjectDetails) {
    self.details = Some(details);
  }

  pub fn with_details(mut self, details: models::V1ObjectDetails) -> V1AddPasswordlessRegistrationResponse {
    self.details = Some(details);
    self
  }

  pub fn details(&self) -> Option<&models::V1ObjectDetails> {
    self.details.as_ref()
  }

  pub fn reset_details(&mut self) {
    self.details = None;
  }

  pub fn set_link(&mut self, link: String) {
    self.link = Some(link);
  }

  pub fn with_link(mut self, link: String) -> V1AddPasswordlessRegistrationResponse {
    self.link = Some(link);
    self
  }

  pub fn link(&self) -> Option<&String> {
    self.link.as_ref()
  }

  pub fn reset_link(&mut self) {
    self.link = None;
  }

  pub fn set_expiration(&mut self, expiration: String) {
    self.expiration = Some(expiration);
  }

  pub fn with_expiration(mut self, expiration: String) -> V1AddPasswordlessRegistrationResponse {
    self.expiration = Some(expiration);
    self
  }

  pub fn expiration(&self) -> Option<&String> {
    self.expiration.as_ref()
  }

  pub fn reset_expiration(&mut self) {
    self.expiration = None;
  }

}



