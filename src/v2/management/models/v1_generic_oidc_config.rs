/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1GenericOidcConfig {
  /// the OIDC issuer of the identity provider
  #[serde(rename = "issuer")]
  issuer: Option<String>,
  /// client id generated by the identity provider
  #[serde(rename = "clientId")]
  client_id: Option<String>,
  /// the scopes requested by ZITADEL during the request on the identity provider
  #[serde(rename = "scopes")]
  scopes: Option<Vec<String>>,
  /// if true, provider information get mapped from the id token, not from the userinfo endpoint
  #[serde(rename = "isIdTokenMapping")]
  is_id_token_mapping: Option<bool>
}

impl V1GenericOidcConfig {
  pub fn new() -> V1GenericOidcConfig {
    V1GenericOidcConfig {
      issuer: None,
      client_id: None,
      scopes: None,
      is_id_token_mapping: None
    }
  }

  pub fn set_issuer(&mut self, issuer: String) {
    self.issuer = Some(issuer);
  }

  pub fn with_issuer(mut self, issuer: String) -> V1GenericOidcConfig {
    self.issuer = Some(issuer);
    self
  }

  pub fn issuer(&self) -> Option<&String> {
    self.issuer.as_ref()
  }

  pub fn reset_issuer(&mut self) {
    self.issuer = None;
  }

  pub fn set_client_id(&mut self, client_id: String) {
    self.client_id = Some(client_id);
  }

  pub fn with_client_id(mut self, client_id: String) -> V1GenericOidcConfig {
    self.client_id = Some(client_id);
    self
  }

  pub fn client_id(&self) -> Option<&String> {
    self.client_id.as_ref()
  }

  pub fn reset_client_id(&mut self) {
    self.client_id = None;
  }

  pub fn set_scopes(&mut self, scopes: Vec<String>) {
    self.scopes = Some(scopes);
  }

  pub fn with_scopes(mut self, scopes: Vec<String>) -> V1GenericOidcConfig {
    self.scopes = Some(scopes);
    self
  }

  pub fn scopes(&self) -> Option<&Vec<String>> {
    self.scopes.as_ref()
  }

  pub fn reset_scopes(&mut self) {
    self.scopes = None;
  }

  pub fn set_is_id_token_mapping(&mut self, is_id_token_mapping: bool) {
    self.is_id_token_mapping = Some(is_id_token_mapping);
  }

  pub fn with_is_id_token_mapping(mut self, is_id_token_mapping: bool) -> V1GenericOidcConfig {
    self.is_id_token_mapping = Some(is_id_token_mapping);
    self
  }

  pub fn is_id_token_mapping(&self) -> Option<&bool> {
    self.is_id_token_mapping.as_ref()
  }

  pub fn reset_is_id_token_mapping(&mut self) {
    self.is_id_token_mapping = None;
  }

}



