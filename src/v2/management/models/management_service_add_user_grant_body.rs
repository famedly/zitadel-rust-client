/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct ManagementServiceAddUserGrantBody {
  #[serde(rename = "projectId")]
  project_id: String,
  /// Make sure to fill in the project grant id if the user grant is for a granted project and the organization is not the owner of the project.
  #[serde(rename = "projectGrantId")]
  project_grant_id: Option<String>,
  #[serde(rename = "roleKeys")]
  role_keys: Option<Vec<String>>
}

impl ManagementServiceAddUserGrantBody {
  pub fn new(project_id: String) -> ManagementServiceAddUserGrantBody {
    ManagementServiceAddUserGrantBody {
      project_id: project_id,
      project_grant_id: None,
      role_keys: None
    }
  }

  pub fn set_project_id(&mut self, project_id: String) {
    self.project_id = project_id;
  }

  pub fn with_project_id(mut self, project_id: String) -> ManagementServiceAddUserGrantBody {
    self.project_id = project_id;
    self
  }

  pub fn project_id(&self) -> &String {
    &self.project_id
  }


  pub fn set_project_grant_id(&mut self, project_grant_id: String) {
    self.project_grant_id = Some(project_grant_id);
  }

  pub fn with_project_grant_id(mut self, project_grant_id: String) -> ManagementServiceAddUserGrantBody {
    self.project_grant_id = Some(project_grant_id);
    self
  }

  pub fn project_grant_id(&self) -> Option<&String> {
    self.project_grant_id.as_ref()
  }

  pub fn reset_project_grant_id(&mut self) {
    self.project_grant_id = None;
  }

  pub fn set_role_keys(&mut self, role_keys: Vec<String>) {
    self.role_keys = Some(role_keys);
  }

  pub fn with_role_keys(mut self, role_keys: Vec<String>) -> ManagementServiceAddUserGrantBody {
    self.role_keys = Some(role_keys);
    self
  }

  pub fn role_keys(&self) -> Option<&Vec<String>> {
    self.role_keys.as_ref()
  }

  pub fn reset_role_keys(&mut self) {
    self.role_keys = None;
  }

}



