/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct ImportHumanUserResponsePasswordlessRegistration {
	#[serde(rename = "link")]
	link: Option<String>,
	#[serde(rename = "lifetime")]
	lifetime: Option<String>,
	#[serde(rename = "expiration")]
	expiration: Option<String>,
}

impl ImportHumanUserResponsePasswordlessRegistration {
	pub fn new() -> ImportHumanUserResponsePasswordlessRegistration {
		ImportHumanUserResponsePasswordlessRegistration {
			link: None,
			lifetime: None,
			expiration: None,
		}
	}

	pub fn set_link(&mut self, link: String) {
		self.link = Some(link);
	}

	pub fn with_link(mut self, link: String) -> ImportHumanUserResponsePasswordlessRegistration {
		self.link = Some(link);
		self
	}

	pub fn link(&self) -> Option<&String> {
		self.link.as_ref()
	}

	pub fn reset_link(&mut self) {
		self.link = None;
	}

	pub fn set_lifetime(&mut self, lifetime: String) {
		self.lifetime = Some(lifetime);
	}

	pub fn with_lifetime(
		mut self,
		lifetime: String,
	) -> ImportHumanUserResponsePasswordlessRegistration {
		self.lifetime = Some(lifetime);
		self
	}

	pub fn lifetime(&self) -> Option<&String> {
		self.lifetime.as_ref()
	}

	pub fn reset_lifetime(&mut self) {
		self.lifetime = None;
	}

	pub fn set_expiration(&mut self, expiration: String) {
		self.expiration = Some(expiration);
	}

	pub fn with_expiration(
		mut self,
		expiration: String,
	) -> ImportHumanUserResponsePasswordlessRegistration {
		self.expiration = Some(expiration);
		self
	}

	pub fn expiration(&self) -> Option<&String> {
		self.expiration.as_ref()
	}

	pub fn reset_expiration(&mut self) {
		self.expiration = None;
	}
}
