/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1ActionQuery {
  #[serde(rename = "actionIdQuery")]
  action_id_query: Option<models::V1ActionIdQuery>,
  #[serde(rename = "actionNameQuery")]
  action_name_query: Option<models::V1ActionNameQuery>,
  #[serde(rename = "actionStateQuery")]
  action_state_query: Option<models::V1ActionStateQuery>
}

impl V1ActionQuery {
  pub fn new() -> V1ActionQuery {
    V1ActionQuery {
      action_id_query: None,
      action_name_query: None,
      action_state_query: None
    }
  }

  pub fn set_action_id_query(&mut self, action_id_query: models::V1ActionIdQuery) {
    self.action_id_query = Some(action_id_query);
  }

  pub fn with_action_id_query(mut self, action_id_query: models::V1ActionIdQuery) -> V1ActionQuery {
    self.action_id_query = Some(action_id_query);
    self
  }

  pub fn action_id_query(&self) -> Option<&models::V1ActionIdQuery> {
    self.action_id_query.as_ref()
  }

  pub fn reset_action_id_query(&mut self) {
    self.action_id_query = None;
  }

  pub fn set_action_name_query(&mut self, action_name_query: models::V1ActionNameQuery) {
    self.action_name_query = Some(action_name_query);
  }

  pub fn with_action_name_query(mut self, action_name_query: models::V1ActionNameQuery) -> V1ActionQuery {
    self.action_name_query = Some(action_name_query);
    self
  }

  pub fn action_name_query(&self) -> Option<&models::V1ActionNameQuery> {
    self.action_name_query.as_ref()
  }

  pub fn reset_action_name_query(&mut self) {
    self.action_name_query = None;
  }

  pub fn set_action_state_query(&mut self, action_state_query: models::V1ActionStateQuery) {
    self.action_state_query = Some(action_state_query);
  }

  pub fn with_action_state_query(mut self, action_state_query: models::V1ActionStateQuery) -> V1ActionQuery {
    self.action_state_query = Some(action_state_query);
    self
  }

  pub fn action_state_query(&self) -> Option<&models::V1ActionStateQuery> {
    self.action_state_query.as_ref()
  }

  pub fn reset_action_state_query(&mut self) {
    self.action_state_query = None;
  }

}



