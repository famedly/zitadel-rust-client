/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1ProjectGrantQuery {
  #[serde(rename = "projectNameQuery")]
  project_name_query: Option<models::V1GrantProjectNameQuery>,
  #[serde(rename = "roleKeyQuery")]
  role_key_query: Option<models::V1GrantRoleKeyQuery>
}

impl V1ProjectGrantQuery {
  pub fn new() -> V1ProjectGrantQuery {
    V1ProjectGrantQuery {
      project_name_query: None,
      role_key_query: None
    }
  }

  pub fn set_project_name_query(&mut self, project_name_query: models::V1GrantProjectNameQuery) {
    self.project_name_query = Some(project_name_query);
  }

  pub fn with_project_name_query(mut self, project_name_query: models::V1GrantProjectNameQuery) -> V1ProjectGrantQuery {
    self.project_name_query = Some(project_name_query);
    self
  }

  pub fn project_name_query(&self) -> Option<&models::V1GrantProjectNameQuery> {
    self.project_name_query.as_ref()
  }

  pub fn reset_project_name_query(&mut self) {
    self.project_name_query = None;
  }

  pub fn set_role_key_query(&mut self, role_key_query: models::V1GrantRoleKeyQuery) {
    self.role_key_query = Some(role_key_query);
  }

  pub fn with_role_key_query(mut self, role_key_query: models::V1GrantRoleKeyQuery) -> V1ProjectGrantQuery {
    self.role_key_query = Some(role_key_query);
    self
  }

  pub fn role_key_query(&self) -> Option<&models::V1GrantRoleKeyQuery> {
    self.role_key_query.as_ref()
  }

  pub fn reset_role_key_query(&mut self) {
    self.role_key_query = None;
  }

}



