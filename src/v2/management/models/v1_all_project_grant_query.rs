/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1AllProjectGrantQuery {
	#[serde(rename = "projectNameQuery")]
	project_name_query: Option<models::V1GrantProjectNameQuery>,
	#[serde(rename = "roleKeyQuery")]
	role_key_query: Option<models::V1GrantRoleKeyQuery>,
	#[serde(rename = "projectIdQuery")]
	project_id_query: Option<models::V1ProjectIdQuery>,
	#[serde(rename = "grantedOrgIdQuery")]
	granted_org_id_query: Option<models::V1GrantedOrgIdQuery>,
}

impl V1AllProjectGrantQuery {
	pub fn new() -> V1AllProjectGrantQuery {
		V1AllProjectGrantQuery {
			project_name_query: None,
			role_key_query: None,
			project_id_query: None,
			granted_org_id_query: None,
		}
	}

	pub fn set_project_name_query(&mut self, project_name_query: models::V1GrantProjectNameQuery) {
		self.project_name_query = Some(project_name_query);
	}

	pub fn with_project_name_query(
		mut self,
		project_name_query: models::V1GrantProjectNameQuery,
	) -> V1AllProjectGrantQuery {
		self.project_name_query = Some(project_name_query);
		self
	}

	pub fn project_name_query(&self) -> Option<&models::V1GrantProjectNameQuery> {
		self.project_name_query.as_ref()
	}

	pub fn reset_project_name_query(&mut self) {
		self.project_name_query = None;
	}

	pub fn set_role_key_query(&mut self, role_key_query: models::V1GrantRoleKeyQuery) {
		self.role_key_query = Some(role_key_query);
	}

	pub fn with_role_key_query(
		mut self,
		role_key_query: models::V1GrantRoleKeyQuery,
	) -> V1AllProjectGrantQuery {
		self.role_key_query = Some(role_key_query);
		self
	}

	pub fn role_key_query(&self) -> Option<&models::V1GrantRoleKeyQuery> {
		self.role_key_query.as_ref()
	}

	pub fn reset_role_key_query(&mut self) {
		self.role_key_query = None;
	}

	pub fn set_project_id_query(&mut self, project_id_query: models::V1ProjectIdQuery) {
		self.project_id_query = Some(project_id_query);
	}

	pub fn with_project_id_query(
		mut self,
		project_id_query: models::V1ProjectIdQuery,
	) -> V1AllProjectGrantQuery {
		self.project_id_query = Some(project_id_query);
		self
	}

	pub fn project_id_query(&self) -> Option<&models::V1ProjectIdQuery> {
		self.project_id_query.as_ref()
	}

	pub fn reset_project_id_query(&mut self) {
		self.project_id_query = None;
	}

	pub fn set_granted_org_id_query(&mut self, granted_org_id_query: models::V1GrantedOrgIdQuery) {
		self.granted_org_id_query = Some(granted_org_id_query);
	}

	pub fn with_granted_org_id_query(
		mut self,
		granted_org_id_query: models::V1GrantedOrgIdQuery,
	) -> V1AllProjectGrantQuery {
		self.granted_org_id_query = Some(granted_org_id_query);
		self
	}

	pub fn granted_org_id_query(&self) -> Option<&models::V1GrantedOrgIdQuery> {
		self.granted_org_id_query.as_ref()
	}

	pub fn reset_granted_org_id_query(&mut self) {
		self.granted_org_id_query = None;
	}
}
