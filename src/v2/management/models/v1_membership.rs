// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1Membership {
	#[serde(rename = "userId")]
	user_id: Option<String>,
	#[serde(rename = "details")]
	details: Option<models::V1ObjectDetails>,
	#[serde(rename = "roles")]
	roles: Option<Vec<String>>,
	/// display name of the user
	#[serde(rename = "displayName")]
	display_name: Option<String>,
	/// one of type use iam, org id, project id or project grant id
	#[serde(rename = "iam")]
	iam: Option<bool>,
	/// one of type use iam, org id, project id or project grant id
	#[serde(rename = "orgId")]
	org_id: Option<String>,
	/// one of type use iam, org id, project id or project grant id
	#[serde(rename = "projectId")]
	project_id: Option<String>,
	/// one of type use iam, org id, project id or project grant id
	#[serde(rename = "projectGrantId")]
	project_grant_id: Option<String>,
}

impl V1Membership {
	pub fn new() -> V1Membership {
		V1Membership {
			user_id: None,
			details: None,
			roles: None,
			display_name: None,
			iam: None,
			org_id: None,
			project_id: None,
			project_grant_id: None,
		}
	}

	pub fn set_user_id(&mut self, user_id: String) {
		self.user_id = Some(user_id);
	}

	pub fn with_user_id(mut self, user_id: String) -> V1Membership {
		self.user_id = Some(user_id);
		self
	}

	pub fn user_id(&self) -> Option<&String> {
		self.user_id.as_ref()
	}

	pub fn reset_user_id(&mut self) {
		self.user_id = None;
	}

	pub fn set_details(&mut self, details: models::V1ObjectDetails) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::V1ObjectDetails) -> V1Membership {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V1ObjectDetails> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_roles(&mut self, roles: Vec<String>) {
		self.roles = Some(roles);
	}

	pub fn with_roles(mut self, roles: Vec<String>) -> V1Membership {
		self.roles = Some(roles);
		self
	}

	pub fn roles(&self) -> Option<&Vec<String>> {
		self.roles.as_ref()
	}

	pub fn reset_roles(&mut self) {
		self.roles = None;
	}

	pub fn set_display_name(&mut self, display_name: String) {
		self.display_name = Some(display_name);
	}

	pub fn with_display_name(mut self, display_name: String) -> V1Membership {
		self.display_name = Some(display_name);
		self
	}

	pub fn display_name(&self) -> Option<&String> {
		self.display_name.as_ref()
	}

	pub fn reset_display_name(&mut self) {
		self.display_name = None;
	}

	pub fn set_iam(&mut self, iam: bool) {
		self.iam = Some(iam);
	}

	pub fn with_iam(mut self, iam: bool) -> V1Membership {
		self.iam = Some(iam);
		self
	}

	pub fn iam(&self) -> Option<&bool> {
		self.iam.as_ref()
	}

	pub fn reset_iam(&mut self) {
		self.iam = None;
	}

	pub fn set_org_id(&mut self, org_id: String) {
		self.org_id = Some(org_id);
	}

	pub fn with_org_id(mut self, org_id: String) -> V1Membership {
		self.org_id = Some(org_id);
		self
	}

	pub fn org_id(&self) -> Option<&String> {
		self.org_id.as_ref()
	}

	pub fn reset_org_id(&mut self) {
		self.org_id = None;
	}

	pub fn set_project_id(&mut self, project_id: String) {
		self.project_id = Some(project_id);
	}

	pub fn with_project_id(mut self, project_id: String) -> V1Membership {
		self.project_id = Some(project_id);
		self
	}

	pub fn project_id(&self) -> Option<&String> {
		self.project_id.as_ref()
	}

	pub fn reset_project_id(&mut self) {
		self.project_id = None;
	}

	pub fn set_project_grant_id(&mut self, project_grant_id: String) {
		self.project_grant_id = Some(project_grant_id);
	}

	pub fn with_project_grant_id(mut self, project_grant_id: String) -> V1Membership {
		self.project_grant_id = Some(project_grant_id);
		self
	}

	pub fn project_grant_id(&self) -> Option<&String> {
		self.project_grant_id.as_ref()
	}

	pub fn reset_project_grant_id(&mut self) {
		self.project_grant_id = None;
	}
}
