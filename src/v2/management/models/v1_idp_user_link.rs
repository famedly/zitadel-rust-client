/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1IdpUserLink {
	/// the id of the user
	#[serde(rename = "userId")]
	user_id: Option<String>,
	/// the id of the identity provider
	#[serde(rename = "idpId")]
	idp_id: Option<String>,
	/// the name of the identity provider
	#[serde(rename = "idpName")]
	idp_name: Option<String>,
	/// the id of the user provided by the identity provider
	#[serde(rename = "providedUserId")]
	provided_user_id: Option<String>,
	/// the id of the identity provider
	#[serde(rename = "providedUserName")]
	provided_user_name: Option<String>,
	/// the authorization framework of the identity provider
	#[serde(rename = "idpType")]
	idp_type: Option<models::V1IdpType>,
}

impl V1IdpUserLink {
	pub fn new() -> V1IdpUserLink {
		V1IdpUserLink {
			user_id: None,
			idp_id: None,
			idp_name: None,
			provided_user_id: None,
			provided_user_name: None,
			idp_type: None,
		}
	}

	pub fn set_user_id(&mut self, user_id: String) {
		self.user_id = Some(user_id);
	}

	pub fn with_user_id(mut self, user_id: String) -> V1IdpUserLink {
		self.user_id = Some(user_id);
		self
	}

	pub fn user_id(&self) -> Option<&String> {
		self.user_id.as_ref()
	}

	pub fn reset_user_id(&mut self) {
		self.user_id = None;
	}

	pub fn set_idp_id(&mut self, idp_id: String) {
		self.idp_id = Some(idp_id);
	}

	pub fn with_idp_id(mut self, idp_id: String) -> V1IdpUserLink {
		self.idp_id = Some(idp_id);
		self
	}

	pub fn idp_id(&self) -> Option<&String> {
		self.idp_id.as_ref()
	}

	pub fn reset_idp_id(&mut self) {
		self.idp_id = None;
	}

	pub fn set_idp_name(&mut self, idp_name: String) {
		self.idp_name = Some(idp_name);
	}

	pub fn with_idp_name(mut self, idp_name: String) -> V1IdpUserLink {
		self.idp_name = Some(idp_name);
		self
	}

	pub fn idp_name(&self) -> Option<&String> {
		self.idp_name.as_ref()
	}

	pub fn reset_idp_name(&mut self) {
		self.idp_name = None;
	}

	pub fn set_provided_user_id(&mut self, provided_user_id: String) {
		self.provided_user_id = Some(provided_user_id);
	}

	pub fn with_provided_user_id(mut self, provided_user_id: String) -> V1IdpUserLink {
		self.provided_user_id = Some(provided_user_id);
		self
	}

	pub fn provided_user_id(&self) -> Option<&String> {
		self.provided_user_id.as_ref()
	}

	pub fn reset_provided_user_id(&mut self) {
		self.provided_user_id = None;
	}

	pub fn set_provided_user_name(&mut self, provided_user_name: String) {
		self.provided_user_name = Some(provided_user_name);
	}

	pub fn with_provided_user_name(mut self, provided_user_name: String) -> V1IdpUserLink {
		self.provided_user_name = Some(provided_user_name);
		self
	}

	pub fn provided_user_name(&self) -> Option<&String> {
		self.provided_user_name.as_ref()
	}

	pub fn reset_provided_user_name(&mut self) {
		self.provided_user_name = None;
	}

	pub fn set_idp_type(&mut self, idp_type: models::V1IdpType) {
		self.idp_type = Some(idp_type);
	}

	pub fn with_idp_type(mut self, idp_type: models::V1IdpType) -> V1IdpUserLink {
		self.idp_type = Some(idp_type);
		self
	}

	pub fn idp_type(&self) -> Option<&models::V1IdpType> {
		self.idp_type.as_ref()
	}

	pub fn reset_idp_type(&mut self) {
		self.idp_type = None;
	}
}
