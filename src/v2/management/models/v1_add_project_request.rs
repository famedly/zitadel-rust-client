/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1AddProjectRequest {
  #[serde(rename = "name")]
  name: String,
  /// Enable this setting to have role information included in the user info endpoint. It is also dependent on your application settings to include it in tokens and other types.
  #[serde(rename = "projectRoleAssertion")]
  project_role_assertion: Option<bool>,
  /// When enabled ZITADEL will check if a user has a role of this project assigned when login into an application of this project.
  #[serde(rename = "projectRoleCheck")]
  project_role_check: Option<bool>,
  /// When enabled ZITADEL will check if the organization of the user, that is trying to log in, has a grant to this project.
  #[serde(rename = "hasProjectCheck")]
  has_project_check: Option<bool>,
  /// Define which private labeling/branding should trigger when getting to a login of this project.
  #[serde(rename = "privateLabelingSetting")]
  private_labeling_setting: Option<models::V1PrivateLabelingSetting>
}

impl V1AddProjectRequest {
  pub fn new(name: String) -> V1AddProjectRequest {
    V1AddProjectRequest {
      name: name,
      project_role_assertion: None,
      project_role_check: None,
      has_project_check: None,
      private_labeling_setting: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> V1AddProjectRequest {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_project_role_assertion(&mut self, project_role_assertion: bool) {
    self.project_role_assertion = Some(project_role_assertion);
  }

  pub fn with_project_role_assertion(mut self, project_role_assertion: bool) -> V1AddProjectRequest {
    self.project_role_assertion = Some(project_role_assertion);
    self
  }

  pub fn project_role_assertion(&self) -> Option<&bool> {
    self.project_role_assertion.as_ref()
  }

  pub fn reset_project_role_assertion(&mut self) {
    self.project_role_assertion = None;
  }

  pub fn set_project_role_check(&mut self, project_role_check: bool) {
    self.project_role_check = Some(project_role_check);
  }

  pub fn with_project_role_check(mut self, project_role_check: bool) -> V1AddProjectRequest {
    self.project_role_check = Some(project_role_check);
    self
  }

  pub fn project_role_check(&self) -> Option<&bool> {
    self.project_role_check.as_ref()
  }

  pub fn reset_project_role_check(&mut self) {
    self.project_role_check = None;
  }

  pub fn set_has_project_check(&mut self, has_project_check: bool) {
    self.has_project_check = Some(has_project_check);
  }

  pub fn with_has_project_check(mut self, has_project_check: bool) -> V1AddProjectRequest {
    self.has_project_check = Some(has_project_check);
    self
  }

  pub fn has_project_check(&self) -> Option<&bool> {
    self.has_project_check.as_ref()
  }

  pub fn reset_has_project_check(&mut self) {
    self.has_project_check = None;
  }

  pub fn set_private_labeling_setting(&mut self, private_labeling_setting: models::V1PrivateLabelingSetting) {
    self.private_labeling_setting = Some(private_labeling_setting);
  }

  pub fn with_private_labeling_setting(mut self, private_labeling_setting: models::V1PrivateLabelingSetting) -> V1AddProjectRequest {
    self.private_labeling_setting = Some(private_labeling_setting);
    self
  }

  pub fn private_labeling_setting(&self) -> Option<&models::V1PrivateLabelingSetting> {
    self.private_labeling_setting.as_ref()
  }

  pub fn reset_private_labeling_setting(&mut self) {
    self.private_labeling_setting = None;
  }

}



