/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1SuccessLoginScreenText {
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "autoRedirectDescription")]
  auto_redirect_description: Option<String>,
  #[serde(rename = "redirectedDescription")]
  redirected_description: Option<String>,
  #[serde(rename = "nextButtonText")]
  next_button_text: Option<String>
}

impl V1SuccessLoginScreenText {
  pub fn new() -> V1SuccessLoginScreenText {
    V1SuccessLoginScreenText {
      title: None,
      auto_redirect_description: None,
      redirected_description: None,
      next_button_text: None
    }
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> V1SuccessLoginScreenText {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_auto_redirect_description(&mut self, auto_redirect_description: String) {
    self.auto_redirect_description = Some(auto_redirect_description);
  }

  pub fn with_auto_redirect_description(mut self, auto_redirect_description: String) -> V1SuccessLoginScreenText {
    self.auto_redirect_description = Some(auto_redirect_description);
    self
  }

  pub fn auto_redirect_description(&self) -> Option<&String> {
    self.auto_redirect_description.as_ref()
  }

  pub fn reset_auto_redirect_description(&mut self) {
    self.auto_redirect_description = None;
  }

  pub fn set_redirected_description(&mut self, redirected_description: String) {
    self.redirected_description = Some(redirected_description);
  }

  pub fn with_redirected_description(mut self, redirected_description: String) -> V1SuccessLoginScreenText {
    self.redirected_description = Some(redirected_description);
    self
  }

  pub fn redirected_description(&self) -> Option<&String> {
    self.redirected_description.as_ref()
  }

  pub fn reset_redirected_description(&mut self) {
    self.redirected_description = None;
  }

  pub fn set_next_button_text(&mut self, next_button_text: String) {
    self.next_button_text = Some(next_button_text);
  }

  pub fn with_next_button_text(mut self, next_button_text: String) -> V1SuccessLoginScreenText {
    self.next_button_text = Some(next_button_text);
    self
  }

  pub fn next_button_text(&self) -> Option<&String> {
    self.next_button_text.as_ref()
  }

  pub fn reset_next_button_text(&mut self) {
    self.next_button_text = None;
  }

}



