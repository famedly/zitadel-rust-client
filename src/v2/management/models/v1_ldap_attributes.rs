/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1LdapAttributes {
  #[serde(rename = "idAttribute")]
  id_attribute: Option<String>,
  #[serde(rename = "firstNameAttribute")]
  first_name_attribute: Option<String>,
  #[serde(rename = "lastNameAttribute")]
  last_name_attribute: Option<String>,
  #[serde(rename = "displayNameAttribute")]
  display_name_attribute: Option<String>,
  #[serde(rename = "nickNameAttribute")]
  nick_name_attribute: Option<String>,
  #[serde(rename = "preferredUsernameAttribute")]
  preferred_username_attribute: Option<String>,
  #[serde(rename = "emailAttribute")]
  email_attribute: Option<String>,
  #[serde(rename = "emailVerifiedAttribute")]
  email_verified_attribute: Option<String>,
  #[serde(rename = "phoneAttribute")]
  phone_attribute: Option<String>,
  #[serde(rename = "phoneVerifiedAttribute")]
  phone_verified_attribute: Option<String>,
  #[serde(rename = "preferredLanguageAttribute")]
  preferred_language_attribute: Option<String>,
  #[serde(rename = "avatarUrlAttribute")]
  avatar_url_attribute: Option<String>,
  #[serde(rename = "profileAttribute")]
  profile_attribute: Option<String>
}

impl V1LdapAttributes {
  pub fn new() -> V1LdapAttributes {
    V1LdapAttributes {
      id_attribute: None,
      first_name_attribute: None,
      last_name_attribute: None,
      display_name_attribute: None,
      nick_name_attribute: None,
      preferred_username_attribute: None,
      email_attribute: None,
      email_verified_attribute: None,
      phone_attribute: None,
      phone_verified_attribute: None,
      preferred_language_attribute: None,
      avatar_url_attribute: None,
      profile_attribute: None
    }
  }

  pub fn set_id_attribute(&mut self, id_attribute: String) {
    self.id_attribute = Some(id_attribute);
  }

  pub fn with_id_attribute(mut self, id_attribute: String) -> V1LdapAttributes {
    self.id_attribute = Some(id_attribute);
    self
  }

  pub fn id_attribute(&self) -> Option<&String> {
    self.id_attribute.as_ref()
  }

  pub fn reset_id_attribute(&mut self) {
    self.id_attribute = None;
  }

  pub fn set_first_name_attribute(&mut self, first_name_attribute: String) {
    self.first_name_attribute = Some(first_name_attribute);
  }

  pub fn with_first_name_attribute(mut self, first_name_attribute: String) -> V1LdapAttributes {
    self.first_name_attribute = Some(first_name_attribute);
    self
  }

  pub fn first_name_attribute(&self) -> Option<&String> {
    self.first_name_attribute.as_ref()
  }

  pub fn reset_first_name_attribute(&mut self) {
    self.first_name_attribute = None;
  }

  pub fn set_last_name_attribute(&mut self, last_name_attribute: String) {
    self.last_name_attribute = Some(last_name_attribute);
  }

  pub fn with_last_name_attribute(mut self, last_name_attribute: String) -> V1LdapAttributes {
    self.last_name_attribute = Some(last_name_attribute);
    self
  }

  pub fn last_name_attribute(&self) -> Option<&String> {
    self.last_name_attribute.as_ref()
  }

  pub fn reset_last_name_attribute(&mut self) {
    self.last_name_attribute = None;
  }

  pub fn set_display_name_attribute(&mut self, display_name_attribute: String) {
    self.display_name_attribute = Some(display_name_attribute);
  }

  pub fn with_display_name_attribute(mut self, display_name_attribute: String) -> V1LdapAttributes {
    self.display_name_attribute = Some(display_name_attribute);
    self
  }

  pub fn display_name_attribute(&self) -> Option<&String> {
    self.display_name_attribute.as_ref()
  }

  pub fn reset_display_name_attribute(&mut self) {
    self.display_name_attribute = None;
  }

  pub fn set_nick_name_attribute(&mut self, nick_name_attribute: String) {
    self.nick_name_attribute = Some(nick_name_attribute);
  }

  pub fn with_nick_name_attribute(mut self, nick_name_attribute: String) -> V1LdapAttributes {
    self.nick_name_attribute = Some(nick_name_attribute);
    self
  }

  pub fn nick_name_attribute(&self) -> Option<&String> {
    self.nick_name_attribute.as_ref()
  }

  pub fn reset_nick_name_attribute(&mut self) {
    self.nick_name_attribute = None;
  }

  pub fn set_preferred_username_attribute(&mut self, preferred_username_attribute: String) {
    self.preferred_username_attribute = Some(preferred_username_attribute);
  }

  pub fn with_preferred_username_attribute(mut self, preferred_username_attribute: String) -> V1LdapAttributes {
    self.preferred_username_attribute = Some(preferred_username_attribute);
    self
  }

  pub fn preferred_username_attribute(&self) -> Option<&String> {
    self.preferred_username_attribute.as_ref()
  }

  pub fn reset_preferred_username_attribute(&mut self) {
    self.preferred_username_attribute = None;
  }

  pub fn set_email_attribute(&mut self, email_attribute: String) {
    self.email_attribute = Some(email_attribute);
  }

  pub fn with_email_attribute(mut self, email_attribute: String) -> V1LdapAttributes {
    self.email_attribute = Some(email_attribute);
    self
  }

  pub fn email_attribute(&self) -> Option<&String> {
    self.email_attribute.as_ref()
  }

  pub fn reset_email_attribute(&mut self) {
    self.email_attribute = None;
  }

  pub fn set_email_verified_attribute(&mut self, email_verified_attribute: String) {
    self.email_verified_attribute = Some(email_verified_attribute);
  }

  pub fn with_email_verified_attribute(mut self, email_verified_attribute: String) -> V1LdapAttributes {
    self.email_verified_attribute = Some(email_verified_attribute);
    self
  }

  pub fn email_verified_attribute(&self) -> Option<&String> {
    self.email_verified_attribute.as_ref()
  }

  pub fn reset_email_verified_attribute(&mut self) {
    self.email_verified_attribute = None;
  }

  pub fn set_phone_attribute(&mut self, phone_attribute: String) {
    self.phone_attribute = Some(phone_attribute);
  }

  pub fn with_phone_attribute(mut self, phone_attribute: String) -> V1LdapAttributes {
    self.phone_attribute = Some(phone_attribute);
    self
  }

  pub fn phone_attribute(&self) -> Option<&String> {
    self.phone_attribute.as_ref()
  }

  pub fn reset_phone_attribute(&mut self) {
    self.phone_attribute = None;
  }

  pub fn set_phone_verified_attribute(&mut self, phone_verified_attribute: String) {
    self.phone_verified_attribute = Some(phone_verified_attribute);
  }

  pub fn with_phone_verified_attribute(mut self, phone_verified_attribute: String) -> V1LdapAttributes {
    self.phone_verified_attribute = Some(phone_verified_attribute);
    self
  }

  pub fn phone_verified_attribute(&self) -> Option<&String> {
    self.phone_verified_attribute.as_ref()
  }

  pub fn reset_phone_verified_attribute(&mut self) {
    self.phone_verified_attribute = None;
  }

  pub fn set_preferred_language_attribute(&mut self, preferred_language_attribute: String) {
    self.preferred_language_attribute = Some(preferred_language_attribute);
  }

  pub fn with_preferred_language_attribute(mut self, preferred_language_attribute: String) -> V1LdapAttributes {
    self.preferred_language_attribute = Some(preferred_language_attribute);
    self
  }

  pub fn preferred_language_attribute(&self) -> Option<&String> {
    self.preferred_language_attribute.as_ref()
  }

  pub fn reset_preferred_language_attribute(&mut self) {
    self.preferred_language_attribute = None;
  }

  pub fn set_avatar_url_attribute(&mut self, avatar_url_attribute: String) {
    self.avatar_url_attribute = Some(avatar_url_attribute);
  }

  pub fn with_avatar_url_attribute(mut self, avatar_url_attribute: String) -> V1LdapAttributes {
    self.avatar_url_attribute = Some(avatar_url_attribute);
    self
  }

  pub fn avatar_url_attribute(&self) -> Option<&String> {
    self.avatar_url_attribute.as_ref()
  }

  pub fn reset_avatar_url_attribute(&mut self) {
    self.avatar_url_attribute = None;
  }

  pub fn set_profile_attribute(&mut self, profile_attribute: String) {
    self.profile_attribute = Some(profile_attribute);
  }

  pub fn with_profile_attribute(mut self, profile_attribute: String) -> V1LdapAttributes {
    self.profile_attribute = Some(profile_attribute);
    self
  }

  pub fn profile_attribute(&self) -> Option<&String> {
    self.profile_attribute.as_ref()
  }

  pub fn reset_profile_attribute(&mut self) {
    self.profile_attribute = None;
  }

}



