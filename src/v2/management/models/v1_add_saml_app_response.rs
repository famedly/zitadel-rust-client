/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1AddSamlAppResponse {
  #[serde(rename = "appId")]
  app_id: Option<String>,
  #[serde(rename = "details")]
  details: Option<models::V1ObjectDetails>
}

impl V1AddSamlAppResponse {
  pub fn new() -> V1AddSamlAppResponse {
    V1AddSamlAppResponse {
      app_id: None,
      details: None
    }
  }

  pub fn set_app_id(&mut self, app_id: String) {
    self.app_id = Some(app_id);
  }

  pub fn with_app_id(mut self, app_id: String) -> V1AddSamlAppResponse {
    self.app_id = Some(app_id);
    self
  }

  pub fn app_id(&self) -> Option<&String> {
    self.app_id.as_ref()
  }

  pub fn reset_app_id(&mut self) {
    self.app_id = None;
  }

  pub fn set_details(&mut self, details: models::V1ObjectDetails) {
    self.details = Some(details);
  }

  pub fn with_details(mut self, details: models::V1ObjectDetails) -> V1AddSamlAppResponse {
    self.details = Some(details);
    self
  }

  pub fn details(&self) -> Option<&models::V1ObjectDetails> {
    self.details.as_ref()
  }

  pub fn reset_details(&mut self) {
    self.details = None;
  }

}



