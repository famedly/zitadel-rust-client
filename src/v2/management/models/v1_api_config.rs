/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1ApiConfig {
  /// generated oauth2/oidc client_id
  #[serde(rename = "clientId")]
  client_id: Option<String>,
  /// defines how the API passes the login credentials
  #[serde(rename = "authMethodType")]
  auth_method_type: Option<models::V1ApiAuthMethodType>
}

impl V1ApiConfig {
  pub fn new() -> V1ApiConfig {
    V1ApiConfig {
      client_id: None,
      auth_method_type: None
    }
  }

  pub fn set_client_id(&mut self, client_id: String) {
    self.client_id = Some(client_id);
  }

  pub fn with_client_id(mut self, client_id: String) -> V1ApiConfig {
    self.client_id = Some(client_id);
    self
  }

  pub fn client_id(&self) -> Option<&String> {
    self.client_id.as_ref()
  }

  pub fn reset_client_id(&mut self) {
    self.client_id = None;
  }

  pub fn set_auth_method_type(&mut self, auth_method_type: models::V1ApiAuthMethodType) {
    self.auth_method_type = Some(auth_method_type);
  }

  pub fn with_auth_method_type(mut self, auth_method_type: models::V1ApiAuthMethodType) -> V1ApiConfig {
    self.auth_method_type = Some(auth_method_type);
    self
  }

  pub fn auth_method_type(&self) -> Option<&models::V1ApiAuthMethodType> {
    self.auth_method_type.as_ref()
  }

  pub fn reset_auth_method_type(&mut self) {
    self.auth_method_type = None;
  }

}



