// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1PrivacyPolicy {
	#[serde(rename = "details")]
	details: Option<models::V1ObjectDetails>,
	#[serde(rename = "tosLink")]
	tos_link: Option<String>,
	#[serde(rename = "privacyLink")]
	privacy_link: Option<String>,
	#[serde(rename = "isDefault")]
	is_default: Option<bool>,
	#[serde(rename = "helpLink")]
	help_link: Option<String>,
	/// help / support email address.
	#[serde(rename = "supportEmail")]
	support_email: Option<String>,
	/// Link to documentation to be shown in the console.
	#[serde(rename = "docsLink")]
	docs_link: Option<String>,
	/// Link to an external resource that will be available to users in the
	/// console.
	#[serde(rename = "customLink")]
	custom_link: Option<String>,
	/// The button text that would be shown in console pointing to custom link.
	#[serde(rename = "customLinkText")]
	custom_link_text: Option<String>,
}

impl V1PrivacyPolicy {
	pub fn new() -> V1PrivacyPolicy {
		V1PrivacyPolicy {
			details: None,
			tos_link: None,
			privacy_link: None,
			is_default: None,
			help_link: None,
			support_email: None,
			docs_link: None,
			custom_link: None,
			custom_link_text: None,
		}
	}

	pub fn set_details(&mut self, details: models::V1ObjectDetails) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::V1ObjectDetails) -> V1PrivacyPolicy {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V1ObjectDetails> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_tos_link(&mut self, tos_link: String) {
		self.tos_link = Some(tos_link);
	}

	pub fn with_tos_link(mut self, tos_link: String) -> V1PrivacyPolicy {
		self.tos_link = Some(tos_link);
		self
	}

	pub fn tos_link(&self) -> Option<&String> {
		self.tos_link.as_ref()
	}

	pub fn reset_tos_link(&mut self) {
		self.tos_link = None;
	}

	pub fn set_privacy_link(&mut self, privacy_link: String) {
		self.privacy_link = Some(privacy_link);
	}

	pub fn with_privacy_link(mut self, privacy_link: String) -> V1PrivacyPolicy {
		self.privacy_link = Some(privacy_link);
		self
	}

	pub fn privacy_link(&self) -> Option<&String> {
		self.privacy_link.as_ref()
	}

	pub fn reset_privacy_link(&mut self) {
		self.privacy_link = None;
	}

	pub fn set_is_default(&mut self, is_default: bool) {
		self.is_default = Some(is_default);
	}

	pub fn with_is_default(mut self, is_default: bool) -> V1PrivacyPolicy {
		self.is_default = Some(is_default);
		self
	}

	pub fn is_default(&self) -> Option<&bool> {
		self.is_default.as_ref()
	}

	pub fn reset_is_default(&mut self) {
		self.is_default = None;
	}

	pub fn set_help_link(&mut self, help_link: String) {
		self.help_link = Some(help_link);
	}

	pub fn with_help_link(mut self, help_link: String) -> V1PrivacyPolicy {
		self.help_link = Some(help_link);
		self
	}

	pub fn help_link(&self) -> Option<&String> {
		self.help_link.as_ref()
	}

	pub fn reset_help_link(&mut self) {
		self.help_link = None;
	}

	pub fn set_support_email(&mut self, support_email: String) {
		self.support_email = Some(support_email);
	}

	pub fn with_support_email(mut self, support_email: String) -> V1PrivacyPolicy {
		self.support_email = Some(support_email);
		self
	}

	pub fn support_email(&self) -> Option<&String> {
		self.support_email.as_ref()
	}

	pub fn reset_support_email(&mut self) {
		self.support_email = None;
	}

	pub fn set_docs_link(&mut self, docs_link: String) {
		self.docs_link = Some(docs_link);
	}

	pub fn with_docs_link(mut self, docs_link: String) -> V1PrivacyPolicy {
		self.docs_link = Some(docs_link);
		self
	}

	pub fn docs_link(&self) -> Option<&String> {
		self.docs_link.as_ref()
	}

	pub fn reset_docs_link(&mut self) {
		self.docs_link = None;
	}

	pub fn set_custom_link(&mut self, custom_link: String) {
		self.custom_link = Some(custom_link);
	}

	pub fn with_custom_link(mut self, custom_link: String) -> V1PrivacyPolicy {
		self.custom_link = Some(custom_link);
		self
	}

	pub fn custom_link(&self) -> Option<&String> {
		self.custom_link.as_ref()
	}

	pub fn reset_custom_link(&mut self) {
		self.custom_link = None;
	}

	pub fn set_custom_link_text(&mut self, custom_link_text: String) {
		self.custom_link_text = Some(custom_link_text);
	}

	pub fn with_custom_link_text(mut self, custom_link_text: String) -> V1PrivacyPolicy {
		self.custom_link_text = Some(custom_link_text);
		self
	}

	pub fn custom_link_text(&self) -> Option<&String> {
		self.custom_link_text.as_ref()
	}

	pub fn reset_custom_link_text(&mut self) {
		self.custom_link_text = None;
	}
}
