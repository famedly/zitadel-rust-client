/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1Member {
	#[serde(rename = "userId")]
	user_id: Option<String>,
	#[serde(rename = "details")]
	details: Option<models::V1ObjectDetails>,
	/// the role keys granted to the user
	#[serde(rename = "roles")]
	roles: Option<Vec<String>>,
	/// preferred login name of the user
	#[serde(rename = "preferredLoginName")]
	preferred_login_name: Option<String>,
	/// preferred login name of the user
	#[serde(rename = "email")]
	email: Option<String>,
	/// the first name of the user
	#[serde(rename = "firstName")]
	first_name: Option<String>,
	/// last name of the user
	#[serde(rename = "lastName")]
	last_name: Option<String>,
	/// display name of the user
	#[serde(rename = "displayName")]
	display_name: Option<String>,
	/// avatar URL of the user
	#[serde(rename = "avatarUrl")]
	avatar_url: Option<String>,
	/// type of the user (human / machine)
	#[serde(rename = "userType")]
	user_type: Option<models::Userv1Type>,
}

impl V1Member {
	pub fn new() -> V1Member {
		V1Member {
			user_id: None,
			details: None,
			roles: None,
			preferred_login_name: None,
			email: None,
			first_name: None,
			last_name: None,
			display_name: None,
			avatar_url: None,
			user_type: None,
		}
	}

	pub fn set_user_id(&mut self, user_id: String) {
		self.user_id = Some(user_id);
	}

	pub fn with_user_id(mut self, user_id: String) -> V1Member {
		self.user_id = Some(user_id);
		self
	}

	pub fn user_id(&self) -> Option<&String> {
		self.user_id.as_ref()
	}

	pub fn reset_user_id(&mut self) {
		self.user_id = None;
	}

	pub fn set_details(&mut self, details: models::V1ObjectDetails) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::V1ObjectDetails) -> V1Member {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V1ObjectDetails> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_roles(&mut self, roles: Vec<String>) {
		self.roles = Some(roles);
	}

	pub fn with_roles(mut self, roles: Vec<String>) -> V1Member {
		self.roles = Some(roles);
		self
	}

	pub fn roles(&self) -> Option<&Vec<String>> {
		self.roles.as_ref()
	}

	pub fn reset_roles(&mut self) {
		self.roles = None;
	}

	pub fn set_preferred_login_name(&mut self, preferred_login_name: String) {
		self.preferred_login_name = Some(preferred_login_name);
	}

	pub fn with_preferred_login_name(mut self, preferred_login_name: String) -> V1Member {
		self.preferred_login_name = Some(preferred_login_name);
		self
	}

	pub fn preferred_login_name(&self) -> Option<&String> {
		self.preferred_login_name.as_ref()
	}

	pub fn reset_preferred_login_name(&mut self) {
		self.preferred_login_name = None;
	}

	pub fn set_email(&mut self, email: String) {
		self.email = Some(email);
	}

	pub fn with_email(mut self, email: String) -> V1Member {
		self.email = Some(email);
		self
	}

	pub fn email(&self) -> Option<&String> {
		self.email.as_ref()
	}

	pub fn reset_email(&mut self) {
		self.email = None;
	}

	pub fn set_first_name(&mut self, first_name: String) {
		self.first_name = Some(first_name);
	}

	pub fn with_first_name(mut self, first_name: String) -> V1Member {
		self.first_name = Some(first_name);
		self
	}

	pub fn first_name(&self) -> Option<&String> {
		self.first_name.as_ref()
	}

	pub fn reset_first_name(&mut self) {
		self.first_name = None;
	}

	pub fn set_last_name(&mut self, last_name: String) {
		self.last_name = Some(last_name);
	}

	pub fn with_last_name(mut self, last_name: String) -> V1Member {
		self.last_name = Some(last_name);
		self
	}

	pub fn last_name(&self) -> Option<&String> {
		self.last_name.as_ref()
	}

	pub fn reset_last_name(&mut self) {
		self.last_name = None;
	}

	pub fn set_display_name(&mut self, display_name: String) {
		self.display_name = Some(display_name);
	}

	pub fn with_display_name(mut self, display_name: String) -> V1Member {
		self.display_name = Some(display_name);
		self
	}

	pub fn display_name(&self) -> Option<&String> {
		self.display_name.as_ref()
	}

	pub fn reset_display_name(&mut self) {
		self.display_name = None;
	}

	pub fn set_avatar_url(&mut self, avatar_url: String) {
		self.avatar_url = Some(avatar_url);
	}

	pub fn with_avatar_url(mut self, avatar_url: String) -> V1Member {
		self.avatar_url = Some(avatar_url);
		self
	}

	pub fn avatar_url(&self) -> Option<&String> {
		self.avatar_url.as_ref()
	}

	pub fn reset_avatar_url(&mut self) {
		self.avatar_url = None;
	}

	pub fn set_user_type(&mut self, user_type: models::Userv1Type) {
		self.user_type = Some(user_type);
	}

	pub fn with_user_type(mut self, user_type: models::Userv1Type) -> V1Member {
		self.user_type = Some(user_type);
		self
	}

	pub fn user_type(&self) -> Option<&models::Userv1Type> {
		self.user_type.as_ref()
	}

	pub fn reset_user_type(&mut self) {
		self.user_type = None;
	}
}
