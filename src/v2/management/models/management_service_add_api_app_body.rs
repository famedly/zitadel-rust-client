/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct ManagementServiceAddApiAppBody {
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "authMethodType")]
  auth_method_type: Option<models::V1ApiAuthMethodType>
}

impl ManagementServiceAddApiAppBody {
  pub fn new(name: String) -> ManagementServiceAddApiAppBody {
    ManagementServiceAddApiAppBody {
      name: name,
      auth_method_type: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> ManagementServiceAddApiAppBody {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_auth_method_type(&mut self, auth_method_type: models::V1ApiAuthMethodType) {
    self.auth_method_type = Some(auth_method_type);
  }

  pub fn with_auth_method_type(mut self, auth_method_type: models::V1ApiAuthMethodType) -> ManagementServiceAddApiAppBody {
    self.auth_method_type = Some(auth_method_type);
    self
  }

  pub fn auth_method_type(&self) -> Option<&models::V1ApiAuthMethodType> {
    self.auth_method_type.as_ref()
  }

  pub fn reset_auth_method_type(&mut self) {
    self.auth_method_type = None;
  }

}



