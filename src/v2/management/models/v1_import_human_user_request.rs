/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1ImportHumanUserRequest {
  #[serde(rename = "userName")]
  user_name: String,
  #[serde(rename = "profile")]
  profile: models::V1ImportHumanUserRequestProfile,
  #[serde(rename = "email")]
  email: models::V1ImportHumanUserRequestEmail,
  #[serde(rename = "phone")]
  phone: Option<models::V1ImportHumanUserRequestPhone>,
  #[serde(rename = "password")]
  password: Option<String>,
  #[serde(rename = "hashedPassword")]
  hashed_password: Option<models::V1ImportHumanUserRequestHashedPassword>,
  /// If this is set to true, the user has to change the password on the next login.
  #[serde(rename = "passwordChangeRequired")]
  password_change_required: Option<bool>,
  /// If this is set to true, you will get a link for the passwordless/passkey registration in the response.
  #[serde(rename = "requestPasswordlessRegistration")]
  request_passwordless_registration: Option<bool>,
  #[serde(rename = "otpCode")]
  otp_code: Option<String>,
  /// To link your user directly with an external identity provider (Identity brokering)
  #[serde(rename = "idps")]
  idps: Option<Vec<models::V1ImportHumanUserRequestIdp>>
}

impl V1ImportHumanUserRequest {
  pub fn new(user_name: String, profile: models::V1ImportHumanUserRequestProfile, email: models::V1ImportHumanUserRequestEmail) -> V1ImportHumanUserRequest {
    V1ImportHumanUserRequest {
      user_name: user_name,
      profile: profile,
      email: email,
      phone: None,
      password: None,
      hashed_password: None,
      password_change_required: None,
      request_passwordless_registration: None,
      otp_code: None,
      idps: None
    }
  }

  pub fn set_user_name(&mut self, user_name: String) {
    self.user_name = user_name;
  }

  pub fn with_user_name(mut self, user_name: String) -> V1ImportHumanUserRequest {
    self.user_name = user_name;
    self
  }

  pub fn user_name(&self) -> &String {
    &self.user_name
  }


  pub fn set_profile(&mut self, profile: models::V1ImportHumanUserRequestProfile) {
    self.profile = profile;
  }

  pub fn with_profile(mut self, profile: models::V1ImportHumanUserRequestProfile) -> V1ImportHumanUserRequest {
    self.profile = profile;
    self
  }

  pub fn profile(&self) -> &models::V1ImportHumanUserRequestProfile {
    &self.profile
  }


  pub fn set_email(&mut self, email: models::V1ImportHumanUserRequestEmail) {
    self.email = email;
  }

  pub fn with_email(mut self, email: models::V1ImportHumanUserRequestEmail) -> V1ImportHumanUserRequest {
    self.email = email;
    self
  }

  pub fn email(&self) -> &models::V1ImportHumanUserRequestEmail {
    &self.email
  }


  pub fn set_phone(&mut self, phone: models::V1ImportHumanUserRequestPhone) {
    self.phone = Some(phone);
  }

  pub fn with_phone(mut self, phone: models::V1ImportHumanUserRequestPhone) -> V1ImportHumanUserRequest {
    self.phone = Some(phone);
    self
  }

  pub fn phone(&self) -> Option<&models::V1ImportHumanUserRequestPhone> {
    self.phone.as_ref()
  }

  pub fn reset_phone(&mut self) {
    self.phone = None;
  }

  pub fn set_password(&mut self, password: String) {
    self.password = Some(password);
  }

  pub fn with_password(mut self, password: String) -> V1ImportHumanUserRequest {
    self.password = Some(password);
    self
  }

  pub fn password(&self) -> Option<&String> {
    self.password.as_ref()
  }

  pub fn reset_password(&mut self) {
    self.password = None;
  }

  pub fn set_hashed_password(&mut self, hashed_password: models::V1ImportHumanUserRequestHashedPassword) {
    self.hashed_password = Some(hashed_password);
  }

  pub fn with_hashed_password(mut self, hashed_password: models::V1ImportHumanUserRequestHashedPassword) -> V1ImportHumanUserRequest {
    self.hashed_password = Some(hashed_password);
    self
  }

  pub fn hashed_password(&self) -> Option<&models::V1ImportHumanUserRequestHashedPassword> {
    self.hashed_password.as_ref()
  }

  pub fn reset_hashed_password(&mut self) {
    self.hashed_password = None;
  }

  pub fn set_password_change_required(&mut self, password_change_required: bool) {
    self.password_change_required = Some(password_change_required);
  }

  pub fn with_password_change_required(mut self, password_change_required: bool) -> V1ImportHumanUserRequest {
    self.password_change_required = Some(password_change_required);
    self
  }

  pub fn password_change_required(&self) -> Option<&bool> {
    self.password_change_required.as_ref()
  }

  pub fn reset_password_change_required(&mut self) {
    self.password_change_required = None;
  }

  pub fn set_request_passwordless_registration(&mut self, request_passwordless_registration: bool) {
    self.request_passwordless_registration = Some(request_passwordless_registration);
  }

  pub fn with_request_passwordless_registration(mut self, request_passwordless_registration: bool) -> V1ImportHumanUserRequest {
    self.request_passwordless_registration = Some(request_passwordless_registration);
    self
  }

  pub fn request_passwordless_registration(&self) -> Option<&bool> {
    self.request_passwordless_registration.as_ref()
  }

  pub fn reset_request_passwordless_registration(&mut self) {
    self.request_passwordless_registration = None;
  }

  pub fn set_otp_code(&mut self, otp_code: String) {
    self.otp_code = Some(otp_code);
  }

  pub fn with_otp_code(mut self, otp_code: String) -> V1ImportHumanUserRequest {
    self.otp_code = Some(otp_code);
    self
  }

  pub fn otp_code(&self) -> Option<&String> {
    self.otp_code.as_ref()
  }

  pub fn reset_otp_code(&mut self) {
    self.otp_code = None;
  }

  pub fn set_idps(&mut self, idps: Vec<models::V1ImportHumanUserRequestIdp>) {
    self.idps = Some(idps);
  }

  pub fn with_idps(mut self, idps: Vec<models::V1ImportHumanUserRequestIdp>) -> V1ImportHumanUserRequest {
    self.idps = Some(idps);
    self
  }

  pub fn idps(&self) -> Option<&Vec<models::V1ImportHumanUserRequestIdp>> {
    self.idps.as_ref()
  }

  pub fn reset_idps(&mut self) {
    self.idps = None;
  }

}



