/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1MembershipQuery {
  #[serde(rename = "orgQuery")]
  org_query: Option<models::V1MembershipOrgQuery>,
  #[serde(rename = "projectQuery")]
  project_query: Option<models::V1MembershipProjectQuery>,
  #[serde(rename = "projectGrantQuery")]
  project_grant_query: Option<models::V1MembershipProjectGrantQuery>,
  #[serde(rename = "iamQuery")]
  iam_query: Option<models::V1MembershipIamQuery>
}

impl V1MembershipQuery {
  pub fn new() -> V1MembershipQuery {
    V1MembershipQuery {
      org_query: None,
      project_query: None,
      project_grant_query: None,
      iam_query: None
    }
  }

  pub fn set_org_query(&mut self, org_query: models::V1MembershipOrgQuery) {
    self.org_query = Some(org_query);
  }

  pub fn with_org_query(mut self, org_query: models::V1MembershipOrgQuery) -> V1MembershipQuery {
    self.org_query = Some(org_query);
    self
  }

  pub fn org_query(&self) -> Option<&models::V1MembershipOrgQuery> {
    self.org_query.as_ref()
  }

  pub fn reset_org_query(&mut self) {
    self.org_query = None;
  }

  pub fn set_project_query(&mut self, project_query: models::V1MembershipProjectQuery) {
    self.project_query = Some(project_query);
  }

  pub fn with_project_query(mut self, project_query: models::V1MembershipProjectQuery) -> V1MembershipQuery {
    self.project_query = Some(project_query);
    self
  }

  pub fn project_query(&self) -> Option<&models::V1MembershipProjectQuery> {
    self.project_query.as_ref()
  }

  pub fn reset_project_query(&mut self) {
    self.project_query = None;
  }

  pub fn set_project_grant_query(&mut self, project_grant_query: models::V1MembershipProjectGrantQuery) {
    self.project_grant_query = Some(project_grant_query);
  }

  pub fn with_project_grant_query(mut self, project_grant_query: models::V1MembershipProjectGrantQuery) -> V1MembershipQuery {
    self.project_grant_query = Some(project_grant_query);
    self
  }

  pub fn project_grant_query(&self) -> Option<&models::V1MembershipProjectGrantQuery> {
    self.project_grant_query.as_ref()
  }

  pub fn reset_project_grant_query(&mut self) {
    self.project_grant_query = None;
  }

  pub fn set_iam_query(&mut self, iam_query: models::V1MembershipIamQuery) {
    self.iam_query = Some(iam_query);
  }

  pub fn with_iam_query(mut self, iam_query: models::V1MembershipIamQuery) -> V1MembershipQuery {
    self.iam_query = Some(iam_query);
    self
  }

  pub fn iam_query(&self) -> Option<&models::V1MembershipIamQuery> {
    self.iam_query.as_ref()
  }

  pub fn reset_iam_query(&mut self) {
    self.iam_query = None;
  }

}



