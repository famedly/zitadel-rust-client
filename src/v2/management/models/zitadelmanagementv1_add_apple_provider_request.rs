/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct Zitadelmanagementv1AddAppleProviderRequest {
	/// Apple will be used as default, if no name is provided
	#[serde(rename = "name")]
	name: Option<String>,
	/// Client id (App ID or Service ID) provided by Apple
	#[serde(rename = "clientId")]
	client_id: String,
	/// (10-character) Team ID provided by Apple
	#[serde(rename = "teamId")]
	team_id: String,
	/// (10-character) ID of the private key generated by Apple
	#[serde(rename = "keyId")]
	key_id: String,
	/// Private Key generated by Apple
	#[serde(rename = "privateKey")]
	private_key: String,
	/// The scopes requested by ZITADEL during the request to Apple
	#[serde(rename = "scopes")]
	scopes: Option<Vec<String>>,
	#[serde(rename = "providerOptions")]
	provider_options: Option<models::V1Options>,
}

impl Zitadelmanagementv1AddAppleProviderRequest {
	pub fn new(
		client_id: String,
		team_id: String,
		key_id: String,
		private_key: String,
	) -> Zitadelmanagementv1AddAppleProviderRequest {
		Zitadelmanagementv1AddAppleProviderRequest {
			name: None,
			client_id: client_id,
			team_id: team_id,
			key_id: key_id,
			private_key: private_key,
			scopes: None,
			provider_options: None,
		}
	}

	pub fn set_name(&mut self, name: String) {
		self.name = Some(name);
	}

	pub fn with_name(mut self, name: String) -> Zitadelmanagementv1AddAppleProviderRequest {
		self.name = Some(name);
		self
	}

	pub fn name(&self) -> Option<&String> {
		self.name.as_ref()
	}

	pub fn reset_name(&mut self) {
		self.name = None;
	}

	pub fn set_client_id(&mut self, client_id: String) {
		self.client_id = client_id;
	}

	pub fn with_client_id(
		mut self,
		client_id: String,
	) -> Zitadelmanagementv1AddAppleProviderRequest {
		self.client_id = client_id;
		self
	}

	pub fn client_id(&self) -> &String {
		&self.client_id
	}

	pub fn set_team_id(&mut self, team_id: String) {
		self.team_id = team_id;
	}

	pub fn with_team_id(mut self, team_id: String) -> Zitadelmanagementv1AddAppleProviderRequest {
		self.team_id = team_id;
		self
	}

	pub fn team_id(&self) -> &String {
		&self.team_id
	}

	pub fn set_key_id(&mut self, key_id: String) {
		self.key_id = key_id;
	}

	pub fn with_key_id(mut self, key_id: String) -> Zitadelmanagementv1AddAppleProviderRequest {
		self.key_id = key_id;
		self
	}

	pub fn key_id(&self) -> &String {
		&self.key_id
	}

	pub fn set_private_key(&mut self, private_key: String) {
		self.private_key = private_key;
	}

	pub fn with_private_key(
		mut self,
		private_key: String,
	) -> Zitadelmanagementv1AddAppleProviderRequest {
		self.private_key = private_key;
		self
	}

	pub fn private_key(&self) -> &String {
		&self.private_key
	}

	pub fn set_scopes(&mut self, scopes: Vec<String>) {
		self.scopes = Some(scopes);
	}

	pub fn with_scopes(
		mut self,
		scopes: Vec<String>,
	) -> Zitadelmanagementv1AddAppleProviderRequest {
		self.scopes = Some(scopes);
		self
	}

	pub fn scopes(&self) -> Option<&Vec<String>> {
		self.scopes.as_ref()
	}

	pub fn reset_scopes(&mut self) {
		self.scopes = None;
	}

	pub fn set_provider_options(&mut self, provider_options: models::V1Options) {
		self.provider_options = Some(provider_options);
	}

	pub fn with_provider_options(
		mut self,
		provider_options: models::V1Options,
	) -> Zitadelmanagementv1AddAppleProviderRequest {
		self.provider_options = Some(provider_options);
		self
	}

	pub fn provider_options(&self) -> Option<&models::V1Options> {
		self.provider_options.as_ref()
	}

	pub fn reset_provider_options(&mut self) {
		self.provider_options = None;
	}
}
