/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1Options {
	/// Enable if users should be able to manually link an existing ZITADEL user
	/// with an external account. Disable if users should only be allowed to
	/// link the proposed account in case of active auto_linking.
	#[serde(rename = "isLinkingAllowed")]
	is_linking_allowed: Option<bool>,
	/// Enable if users should be able to manually create a new account in
	/// ZITADEL when using an external account. Disable if users should not be
	/// able to edit account information when auto_creation is enabled.
	#[serde(rename = "isCreationAllowed")]
	is_creation_allowed: Option<bool>,
	/// Enable if a new account in ZITADEL should be created automatically when
	/// login with an external account.
	#[serde(rename = "isAutoCreation")]
	is_auto_creation: Option<bool>,
	/// Enable if a the ZITADEL account fields should be updated automatically
	/// on each login.
	#[serde(rename = "isAutoUpdate")]
	is_auto_update: Option<bool>,
	/// Enable if users should get prompted to link an existing ZITADEL user to
	/// an external account if the selected attribute matches.
	#[serde(rename = "autoLinking")]
	auto_linking: Option<models::V1AutoLinkingOption>,
}

impl V1Options {
	pub fn new() -> V1Options {
		V1Options {
			is_linking_allowed: None,
			is_creation_allowed: None,
			is_auto_creation: None,
			is_auto_update: None,
			auto_linking: None,
		}
	}

	pub fn set_is_linking_allowed(&mut self, is_linking_allowed: bool) {
		self.is_linking_allowed = Some(is_linking_allowed);
	}

	pub fn with_is_linking_allowed(mut self, is_linking_allowed: bool) -> V1Options {
		self.is_linking_allowed = Some(is_linking_allowed);
		self
	}

	pub fn is_linking_allowed(&self) -> Option<&bool> {
		self.is_linking_allowed.as_ref()
	}

	pub fn reset_is_linking_allowed(&mut self) {
		self.is_linking_allowed = None;
	}

	pub fn set_is_creation_allowed(&mut self, is_creation_allowed: bool) {
		self.is_creation_allowed = Some(is_creation_allowed);
	}

	pub fn with_is_creation_allowed(mut self, is_creation_allowed: bool) -> V1Options {
		self.is_creation_allowed = Some(is_creation_allowed);
		self
	}

	pub fn is_creation_allowed(&self) -> Option<&bool> {
		self.is_creation_allowed.as_ref()
	}

	pub fn reset_is_creation_allowed(&mut self) {
		self.is_creation_allowed = None;
	}

	pub fn set_is_auto_creation(&mut self, is_auto_creation: bool) {
		self.is_auto_creation = Some(is_auto_creation);
	}

	pub fn with_is_auto_creation(mut self, is_auto_creation: bool) -> V1Options {
		self.is_auto_creation = Some(is_auto_creation);
		self
	}

	pub fn is_auto_creation(&self) -> Option<&bool> {
		self.is_auto_creation.as_ref()
	}

	pub fn reset_is_auto_creation(&mut self) {
		self.is_auto_creation = None;
	}

	pub fn set_is_auto_update(&mut self, is_auto_update: bool) {
		self.is_auto_update = Some(is_auto_update);
	}

	pub fn with_is_auto_update(mut self, is_auto_update: bool) -> V1Options {
		self.is_auto_update = Some(is_auto_update);
		self
	}

	pub fn is_auto_update(&self) -> Option<&bool> {
		self.is_auto_update.as_ref()
	}

	pub fn reset_is_auto_update(&mut self) {
		self.is_auto_update = None;
	}

	pub fn set_auto_linking(&mut self, auto_linking: models::V1AutoLinkingOption) {
		self.auto_linking = Some(auto_linking);
	}

	pub fn with_auto_linking(mut self, auto_linking: models::V1AutoLinkingOption) -> V1Options {
		self.auto_linking = Some(auto_linking);
		self
	}

	pub fn auto_linking(&self) -> Option<&models::V1AutoLinkingOption> {
		self.auto_linking.as_ref()
	}

	pub fn reset_auto_linking(&mut self) {
		self.auto_linking = None;
	}
}
