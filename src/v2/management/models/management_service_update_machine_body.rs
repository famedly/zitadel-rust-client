/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct ManagementServiceUpdateMachineBody {
	#[serde(rename = "description")]
	description: Option<String>,
	#[serde(rename = "name")]
	name: Option<String>,
	#[serde(rename = "accessTokenType")]
	access_token_type: Option<models::V1AccessTokenType>,
}

impl ManagementServiceUpdateMachineBody {
	pub fn new() -> ManagementServiceUpdateMachineBody {
		ManagementServiceUpdateMachineBody {
			description: None,
			name: None,
			access_token_type: None,
		}
	}

	pub fn set_description(&mut self, description: String) {
		self.description = Some(description);
	}

	pub fn with_description(mut self, description: String) -> ManagementServiceUpdateMachineBody {
		self.description = Some(description);
		self
	}

	pub fn description(&self) -> Option<&String> {
		self.description.as_ref()
	}

	pub fn reset_description(&mut self) {
		self.description = None;
	}

	pub fn set_name(&mut self, name: String) {
		self.name = Some(name);
	}

	pub fn with_name(mut self, name: String) -> ManagementServiceUpdateMachineBody {
		self.name = Some(name);
		self
	}

	pub fn name(&self) -> Option<&String> {
		self.name.as_ref()
	}

	pub fn reset_name(&mut self) {
		self.name = None;
	}

	pub fn set_access_token_type(&mut self, access_token_type: models::V1AccessTokenType) {
		self.access_token_type = Some(access_token_type);
	}

	pub fn with_access_token_type(
		mut self,
		access_token_type: models::V1AccessTokenType,
	) -> ManagementServiceUpdateMachineBody {
		self.access_token_type = Some(access_token_type);
		self
	}

	pub fn access_token_type(&self) -> Option<&models::V1AccessTokenType> {
		self.access_token_type.as_ref()
	}

	pub fn reset_access_token_type(&mut self) {
		self.access_token_type = None;
	}
}
