// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct Userv1Human {
	#[serde(rename = "profile")]
	profile: Option<models::Userv1Profile>,
	#[serde(rename = "email")]
	email: Option<models::Userv1Email>,
	#[serde(rename = "phone")]
	phone: Option<models::Userv1Phone>,
	/// The time the user last changed their password.
	#[serde(rename = "passwordChanged")]
	password_changed: Option<String>,
}

impl Userv1Human {
	pub fn new() -> Userv1Human {
		Userv1Human { profile: None, email: None, phone: None, password_changed: None }
	}

	pub fn set_profile(&mut self, profile: models::Userv1Profile) {
		self.profile = Some(profile);
	}

	pub fn with_profile(mut self, profile: models::Userv1Profile) -> Userv1Human {
		self.profile = Some(profile);
		self
	}

	pub fn profile(&self) -> Option<&models::Userv1Profile> {
		self.profile.as_ref()
	}

	pub fn reset_profile(&mut self) {
		self.profile = None;
	}

	pub fn set_email(&mut self, email: models::Userv1Email) {
		self.email = Some(email);
	}

	pub fn with_email(mut self, email: models::Userv1Email) -> Userv1Human {
		self.email = Some(email);
		self
	}

	pub fn email(&self) -> Option<&models::Userv1Email> {
		self.email.as_ref()
	}

	pub fn reset_email(&mut self) {
		self.email = None;
	}

	pub fn set_phone(&mut self, phone: models::Userv1Phone) {
		self.phone = Some(phone);
	}

	pub fn with_phone(mut self, phone: models::Userv1Phone) -> Userv1Human {
		self.phone = Some(phone);
		self
	}

	pub fn phone(&self) -> Option<&models::Userv1Phone> {
		self.phone.as_ref()
	}

	pub fn reset_phone(&mut self) {
		self.phone = None;
	}

	pub fn set_password_changed(&mut self, password_changed: String) {
		self.password_changed = Some(password_changed);
	}

	pub fn with_password_changed(mut self, password_changed: String) -> Userv1Human {
		self.password_changed = Some(password_changed);
		self
	}

	pub fn password_changed(&self) -> Option<&String> {
		self.password_changed.as_ref()
	}

	pub fn reset_password_changed(&mut self) {
		self.password_changed = None;
	}
}
