// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1GrantedProject {
	#[serde(rename = "grantId")]
	grant_id: Option<String>,
	#[serde(rename = "grantedOrgId")]
	granted_org_id: Option<String>,
	#[serde(rename = "grantedOrgName")]
	granted_org_name: Option<String>,
	#[serde(rename = "grantedRoleKeys")]
	granted_role_keys: Option<Vec<String>>,
	/// current state of the project grant
	#[serde(rename = "state")]
	state: Option<models::V1ProjectGrantState>,
	#[serde(rename = "projectId")]
	project_id: Option<String>,
	#[serde(rename = "projectName")]
	project_name: Option<String>,
	#[serde(rename = "projectOwnerId")]
	project_owner_id: Option<String>,
	#[serde(rename = "projectOwnerName")]
	project_owner_name: Option<String>,
	#[serde(rename = "details")]
	details: Option<models::V1ObjectDetails>,
}

impl V1GrantedProject {
	pub fn new() -> V1GrantedProject {
		V1GrantedProject {
			grant_id: None,
			granted_org_id: None,
			granted_org_name: None,
			granted_role_keys: None,
			state: None,
			project_id: None,
			project_name: None,
			project_owner_id: None,
			project_owner_name: None,
			details: None,
		}
	}

	pub fn set_grant_id(&mut self, grant_id: String) {
		self.grant_id = Some(grant_id);
	}

	pub fn with_grant_id(mut self, grant_id: String) -> V1GrantedProject {
		self.grant_id = Some(grant_id);
		self
	}

	pub fn grant_id(&self) -> Option<&String> {
		self.grant_id.as_ref()
	}

	pub fn reset_grant_id(&mut self) {
		self.grant_id = None;
	}

	pub fn set_granted_org_id(&mut self, granted_org_id: String) {
		self.granted_org_id = Some(granted_org_id);
	}

	pub fn with_granted_org_id(mut self, granted_org_id: String) -> V1GrantedProject {
		self.granted_org_id = Some(granted_org_id);
		self
	}

	pub fn granted_org_id(&self) -> Option<&String> {
		self.granted_org_id.as_ref()
	}

	pub fn reset_granted_org_id(&mut self) {
		self.granted_org_id = None;
	}

	pub fn set_granted_org_name(&mut self, granted_org_name: String) {
		self.granted_org_name = Some(granted_org_name);
	}

	pub fn with_granted_org_name(mut self, granted_org_name: String) -> V1GrantedProject {
		self.granted_org_name = Some(granted_org_name);
		self
	}

	pub fn granted_org_name(&self) -> Option<&String> {
		self.granted_org_name.as_ref()
	}

	pub fn reset_granted_org_name(&mut self) {
		self.granted_org_name = None;
	}

	pub fn set_granted_role_keys(&mut self, granted_role_keys: Vec<String>) {
		self.granted_role_keys = Some(granted_role_keys);
	}

	pub fn with_granted_role_keys(mut self, granted_role_keys: Vec<String>) -> V1GrantedProject {
		self.granted_role_keys = Some(granted_role_keys);
		self
	}

	pub fn granted_role_keys(&self) -> Option<&Vec<String>> {
		self.granted_role_keys.as_ref()
	}

	pub fn reset_granted_role_keys(&mut self) {
		self.granted_role_keys = None;
	}

	pub fn set_state(&mut self, state: models::V1ProjectGrantState) {
		self.state = Some(state);
	}

	pub fn with_state(mut self, state: models::V1ProjectGrantState) -> V1GrantedProject {
		self.state = Some(state);
		self
	}

	pub fn state(&self) -> Option<&models::V1ProjectGrantState> {
		self.state.as_ref()
	}

	pub fn reset_state(&mut self) {
		self.state = None;
	}

	pub fn set_project_id(&mut self, project_id: String) {
		self.project_id = Some(project_id);
	}

	pub fn with_project_id(mut self, project_id: String) -> V1GrantedProject {
		self.project_id = Some(project_id);
		self
	}

	pub fn project_id(&self) -> Option<&String> {
		self.project_id.as_ref()
	}

	pub fn reset_project_id(&mut self) {
		self.project_id = None;
	}

	pub fn set_project_name(&mut self, project_name: String) {
		self.project_name = Some(project_name);
	}

	pub fn with_project_name(mut self, project_name: String) -> V1GrantedProject {
		self.project_name = Some(project_name);
		self
	}

	pub fn project_name(&self) -> Option<&String> {
		self.project_name.as_ref()
	}

	pub fn reset_project_name(&mut self) {
		self.project_name = None;
	}

	pub fn set_project_owner_id(&mut self, project_owner_id: String) {
		self.project_owner_id = Some(project_owner_id);
	}

	pub fn with_project_owner_id(mut self, project_owner_id: String) -> V1GrantedProject {
		self.project_owner_id = Some(project_owner_id);
		self
	}

	pub fn project_owner_id(&self) -> Option<&String> {
		self.project_owner_id.as_ref()
	}

	pub fn reset_project_owner_id(&mut self) {
		self.project_owner_id = None;
	}

	pub fn set_project_owner_name(&mut self, project_owner_name: String) {
		self.project_owner_name = Some(project_owner_name);
	}

	pub fn with_project_owner_name(mut self, project_owner_name: String) -> V1GrantedProject {
		self.project_owner_name = Some(project_owner_name);
		self
	}

	pub fn project_owner_name(&self) -> Option<&String> {
		self.project_owner_name.as_ref()
	}

	pub fn reset_project_owner_name(&mut self) {
		self.project_owner_name = None;
	}

	pub fn set_details(&mut self, details: models::V1ObjectDetails) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::V1ObjectDetails) -> V1GrantedProject {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V1ObjectDetails> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}
}
