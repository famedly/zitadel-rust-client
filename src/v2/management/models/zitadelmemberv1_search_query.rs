/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct Zitadelmemberv1SearchQuery {
  #[serde(rename = "firstNameQuery")]
  first_name_query: Option<models::Zitadelmemberv1FirstNameQuery>,
  #[serde(rename = "lastNameQuery")]
  last_name_query: Option<models::Zitadelmemberv1LastNameQuery>,
  #[serde(rename = "emailQuery")]
  email_query: Option<models::Zitadelmemberv1EmailQuery>,
  #[serde(rename = "userIdQuery")]
  user_id_query: Option<models::V1UserIdQuery>
}

impl Zitadelmemberv1SearchQuery {
  pub fn new() -> Zitadelmemberv1SearchQuery {
    Zitadelmemberv1SearchQuery {
      first_name_query: None,
      last_name_query: None,
      email_query: None,
      user_id_query: None
    }
  }

  pub fn set_first_name_query(&mut self, first_name_query: models::Zitadelmemberv1FirstNameQuery) {
    self.first_name_query = Some(first_name_query);
  }

  pub fn with_first_name_query(mut self, first_name_query: models::Zitadelmemberv1FirstNameQuery) -> Zitadelmemberv1SearchQuery {
    self.first_name_query = Some(first_name_query);
    self
  }

  pub fn first_name_query(&self) -> Option<&models::Zitadelmemberv1FirstNameQuery> {
    self.first_name_query.as_ref()
  }

  pub fn reset_first_name_query(&mut self) {
    self.first_name_query = None;
  }

  pub fn set_last_name_query(&mut self, last_name_query: models::Zitadelmemberv1LastNameQuery) {
    self.last_name_query = Some(last_name_query);
  }

  pub fn with_last_name_query(mut self, last_name_query: models::Zitadelmemberv1LastNameQuery) -> Zitadelmemberv1SearchQuery {
    self.last_name_query = Some(last_name_query);
    self
  }

  pub fn last_name_query(&self) -> Option<&models::Zitadelmemberv1LastNameQuery> {
    self.last_name_query.as_ref()
  }

  pub fn reset_last_name_query(&mut self) {
    self.last_name_query = None;
  }

  pub fn set_email_query(&mut self, email_query: models::Zitadelmemberv1EmailQuery) {
    self.email_query = Some(email_query);
  }

  pub fn with_email_query(mut self, email_query: models::Zitadelmemberv1EmailQuery) -> Zitadelmemberv1SearchQuery {
    self.email_query = Some(email_query);
    self
  }

  pub fn email_query(&self) -> Option<&models::Zitadelmemberv1EmailQuery> {
    self.email_query.as_ref()
  }

  pub fn reset_email_query(&mut self) {
    self.email_query = None;
  }

  pub fn set_user_id_query(&mut self, user_id_query: models::V1UserIdQuery) {
    self.user_id_query = Some(user_id_query);
  }

  pub fn with_user_id_query(mut self, user_id_query: models::V1UserIdQuery) -> Zitadelmemberv1SearchQuery {
    self.user_id_query = Some(user_id_query);
    self
  }

  pub fn user_id_query(&self) -> Option<&models::V1UserIdQuery> {
    self.user_id_query.as_ref()
  }

  pub fn reset_user_id_query(&mut self) {
    self.user_id_query = None;
  }

}



