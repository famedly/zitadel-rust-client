/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1Change {
	/// the creation date of an event
	#[serde(rename = "changeDate")]
	change_date: Option<String>,
	#[serde(rename = "eventType")]
	event_type: Option<models::V1LocalizedMessage>,
	#[serde(rename = "sequence")]
	sequence: Option<String>,
	/// the id of the user who created the event
	#[serde(rename = "editorId")]
	editor_id: Option<String>,
	/// the display name of the editor
	#[serde(rename = "editorDisplayName")]
	editor_display_name: Option<String>,
	/// the organization the event belongs to
	#[serde(rename = "resourceOwnerId")]
	resource_owner_id: Option<String>,
	/// the preferred login name of the editor
	#[serde(rename = "editorPreferredLoginName")]
	editor_preferred_login_name: Option<String>,
	/// avatar URL of the editor
	#[serde(rename = "editorAvatarUrl")]
	editor_avatar_url: Option<String>,
}

impl V1Change {
	pub fn new() -> V1Change {
		V1Change {
			change_date: None,
			event_type: None,
			sequence: None,
			editor_id: None,
			editor_display_name: None,
			resource_owner_id: None,
			editor_preferred_login_name: None,
			editor_avatar_url: None,
		}
	}

	pub fn set_change_date(&mut self, change_date: String) {
		self.change_date = Some(change_date);
	}

	pub fn with_change_date(mut self, change_date: String) -> V1Change {
		self.change_date = Some(change_date);
		self
	}

	pub fn change_date(&self) -> Option<&String> {
		self.change_date.as_ref()
	}

	pub fn reset_change_date(&mut self) {
		self.change_date = None;
	}

	pub fn set_event_type(&mut self, event_type: models::V1LocalizedMessage) {
		self.event_type = Some(event_type);
	}

	pub fn with_event_type(mut self, event_type: models::V1LocalizedMessage) -> V1Change {
		self.event_type = Some(event_type);
		self
	}

	pub fn event_type(&self) -> Option<&models::V1LocalizedMessage> {
		self.event_type.as_ref()
	}

	pub fn reset_event_type(&mut self) {
		self.event_type = None;
	}

	pub fn set_sequence(&mut self, sequence: String) {
		self.sequence = Some(sequence);
	}

	pub fn with_sequence(mut self, sequence: String) -> V1Change {
		self.sequence = Some(sequence);
		self
	}

	pub fn sequence(&self) -> Option<&String> {
		self.sequence.as_ref()
	}

	pub fn reset_sequence(&mut self) {
		self.sequence = None;
	}

	pub fn set_editor_id(&mut self, editor_id: String) {
		self.editor_id = Some(editor_id);
	}

	pub fn with_editor_id(mut self, editor_id: String) -> V1Change {
		self.editor_id = Some(editor_id);
		self
	}

	pub fn editor_id(&self) -> Option<&String> {
		self.editor_id.as_ref()
	}

	pub fn reset_editor_id(&mut self) {
		self.editor_id = None;
	}

	pub fn set_editor_display_name(&mut self, editor_display_name: String) {
		self.editor_display_name = Some(editor_display_name);
	}

	pub fn with_editor_display_name(mut self, editor_display_name: String) -> V1Change {
		self.editor_display_name = Some(editor_display_name);
		self
	}

	pub fn editor_display_name(&self) -> Option<&String> {
		self.editor_display_name.as_ref()
	}

	pub fn reset_editor_display_name(&mut self) {
		self.editor_display_name = None;
	}

	pub fn set_resource_owner_id(&mut self, resource_owner_id: String) {
		self.resource_owner_id = Some(resource_owner_id);
	}

	pub fn with_resource_owner_id(mut self, resource_owner_id: String) -> V1Change {
		self.resource_owner_id = Some(resource_owner_id);
		self
	}

	pub fn resource_owner_id(&self) -> Option<&String> {
		self.resource_owner_id.as_ref()
	}

	pub fn reset_resource_owner_id(&mut self) {
		self.resource_owner_id = None;
	}

	pub fn set_editor_preferred_login_name(&mut self, editor_preferred_login_name: String) {
		self.editor_preferred_login_name = Some(editor_preferred_login_name);
	}

	pub fn with_editor_preferred_login_name(
		mut self,
		editor_preferred_login_name: String,
	) -> V1Change {
		self.editor_preferred_login_name = Some(editor_preferred_login_name);
		self
	}

	pub fn editor_preferred_login_name(&self) -> Option<&String> {
		self.editor_preferred_login_name.as_ref()
	}

	pub fn reset_editor_preferred_login_name(&mut self) {
		self.editor_preferred_login_name = None;
	}

	pub fn set_editor_avatar_url(&mut self, editor_avatar_url: String) {
		self.editor_avatar_url = Some(editor_avatar_url);
	}

	pub fn with_editor_avatar_url(mut self, editor_avatar_url: String) -> V1Change {
		self.editor_avatar_url = Some(editor_avatar_url);
		self
	}

	pub fn editor_avatar_url(&self) -> Option<&String> {
		self.editor_avatar_url.as_ref()
	}

	pub fn reset_editor_avatar_url(&mut self) {
		self.editor_avatar_url = None;
	}
}
