// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1MessageCustomText {
	#[serde(rename = "details")]
	details: Option<models::V1ObjectDetails>,
	/// custom text for email title
	#[serde(rename = "title")]
	title: Option<String>,
	/// custom text for email pre-header
	#[serde(rename = "preHeader")]
	pre_header: Option<String>,
	/// custom text for email subject
	#[serde(rename = "subject")]
	subject: Option<String>,
	/// custom text for email greeting
	#[serde(rename = "greeting")]
	greeting: Option<String>,
	/// custom text for email text
	#[serde(rename = "text")]
	text: Option<String>,
	/// custom text for email button_text
	#[serde(rename = "buttonText")]
	button_text: Option<String>,
	/// custom text for email footer_text
	#[serde(rename = "footerText")]
	footer_text: Option<String>,
	#[serde(rename = "isDefault")]
	is_default: Option<bool>,
}

impl V1MessageCustomText {
	pub fn new() -> V1MessageCustomText {
		V1MessageCustomText {
			details: None,
			title: None,
			pre_header: None,
			subject: None,
			greeting: None,
			text: None,
			button_text: None,
			footer_text: None,
			is_default: None,
		}
	}

	pub fn set_details(&mut self, details: models::V1ObjectDetails) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::V1ObjectDetails) -> V1MessageCustomText {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V1ObjectDetails> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_title(&mut self, title: String) {
		self.title = Some(title);
	}

	pub fn with_title(mut self, title: String) -> V1MessageCustomText {
		self.title = Some(title);
		self
	}

	pub fn title(&self) -> Option<&String> {
		self.title.as_ref()
	}

	pub fn reset_title(&mut self) {
		self.title = None;
	}

	pub fn set_pre_header(&mut self, pre_header: String) {
		self.pre_header = Some(pre_header);
	}

	pub fn with_pre_header(mut self, pre_header: String) -> V1MessageCustomText {
		self.pre_header = Some(pre_header);
		self
	}

	pub fn pre_header(&self) -> Option<&String> {
		self.pre_header.as_ref()
	}

	pub fn reset_pre_header(&mut self) {
		self.pre_header = None;
	}

	pub fn set_subject(&mut self, subject: String) {
		self.subject = Some(subject);
	}

	pub fn with_subject(mut self, subject: String) -> V1MessageCustomText {
		self.subject = Some(subject);
		self
	}

	pub fn subject(&self) -> Option<&String> {
		self.subject.as_ref()
	}

	pub fn reset_subject(&mut self) {
		self.subject = None;
	}

	pub fn set_greeting(&mut self, greeting: String) {
		self.greeting = Some(greeting);
	}

	pub fn with_greeting(mut self, greeting: String) -> V1MessageCustomText {
		self.greeting = Some(greeting);
		self
	}

	pub fn greeting(&self) -> Option<&String> {
		self.greeting.as_ref()
	}

	pub fn reset_greeting(&mut self) {
		self.greeting = None;
	}

	pub fn set_text(&mut self, text: String) {
		self.text = Some(text);
	}

	pub fn with_text(mut self, text: String) -> V1MessageCustomText {
		self.text = Some(text);
		self
	}

	pub fn text(&self) -> Option<&String> {
		self.text.as_ref()
	}

	pub fn reset_text(&mut self) {
		self.text = None;
	}

	pub fn set_button_text(&mut self, button_text: String) {
		self.button_text = Some(button_text);
	}

	pub fn with_button_text(mut self, button_text: String) -> V1MessageCustomText {
		self.button_text = Some(button_text);
		self
	}

	pub fn button_text(&self) -> Option<&String> {
		self.button_text.as_ref()
	}

	pub fn reset_button_text(&mut self) {
		self.button_text = None;
	}

	pub fn set_footer_text(&mut self, footer_text: String) {
		self.footer_text = Some(footer_text);
	}

	pub fn with_footer_text(mut self, footer_text: String) -> V1MessageCustomText {
		self.footer_text = Some(footer_text);
		self
	}

	pub fn footer_text(&self) -> Option<&String> {
		self.footer_text.as_ref()
	}

	pub fn reset_footer_text(&mut self) {
		self.footer_text = None;
	}

	pub fn set_is_default(&mut self, is_default: bool) {
		self.is_default = Some(is_default);
	}

	pub fn with_is_default(mut self, is_default: bool) -> V1MessageCustomText {
		self.is_default = Some(is_default);
		self
	}

	pub fn is_default(&self) -> Option<&bool> {
		self.is_default.as_ref()
	}

	pub fn reset_is_default(&mut self) {
		self.is_default = None;
	}
}
