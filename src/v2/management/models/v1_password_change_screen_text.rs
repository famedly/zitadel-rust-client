/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1PasswordChangeScreenText {
	#[serde(rename = "title")]
	title: Option<String>,
	#[serde(rename = "description")]
	description: Option<String>,
	#[serde(rename = "oldPasswordLabel")]
	old_password_label: Option<String>,
	#[serde(rename = "newPasswordLabel")]
	new_password_label: Option<String>,
	#[serde(rename = "newPasswordConfirmLabel")]
	new_password_confirm_label: Option<String>,
	#[serde(rename = "cancelButtonText")]
	cancel_button_text: Option<String>,
	#[serde(rename = "nextButtonText")]
	next_button_text: Option<String>,
	#[serde(rename = "expiredDescription")]
	expired_description: Option<String>,
}

impl V1PasswordChangeScreenText {
	pub fn new() -> V1PasswordChangeScreenText {
		V1PasswordChangeScreenText {
			title: None,
			description: None,
			old_password_label: None,
			new_password_label: None,
			new_password_confirm_label: None,
			cancel_button_text: None,
			next_button_text: None,
			expired_description: None,
		}
	}

	pub fn set_title(&mut self, title: String) {
		self.title = Some(title);
	}

	pub fn with_title(mut self, title: String) -> V1PasswordChangeScreenText {
		self.title = Some(title);
		self
	}

	pub fn title(&self) -> Option<&String> {
		self.title.as_ref()
	}

	pub fn reset_title(&mut self) {
		self.title = None;
	}

	pub fn set_description(&mut self, description: String) {
		self.description = Some(description);
	}

	pub fn with_description(mut self, description: String) -> V1PasswordChangeScreenText {
		self.description = Some(description);
		self
	}

	pub fn description(&self) -> Option<&String> {
		self.description.as_ref()
	}

	pub fn reset_description(&mut self) {
		self.description = None;
	}

	pub fn set_old_password_label(&mut self, old_password_label: String) {
		self.old_password_label = Some(old_password_label);
	}

	pub fn with_old_password_label(
		mut self,
		old_password_label: String,
	) -> V1PasswordChangeScreenText {
		self.old_password_label = Some(old_password_label);
		self
	}

	pub fn old_password_label(&self) -> Option<&String> {
		self.old_password_label.as_ref()
	}

	pub fn reset_old_password_label(&mut self) {
		self.old_password_label = None;
	}

	pub fn set_new_password_label(&mut self, new_password_label: String) {
		self.new_password_label = Some(new_password_label);
	}

	pub fn with_new_password_label(
		mut self,
		new_password_label: String,
	) -> V1PasswordChangeScreenText {
		self.new_password_label = Some(new_password_label);
		self
	}

	pub fn new_password_label(&self) -> Option<&String> {
		self.new_password_label.as_ref()
	}

	pub fn reset_new_password_label(&mut self) {
		self.new_password_label = None;
	}

	pub fn set_new_password_confirm_label(&mut self, new_password_confirm_label: String) {
		self.new_password_confirm_label = Some(new_password_confirm_label);
	}

	pub fn with_new_password_confirm_label(
		mut self,
		new_password_confirm_label: String,
	) -> V1PasswordChangeScreenText {
		self.new_password_confirm_label = Some(new_password_confirm_label);
		self
	}

	pub fn new_password_confirm_label(&self) -> Option<&String> {
		self.new_password_confirm_label.as_ref()
	}

	pub fn reset_new_password_confirm_label(&mut self) {
		self.new_password_confirm_label = None;
	}

	pub fn set_cancel_button_text(&mut self, cancel_button_text: String) {
		self.cancel_button_text = Some(cancel_button_text);
	}

	pub fn with_cancel_button_text(
		mut self,
		cancel_button_text: String,
	) -> V1PasswordChangeScreenText {
		self.cancel_button_text = Some(cancel_button_text);
		self
	}

	pub fn cancel_button_text(&self) -> Option<&String> {
		self.cancel_button_text.as_ref()
	}

	pub fn reset_cancel_button_text(&mut self) {
		self.cancel_button_text = None;
	}

	pub fn set_next_button_text(&mut self, next_button_text: String) {
		self.next_button_text = Some(next_button_text);
	}

	pub fn with_next_button_text(mut self, next_button_text: String) -> V1PasswordChangeScreenText {
		self.next_button_text = Some(next_button_text);
		self
	}

	pub fn next_button_text(&self) -> Option<&String> {
		self.next_button_text.as_ref()
	}

	pub fn reset_next_button_text(&mut self) {
		self.next_button_text = None;
	}

	pub fn set_expired_description(&mut self, expired_description: String) {
		self.expired_description = Some(expired_description);
	}

	pub fn with_expired_description(
		mut self,
		expired_description: String,
	) -> V1PasswordChangeScreenText {
		self.expired_description = Some(expired_description);
		self
	}

	pub fn expired_description(&self) -> Option<&String> {
		self.expired_description.as_ref()
	}

	pub fn reset_expired_description(&mut self) {
		self.expired_description = None;
	}
}
