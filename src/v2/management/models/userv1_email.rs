/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct Userv1Email {
  /// email address of the user. (spec: https://tools.ietf.org/html/rfc2822#section-3.4.1)
  #[serde(rename = "email")]
  email: Option<String>,
  /// Is true if the user verified the email or if the email is managed outside ZITADEL
  #[serde(rename = "isEmailVerified")]
  is_email_verified: Option<bool>
}

impl Userv1Email {
  pub fn new() -> Userv1Email {
    Userv1Email {
      email: None,
      is_email_verified: None
    }
  }

  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> Userv1Email {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

  pub fn set_is_email_verified(&mut self, is_email_verified: bool) {
    self.is_email_verified = Some(is_email_verified);
  }

  pub fn with_is_email_verified(mut self, is_email_verified: bool) -> Userv1Email {
    self.is_email_verified = Some(is_email_verified);
    self
  }

  pub fn is_email_verified(&self) -> Option<&bool> {
    self.is_email_verified.as_ref()
  }

  pub fn reset_is_email_verified(&mut self) {
    self.is_email_verified = None;
  }

}



