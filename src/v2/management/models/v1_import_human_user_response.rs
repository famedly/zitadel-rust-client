/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1ImportHumanUserResponse {
	#[serde(rename = "userId")]
	user_id: Option<String>,
	#[serde(rename = "details")]
	details: Option<models::V1ObjectDetails>,
	#[serde(rename = "passwordlessRegistration")]
	passwordless_registration: Option<models::ImportHumanUserResponsePasswordlessRegistration>,
}

impl V1ImportHumanUserResponse {
	pub fn new() -> V1ImportHumanUserResponse {
		V1ImportHumanUserResponse { user_id: None, details: None, passwordless_registration: None }
	}

	pub fn set_user_id(&mut self, user_id: String) {
		self.user_id = Some(user_id);
	}

	pub fn with_user_id(mut self, user_id: String) -> V1ImportHumanUserResponse {
		self.user_id = Some(user_id);
		self
	}

	pub fn user_id(&self) -> Option<&String> {
		self.user_id.as_ref()
	}

	pub fn reset_user_id(&mut self) {
		self.user_id = None;
	}

	pub fn set_details(&mut self, details: models::V1ObjectDetails) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::V1ObjectDetails) -> V1ImportHumanUserResponse {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::V1ObjectDetails> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_passwordless_registration(
		&mut self,
		passwordless_registration: models::ImportHumanUserResponsePasswordlessRegistration,
	) {
		self.passwordless_registration = Some(passwordless_registration);
	}

	pub fn with_passwordless_registration(
		mut self,
		passwordless_registration: models::ImportHumanUserResponsePasswordlessRegistration,
	) -> V1ImportHumanUserResponse {
		self.passwordless_registration = Some(passwordless_registration);
		self
	}

	pub fn passwordless_registration(
		&self,
	) -> Option<&models::ImportHumanUserResponsePasswordlessRegistration> {
		self.passwordless_registration.as_ref()
	}

	pub fn reset_passwordless_registration(&mut self) {
		self.passwordless_registration = None;
	}
}
