/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1ManagementServiceUpdateLdapProviderBody {
	#[serde(rename = "name")]
	name: Option<String>,
	#[serde(rename = "servers")]
	servers: Option<Vec<String>>,
	#[serde(rename = "startTls")]
	start_tls: Option<bool>,
	#[serde(rename = "baseDn")]
	base_dn: Option<String>,
	#[serde(rename = "bindDn")]
	bind_dn: Option<String>,
	#[serde(rename = "bindPassword")]
	bind_password: Option<String>,
	#[serde(rename = "userBase")]
	user_base: Option<String>,
	#[serde(rename = "userObjectClasses")]
	user_object_classes: Option<Vec<String>>,
	#[serde(rename = "userFilters")]
	user_filters: Option<Vec<String>>,
	#[serde(rename = "timeout")]
	timeout: Option<String>,
	#[serde(rename = "attributes")]
	attributes: Option<models::V1LdapAttributes>,
	#[serde(rename = "providerOptions")]
	provider_options: Option<models::V1Options>,
}

impl V1ManagementServiceUpdateLdapProviderBody {
	pub fn new() -> V1ManagementServiceUpdateLdapProviderBody {
		V1ManagementServiceUpdateLdapProviderBody {
			name: None,
			servers: None,
			start_tls: None,
			base_dn: None,
			bind_dn: None,
			bind_password: None,
			user_base: None,
			user_object_classes: None,
			user_filters: None,
			timeout: None,
			attributes: None,
			provider_options: None,
		}
	}

	pub fn set_name(&mut self, name: String) {
		self.name = Some(name);
	}

	pub fn with_name(mut self, name: String) -> V1ManagementServiceUpdateLdapProviderBody {
		self.name = Some(name);
		self
	}

	pub fn name(&self) -> Option<&String> {
		self.name.as_ref()
	}

	pub fn reset_name(&mut self) {
		self.name = None;
	}

	pub fn set_servers(&mut self, servers: Vec<String>) {
		self.servers = Some(servers);
	}

	pub fn with_servers(
		mut self,
		servers: Vec<String>,
	) -> V1ManagementServiceUpdateLdapProviderBody {
		self.servers = Some(servers);
		self
	}

	pub fn servers(&self) -> Option<&Vec<String>> {
		self.servers.as_ref()
	}

	pub fn reset_servers(&mut self) {
		self.servers = None;
	}

	pub fn set_start_tls(&mut self, start_tls: bool) {
		self.start_tls = Some(start_tls);
	}

	pub fn with_start_tls(mut self, start_tls: bool) -> V1ManagementServiceUpdateLdapProviderBody {
		self.start_tls = Some(start_tls);
		self
	}

	pub fn start_tls(&self) -> Option<&bool> {
		self.start_tls.as_ref()
	}

	pub fn reset_start_tls(&mut self) {
		self.start_tls = None;
	}

	pub fn set_base_dn(&mut self, base_dn: String) {
		self.base_dn = Some(base_dn);
	}

	pub fn with_base_dn(mut self, base_dn: String) -> V1ManagementServiceUpdateLdapProviderBody {
		self.base_dn = Some(base_dn);
		self
	}

	pub fn base_dn(&self) -> Option<&String> {
		self.base_dn.as_ref()
	}

	pub fn reset_base_dn(&mut self) {
		self.base_dn = None;
	}

	pub fn set_bind_dn(&mut self, bind_dn: String) {
		self.bind_dn = Some(bind_dn);
	}

	pub fn with_bind_dn(mut self, bind_dn: String) -> V1ManagementServiceUpdateLdapProviderBody {
		self.bind_dn = Some(bind_dn);
		self
	}

	pub fn bind_dn(&self) -> Option<&String> {
		self.bind_dn.as_ref()
	}

	pub fn reset_bind_dn(&mut self) {
		self.bind_dn = None;
	}

	pub fn set_bind_password(&mut self, bind_password: String) {
		self.bind_password = Some(bind_password);
	}

	pub fn with_bind_password(
		mut self,
		bind_password: String,
	) -> V1ManagementServiceUpdateLdapProviderBody {
		self.bind_password = Some(bind_password);
		self
	}

	pub fn bind_password(&self) -> Option<&String> {
		self.bind_password.as_ref()
	}

	pub fn reset_bind_password(&mut self) {
		self.bind_password = None;
	}

	pub fn set_user_base(&mut self, user_base: String) {
		self.user_base = Some(user_base);
	}

	pub fn with_user_base(
		mut self,
		user_base: String,
	) -> V1ManagementServiceUpdateLdapProviderBody {
		self.user_base = Some(user_base);
		self
	}

	pub fn user_base(&self) -> Option<&String> {
		self.user_base.as_ref()
	}

	pub fn reset_user_base(&mut self) {
		self.user_base = None;
	}

	pub fn set_user_object_classes(&mut self, user_object_classes: Vec<String>) {
		self.user_object_classes = Some(user_object_classes);
	}

	pub fn with_user_object_classes(
		mut self,
		user_object_classes: Vec<String>,
	) -> V1ManagementServiceUpdateLdapProviderBody {
		self.user_object_classes = Some(user_object_classes);
		self
	}

	pub fn user_object_classes(&self) -> Option<&Vec<String>> {
		self.user_object_classes.as_ref()
	}

	pub fn reset_user_object_classes(&mut self) {
		self.user_object_classes = None;
	}

	pub fn set_user_filters(&mut self, user_filters: Vec<String>) {
		self.user_filters = Some(user_filters);
	}

	pub fn with_user_filters(
		mut self,
		user_filters: Vec<String>,
	) -> V1ManagementServiceUpdateLdapProviderBody {
		self.user_filters = Some(user_filters);
		self
	}

	pub fn user_filters(&self) -> Option<&Vec<String>> {
		self.user_filters.as_ref()
	}

	pub fn reset_user_filters(&mut self) {
		self.user_filters = None;
	}

	pub fn set_timeout(&mut self, timeout: String) {
		self.timeout = Some(timeout);
	}

	pub fn with_timeout(mut self, timeout: String) -> V1ManagementServiceUpdateLdapProviderBody {
		self.timeout = Some(timeout);
		self
	}

	pub fn timeout(&self) -> Option<&String> {
		self.timeout.as_ref()
	}

	pub fn reset_timeout(&mut self) {
		self.timeout = None;
	}

	pub fn set_attributes(&mut self, attributes: models::V1LdapAttributes) {
		self.attributes = Some(attributes);
	}

	pub fn with_attributes(
		mut self,
		attributes: models::V1LdapAttributes,
	) -> V1ManagementServiceUpdateLdapProviderBody {
		self.attributes = Some(attributes);
		self
	}

	pub fn attributes(&self) -> Option<&models::V1LdapAttributes> {
		self.attributes.as_ref()
	}

	pub fn reset_attributes(&mut self) {
		self.attributes = None;
	}

	pub fn set_provider_options(&mut self, provider_options: models::V1Options) {
		self.provider_options = Some(provider_options);
	}

	pub fn with_provider_options(
		mut self,
		provider_options: models::V1Options,
	) -> V1ManagementServiceUpdateLdapProviderBody {
		self.provider_options = Some(provider_options);
		self
	}

	pub fn provider_options(&self) -> Option<&models::V1Options> {
		self.provider_options.as_ref()
	}

	pub fn reset_provider_options(&mut self) {
		self.provider_options = None;
	}
}
