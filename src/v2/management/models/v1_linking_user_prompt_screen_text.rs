/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1LinkingUserPromptScreenText {
	#[serde(rename = "title")]
	title: Option<String>,
	#[serde(rename = "description")]
	description: Option<String>,
	#[serde(rename = "linkButtonText")]
	link_button_text: Option<String>,
	#[serde(rename = "otherButtonText")]
	other_button_text: Option<String>,
}

impl V1LinkingUserPromptScreenText {
	pub fn new() -> V1LinkingUserPromptScreenText {
		V1LinkingUserPromptScreenText {
			title: None,
			description: None,
			link_button_text: None,
			other_button_text: None,
		}
	}

	pub fn set_title(&mut self, title: String) {
		self.title = Some(title);
	}

	pub fn with_title(mut self, title: String) -> V1LinkingUserPromptScreenText {
		self.title = Some(title);
		self
	}

	pub fn title(&self) -> Option<&String> {
		self.title.as_ref()
	}

	pub fn reset_title(&mut self) {
		self.title = None;
	}

	pub fn set_description(&mut self, description: String) {
		self.description = Some(description);
	}

	pub fn with_description(mut self, description: String) -> V1LinkingUserPromptScreenText {
		self.description = Some(description);
		self
	}

	pub fn description(&self) -> Option<&String> {
		self.description.as_ref()
	}

	pub fn reset_description(&mut self) {
		self.description = None;
	}

	pub fn set_link_button_text(&mut self, link_button_text: String) {
		self.link_button_text = Some(link_button_text);
	}

	pub fn with_link_button_text(
		mut self,
		link_button_text: String,
	) -> V1LinkingUserPromptScreenText {
		self.link_button_text = Some(link_button_text);
		self
	}

	pub fn link_button_text(&self) -> Option<&String> {
		self.link_button_text.as_ref()
	}

	pub fn reset_link_button_text(&mut self) {
		self.link_button_text = None;
	}

	pub fn set_other_button_text(&mut self, other_button_text: String) {
		self.other_button_text = Some(other_button_text);
	}

	pub fn with_other_button_text(
		mut self,
		other_button_text: String,
	) -> V1LinkingUserPromptScreenText {
		self.other_button_text = Some(other_button_text);
		self
	}

	pub fn other_button_text(&self) -> Option<&String> {
		self.other_button_text.as_ref()
	}

	pub fn reset_other_button_text(&mut self) {
		self.other_button_text = None;
	}
}
