// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Management API
 *
 * The management API is as the name states the interface where systems can
 * mutate IAM objects like organizations, projects, clients, users and so on
 * if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::v2::management::models;

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct V1UserGrantOrgDomainQuery {
	#[serde(rename = "orgDomain")]
	org_domain: Option<String>,
	/// defines which text equality method is used
	#[serde(rename = "method")]
	method: Option<models::V1TextQueryMethod>,
}

impl V1UserGrantOrgDomainQuery {
	pub fn new() -> V1UserGrantOrgDomainQuery {
		V1UserGrantOrgDomainQuery { org_domain: None, method: None }
	}

	pub fn set_org_domain(&mut self, org_domain: String) {
		self.org_domain = Some(org_domain);
	}

	pub fn with_org_domain(mut self, org_domain: String) -> V1UserGrantOrgDomainQuery {
		self.org_domain = Some(org_domain);
		self
	}

	pub fn org_domain(&self) -> Option<&String> {
		self.org_domain.as_ref()
	}

	pub fn reset_org_domain(&mut self) {
		self.org_domain = None;
	}

	pub fn set_method(&mut self, method: models::V1TextQueryMethod) {
		self.method = Some(method);
	}

	pub fn with_method(mut self, method: models::V1TextQueryMethod) -> V1UserGrantOrgDomainQuery {
		self.method = Some(method);
		self
	}

	pub fn method(&self) -> Option<&models::V1TextQueryMethod> {
		self.method.as_ref()
	}

	pub fn reset_method(&mut self) {
		self.method = None;
	}
}
