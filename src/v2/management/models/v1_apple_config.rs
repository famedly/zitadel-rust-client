/* 
 * Management API
 *
 * The management API is as the name states the interface where systems can mutate IAM objects like organizations, projects, clients, users and so on if they have the necessary access rights.
 *
 * OpenAPI spec version: 1.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;
use crate::v2::management::models;
use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct V1AppleConfig {
  /// Client id (App ID or Service ID) provided by Apple
  #[serde(rename = "clientId")]
  client_id: Option<String>,
  /// Team ID provided by Apple
  #[serde(rename = "teamId")]
  team_id: Option<String>,
  /// ID of the private key generated by Apple
  #[serde(rename = "keyId")]
  key_id: Option<String>,
  /// the scopes requested by ZITADEL during the request to Apple
  #[serde(rename = "scopes")]
  scopes: Option<Vec<String>>
}

impl V1AppleConfig {
  pub fn new() -> V1AppleConfig {
    V1AppleConfig {
      client_id: None,
      team_id: None,
      key_id: None,
      scopes: None
    }
  }

  pub fn set_client_id(&mut self, client_id: String) {
    self.client_id = Some(client_id);
  }

  pub fn with_client_id(mut self, client_id: String) -> V1AppleConfig {
    self.client_id = Some(client_id);
    self
  }

  pub fn client_id(&self) -> Option<&String> {
    self.client_id.as_ref()
  }

  pub fn reset_client_id(&mut self) {
    self.client_id = None;
  }

  pub fn set_team_id(&mut self, team_id: String) {
    self.team_id = Some(team_id);
  }

  pub fn with_team_id(mut self, team_id: String) -> V1AppleConfig {
    self.team_id = Some(team_id);
    self
  }

  pub fn team_id(&self) -> Option<&String> {
    self.team_id.as_ref()
  }

  pub fn reset_team_id(&mut self) {
    self.team_id = None;
  }

  pub fn set_key_id(&mut self, key_id: String) {
    self.key_id = Some(key_id);
  }

  pub fn with_key_id(mut self, key_id: String) -> V1AppleConfig {
    self.key_id = Some(key_id);
    self
  }

  pub fn key_id(&self) -> Option<&String> {
    self.key_id.as_ref()
  }

  pub fn reset_key_id(&mut self) {
    self.key_id = None;
  }

  pub fn set_scopes(&mut self, scopes: Vec<String>) {
    self.scopes = Some(scopes);
  }

  pub fn with_scopes(mut self, scopes: Vec<String>) -> V1AppleConfig {
    self.scopes = Some(scopes);
    self
  }

  pub fn scopes(&self) -> Option<&Vec<String>> {
    self.scopes.as_ref()
  }

  pub fn reset_scopes(&mut self) {
    self.scopes = None;
  }

}



