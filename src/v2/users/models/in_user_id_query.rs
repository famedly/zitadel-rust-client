/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize, Default, Clone)]
pub struct InUserIdQuery {
	/// the ids of the users to include
	#[serde(rename = "userIds")]
	user_ids: Option<Vec<String>>,
}

impl InUserIdQuery {
	/// Query for users with ID in list of IDs.
	pub fn new() -> InUserIdQuery {
		InUserIdQuery { user_ids: None }
	}

	pub fn set_user_ids(&mut self, user_ids: Vec<String>) {
		self.user_ids = Some(user_ids);
	}

	pub fn with_user_ids(mut self, user_ids: Vec<String>) -> InUserIdQuery {
		self.user_ids = Some(user_ids);
		self
	}

	pub fn user_ids(&self) -> Option<&Vec<String>> {
		self.user_ids.as_ref()
	}

	pub fn reset_user_ids(&mut self) {
		self.user_ids = None;
	}
}
