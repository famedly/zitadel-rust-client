// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize, Default, Clone)]
pub struct RedirectUrls {
	/// URL on which the user will be redirected after a successful login
	#[serde(rename = "successUrl")]
	success_url: Option<String>,
	/// URL on which the user will be redirected after a failed login
	#[serde(rename = "failureUrl")]
	failure_url: Option<String>,
}

impl RedirectUrls {
	pub fn new() -> RedirectUrls {
		RedirectUrls { success_url: None, failure_url: None }
	}

	pub fn set_success_url(&mut self, success_url: String) {
		self.success_url = Some(success_url);
	}

	pub fn with_success_url(mut self, success_url: String) -> RedirectUrls {
		self.success_url = Some(success_url);
		self
	}

	pub fn success_url(&self) -> Option<&String> {
		self.success_url.as_ref()
	}

	pub fn reset_success_url(&mut self) {
		self.success_url = None;
	}

	pub fn set_failure_url(&mut self, failure_url: String) {
		self.failure_url = Some(failure_url);
	}

	pub fn with_failure_url(mut self, failure_url: String) -> RedirectUrls {
		self.failure_url = Some(failure_url);
		self
	}

	pub fn failure_url(&self) -> Option<&String> {
		self.failure_url.as_ref()
	}

	pub fn reset_failure_url(&mut self) {
		self.failure_url = None;
	}
}
