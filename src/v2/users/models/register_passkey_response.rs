// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
use serde_json::Value;

use crate::v2::users::models;

#[derive(Debug, Serialize, Deserialize, Default, Clone)]
pub struct RegisterPasskeyResponse {
	#[serde(rename = "details")]
	details: Option<models::Details>,
	#[serde(rename = "passkeyId")]
	passkey_id: Option<String>,
	/// Options for Credential Creation (dictionary PublicKeyCredentialCreationOptions). Generated helper methods transform the field to JSON, for use in a WebauthN client. See also:  https://www.w3.org/TR/webauthn/#dictdef-publickeycredentialcreationoptions
	#[serde(rename = "publicKeyCredentialCreationOptions")]
	public_key_credential_creation_options: Option<Value>,
}

impl RegisterPasskeyResponse {
	pub fn new() -> RegisterPasskeyResponse {
		RegisterPasskeyResponse {
			details: None,
			passkey_id: None,
			public_key_credential_creation_options: None,
		}
	}

	pub fn set_details(&mut self, details: models::Details) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::Details) -> RegisterPasskeyResponse {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::Details> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_passkey_id(&mut self, passkey_id: String) {
		self.passkey_id = Some(passkey_id);
	}

	pub fn with_passkey_id(mut self, passkey_id: String) -> RegisterPasskeyResponse {
		self.passkey_id = Some(passkey_id);
		self
	}

	pub fn passkey_id(&self) -> Option<&String> {
		self.passkey_id.as_ref()
	}

	pub fn reset_passkey_id(&mut self) {
		self.passkey_id = None;
	}

	pub fn set_public_key_credential_creation_options(
		&mut self,
		public_key_credential_creation_options: Value,
	) {
		self.public_key_credential_creation_options = Some(public_key_credential_creation_options);
	}

	pub fn with_public_key_credential_creation_options(
		mut self,
		public_key_credential_creation_options: Value,
	) -> RegisterPasskeyResponse {
		self.public_key_credential_creation_options = Some(public_key_credential_creation_options);
		self
	}

	pub fn public_key_credential_creation_options(&self) -> Option<&Value> {
		self.public_key_credential_creation_options.as_ref()
	}

	pub fn reset_public_key_credential_creation_options(&mut self) {
		self.public_key_credential_creation_options = None;
	}
}
