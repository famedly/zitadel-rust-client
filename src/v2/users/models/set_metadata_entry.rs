/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use base64::prelude::{Engine, BASE64_STANDARD};
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct SetMetadataEntry {
	#[serde(rename = "key")]
	key: String,
	/// The value has to be base64 encoded.
	#[serde(rename = "value")]
	value: String,
}

impl SetMetadataEntry {
	pub fn new(key: String, value: String) -> SetMetadataEntry {
		SetMetadataEntry { key, value: BASE64_STANDARD.encode(value) }
	}

	pub fn set_key(&mut self, key: String) {
		self.key = key;
	}

	pub fn with_key(mut self, key: String) -> SetMetadataEntry {
		self.key = key;
		self
	}

	pub fn key(&self) -> &String {
		&self.key
	}

	pub fn set_value(&mut self, value: String) {
		self.value = BASE64_STANDARD.encode(value);
	}

	pub fn with_value(mut self, value: String) -> SetMetadataEntry {
		self.value = BASE64_STANDARD.encode(value);
		self
	}

	pub fn value(&self) -> Option<String> {
		BASE64_STANDARD.decode(&self.value).ok().and_then(|value| String::from_utf8(value).ok())
	}
}
