/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};

use crate::v2::users::models;

#[derive(Debug, Serialize, Deserialize, Default)]
pub struct StartIdentityProviderIntentResponse {
	#[serde(rename = "details")]
	details: Option<models::Details>,
	/// URL to which the client should redirect
	#[serde(rename = "authUrl")]
	auth_url: Option<String>,
	/// IDP Intent information
	#[serde(rename = "idpIntent")]
	idp_intent: Option<models::IdpIntent>,
	/// POST call information
	#[serde(rename = "postForm")]
	post_form: Option<String>,
}

impl StartIdentityProviderIntentResponse {
	pub fn new() -> StartIdentityProviderIntentResponse {
		StartIdentityProviderIntentResponse {
			details: None,
			auth_url: None,
			idp_intent: None,
			post_form: None,
		}
	}

	pub fn set_details(&mut self, details: models::Details) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::Details) -> StartIdentityProviderIntentResponse {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::Details> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_auth_url(&mut self, auth_url: String) {
		self.auth_url = Some(auth_url);
	}

	pub fn with_auth_url(mut self, auth_url: String) -> StartIdentityProviderIntentResponse {
		self.auth_url = Some(auth_url);
		self
	}

	pub fn auth_url(&self) -> Option<&String> {
		self.auth_url.as_ref()
	}

	pub fn reset_auth_url(&mut self) {
		self.auth_url = None;
	}

	pub fn set_idp_intent(&mut self, idp_intent: models::IdpIntent) {
		self.idp_intent = Some(idp_intent);
	}

	pub fn with_idp_intent(
		mut self,
		idp_intent: models::IdpIntent,
	) -> StartIdentityProviderIntentResponse {
		self.idp_intent = Some(idp_intent);
		self
	}

	pub fn idp_intent(&self) -> Option<&models::IdpIntent> {
		self.idp_intent.as_ref()
	}

	pub fn reset_idp_intent(&mut self) {
		self.idp_intent = None;
	}

	pub fn set_post_form(&mut self, post_form: String) {
		self.post_form = Some(post_form);
	}

	pub fn with_post_form(mut self, post_form: String) -> StartIdentityProviderIntentResponse {
		self.post_form = Some(post_form);
		self
	}

	pub fn post_form(&self) -> Option<&String> {
		self.post_form.as_ref()
	}

	pub fn reset_post_form(&mut self) {
		self.post_form = None;
	}
}
