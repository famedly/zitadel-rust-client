/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
use serde_json::Value;

use crate::v2::users::models;

#[derive(Debug, Serialize, Deserialize, Default)]
pub struct IdpInformation {
	/// OAuth/OIDC access (and id_token) returned by the identity provider
	#[serde(rename = "oauth")]
	oauth: Option<models::IdpoAuthAccessInformation>,
	/// LDAP entity attributes returned by the identity provider
	#[serde(rename = "ldap")]
	ldap: Option<models::IdpldapAccessInformation>,
	/// SAMLResponse returned by the identity provider
	#[serde(rename = "saml")]
	saml: Option<models::IdpsamlAccessInformation>,
	/// ID of the identity provider
	#[serde(rename = "idpId")]
	idp_id: Option<String>,
	/// ID of the user of the identity provider
	#[serde(rename = "userId")]
	user_id: Option<String>,
	/// username of the user of the identity provider
	#[serde(rename = "userName")]
	user_name: Option<String>,
	/// complete information returned by the identity provider
	#[serde(rename = "rawInformation")]
	raw_information: Option<Value>,
}

impl IdpInformation {
	pub fn new() -> IdpInformation {
		IdpInformation {
			oauth: None,
			ldap: None,
			saml: None,
			idp_id: None,
			user_id: None,
			user_name: None,
			raw_information: None,
		}
	}

	pub fn set_oauth(&mut self, oauth: models::IdpoAuthAccessInformation) {
		self.oauth = Some(oauth);
	}

	pub fn with_oauth(mut self, oauth: models::IdpoAuthAccessInformation) -> IdpInformation {
		self.oauth = Some(oauth);
		self
	}

	pub fn oauth(&self) -> Option<&models::IdpoAuthAccessInformation> {
		self.oauth.as_ref()
	}

	pub fn reset_oauth(&mut self) {
		self.oauth = None;
	}

	pub fn set_ldap(&mut self, ldap: models::IdpldapAccessInformation) {
		self.ldap = Some(ldap);
	}

	pub fn with_ldap(mut self, ldap: models::IdpldapAccessInformation) -> IdpInformation {
		self.ldap = Some(ldap);
		self
	}

	pub fn ldap(&self) -> Option<&models::IdpldapAccessInformation> {
		self.ldap.as_ref()
	}

	pub fn reset_ldap(&mut self) {
		self.ldap = None;
	}

	pub fn set_saml(&mut self, saml: models::IdpsamlAccessInformation) {
		self.saml = Some(saml);
	}

	pub fn with_saml(mut self, saml: models::IdpsamlAccessInformation) -> IdpInformation {
		self.saml = Some(saml);
		self
	}

	pub fn saml(&self) -> Option<&models::IdpsamlAccessInformation> {
		self.saml.as_ref()
	}

	pub fn reset_saml(&mut self) {
		self.saml = None;
	}

	pub fn set_idp_id(&mut self, idp_id: String) {
		self.idp_id = Some(idp_id);
	}

	pub fn with_idp_id(mut self, idp_id: String) -> IdpInformation {
		self.idp_id = Some(idp_id);
		self
	}

	pub fn idp_id(&self) -> Option<&String> {
		self.idp_id.as_ref()
	}

	pub fn reset_idp_id(&mut self) {
		self.idp_id = None;
	}

	pub fn set_user_id(&mut self, user_id: String) {
		self.user_id = Some(user_id);
	}

	pub fn with_user_id(mut self, user_id: String) -> IdpInformation {
		self.user_id = Some(user_id);
		self
	}

	pub fn user_id(&self) -> Option<&String> {
		self.user_id.as_ref()
	}

	pub fn reset_user_id(&mut self) {
		self.user_id = None;
	}

	pub fn set_user_name(&mut self, user_name: String) {
		self.user_name = Some(user_name);
	}

	pub fn with_user_name(mut self, user_name: String) -> IdpInformation {
		self.user_name = Some(user_name);
		self
	}

	pub fn user_name(&self) -> Option<&String> {
		self.user_name.as_ref()
	}

	pub fn reset_user_name(&mut self) {
		self.user_name = None;
	}

	pub fn set_raw_information(&mut self, raw_information: Value) {
		self.raw_information = Some(raw_information);
	}

	pub fn with_raw_information(mut self, raw_information: Value) -> IdpInformation {
		self.raw_information = Some(raw_information);
		self
	}

	pub fn raw_information(&self) -> Option<&Value> {
		self.raw_information.as_ref()
	}

	pub fn reset_raw_information(&mut self) {
		self.raw_information = None;
	}
}
