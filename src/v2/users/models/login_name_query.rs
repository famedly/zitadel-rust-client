/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};

use crate::v2::users::models;

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct LoginNameQuery {
	#[serde(rename = "loginName")]
	login_name: String,
	/// defines which text equality method is used
	#[serde(rename = "method")]
	method: Option<models::TextQueryMethod>,
}

impl LoginNameQuery {
	/// Query for users with a specific state.
	pub fn new(login_name: String) -> LoginNameQuery {
		LoginNameQuery { login_name, method: None }
	}

	pub fn set_login_name(&mut self, login_name: String) {
		self.login_name = login_name;
	}

	pub fn with_login_name(mut self, login_name: String) -> LoginNameQuery {
		self.login_name = login_name;
		self
	}

	pub fn login_name(&self) -> &String {
		&self.login_name
	}

	pub fn set_method(&mut self, method: models::TextQueryMethod) {
		self.method = Some(method);
	}

	pub fn with_method(mut self, method: models::TextQueryMethod) -> LoginNameQuery {
		self.method = Some(method);
		self
	}

	pub fn method(&self) -> Option<&models::TextQueryMethod> {
		self.method.as_ref()
	}

	pub fn reset_method(&mut self) {
		self.method = None;
	}
}
