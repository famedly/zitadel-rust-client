/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TextQueryMethod {
	#[serde(rename = "TEXT_QUERY_METHOD_EQUALS")]
	Equals,
	#[serde(rename = "TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE")]
	EqualsIgnoreCase,
	#[serde(rename = "TEXT_QUERY_METHOD_STARTS_WITH")]
	StartsWith,
	#[serde(rename = "TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE")]
	StartsWithIgnoreCase,
	#[serde(rename = "TEXT_QUERY_METHOD_CONTAINS")]
	Contains,
	#[serde(rename = "TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE")]
	ContainsIgnoreCase,
	#[serde(rename = "TEXT_QUERY_METHOD_ENDS_WITH")]
	EndsWith,
	#[serde(rename = "TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE")]
	EndsWithIgnoreCase,
}

impl std::fmt::Display for TextQueryMethod {
	fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
		match self {
			Self::Equals => write!(f, "TEXT_QUERY_METHOD_EQUALS"),
			Self::EqualsIgnoreCase => write!(f, "TEXT_QUERY_METHOD_EQUALS_IGNORE_CASE"),
			Self::StartsWith => write!(f, "TEXT_QUERY_METHOD_STARTS_WITH"),
			Self::StartsWithIgnoreCase => write!(f, "TEXT_QUERY_METHOD_STARTS_WITH_IGNORE_CASE"),
			Self::Contains => write!(f, "TEXT_QUERY_METHOD_CONTAINS"),
			Self::ContainsIgnoreCase => write!(f, "TEXT_QUERY_METHOD_CONTAINS_IGNORE_CASE"),
			Self::EndsWith => write!(f, "TEXT_QUERY_METHOD_ENDS_WITH"),
			Self::EndsWithIgnoreCase => write!(f, "TEXT_QUERY_METHOD_ENDS_WITH_IGNORE_CASE"),
		}
	}
}

impl Default for TextQueryMethod {
	fn default() -> TextQueryMethod {
		Self::Equals
	}
}
