// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};

use crate::v2::users::models;

#[derive(Debug, Serialize, Deserialize, Default, Clone)]
pub struct StartIdentityProviderIntentRequest {
	/// ID for existing identity provider
	#[serde(rename = "idpId")]
	idp_id: Option<String>,
	#[serde(rename = "urls")]
	urls: Option<models::RedirectUrls>,
	#[serde(rename = "ldap")]
	ldap: Option<models::LdapCredentials>,
}

impl StartIdentityProviderIntentRequest {
	pub fn new() -> StartIdentityProviderIntentRequest {
		StartIdentityProviderIntentRequest { idp_id: None, urls: None, ldap: None }
	}

	pub fn set_idp_id(&mut self, idp_id: String) {
		self.idp_id = Some(idp_id);
	}

	pub fn with_idp_id(mut self, idp_id: String) -> StartIdentityProviderIntentRequest {
		self.idp_id = Some(idp_id);
		self
	}

	pub fn idp_id(&self) -> Option<&String> {
		self.idp_id.as_ref()
	}

	pub fn reset_idp_id(&mut self) {
		self.idp_id = None;
	}

	pub fn set_urls(&mut self, urls: models::RedirectUrls) {
		self.urls = Some(urls);
	}

	pub fn with_urls(mut self, urls: models::RedirectUrls) -> StartIdentityProviderIntentRequest {
		self.urls = Some(urls);
		self
	}

	pub fn urls(&self) -> Option<&models::RedirectUrls> {
		self.urls.as_ref()
	}

	pub fn reset_urls(&mut self) {
		self.urls = None;
	}

	pub fn set_ldap(&mut self, ldap: models::LdapCredentials) {
		self.ldap = Some(ldap);
	}

	pub fn with_ldap(
		mut self,
		ldap: models::LdapCredentials,
	) -> StartIdentityProviderIntentRequest {
		self.ldap = Some(ldap);
		self
	}

	pub fn ldap(&self) -> Option<&models::LdapCredentials> {
		self.ldap.as_ref()
	}

	pub fn reset_ldap(&mut self) {
		self.ldap = None;
	}
}
