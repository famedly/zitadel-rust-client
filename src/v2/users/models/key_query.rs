// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};

use crate::v2::users::models;

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct KeyQuery {
	#[serde(rename = "keyQuery")]
	key_query: KeyQueryInner,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
struct KeyQueryInner {
	#[serde(rename = "key")]
	key: String,
	/// defines which text equality method is used
	#[serde(rename = "method")]
	method: Option<models::TextQueryMethod>,
}

impl KeyQuery {
	/// Query for users with a specific display name.
	pub fn new(key: String) -> KeyQuery {
		KeyQuery { key_query: KeyQueryInner { key, method: None } }
	}

	pub fn set_key(&mut self, key: String) {
		self.key_query.key = key;
	}

	pub fn with_key(mut self, key: String) -> KeyQuery {
		self.key_query.key = key;
		self
	}

	pub fn key(&self) -> &String {
		&self.key_query.key
	}

	pub fn set_method(&mut self, method: models::TextQueryMethod) {
		self.key_query.method = Some(method);
	}

	pub fn with_method(mut self, method: models::TextQueryMethod) -> KeyQuery {
		self.key_query.method = Some(method);
		self
	}

	pub fn method(&self) -> Option<&models::TextQueryMethod> {
		self.key_query.method.as_ref()
	}

	pub fn reset_method(&mut self) {
		self.key_query.method = None;
	}
}
