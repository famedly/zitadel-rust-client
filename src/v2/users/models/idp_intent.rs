// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize, Default, Clone)]
pub struct IdpIntent {
	/// ID of the IDP intent
	#[serde(rename = "idpIntentId")]
	idp_intent_id: Option<String>,
	/// token of the IDP intent
	#[serde(rename = "idpIntentToken")]
	idp_intent_token: Option<String>,
	/// ID of the ZITADEL user if external user already linked
	#[serde(rename = "userId")]
	user_id: Option<String>,
}

impl IdpIntent {
	pub fn new() -> IdpIntent {
		IdpIntent { idp_intent_id: None, idp_intent_token: None, user_id: None }
	}

	pub fn set_idp_intent_id(&mut self, idp_intent_id: String) {
		self.idp_intent_id = Some(idp_intent_id);
	}

	pub fn with_idp_intent_id(mut self, idp_intent_id: String) -> IdpIntent {
		self.idp_intent_id = Some(idp_intent_id);
		self
	}

	pub fn idp_intent_id(&self) -> Option<&String> {
		self.idp_intent_id.as_ref()
	}

	pub fn reset_idp_intent_id(&mut self) {
		self.idp_intent_id = None;
	}

	pub fn set_idp_intent_token(&mut self, idp_intent_token: String) {
		self.idp_intent_token = Some(idp_intent_token);
	}

	pub fn with_idp_intent_token(mut self, idp_intent_token: String) -> IdpIntent {
		self.idp_intent_token = Some(idp_intent_token);
		self
	}

	pub fn idp_intent_token(&self) -> Option<&String> {
		self.idp_intent_token.as_ref()
	}

	pub fn reset_idp_intent_token(&mut self) {
		self.idp_intent_token = None;
	}

	pub fn set_user_id(&mut self, user_id: String) {
		self.user_id = Some(user_id);
	}

	pub fn with_user_id(mut self, user_id: String) -> IdpIntent {
		self.user_id = Some(user_id);
		self
	}

	pub fn user_id(&self) -> Option<&String> {
		self.user_id.as_ref()
	}

	pub fn reset_user_id(&mut self) {
		self.user_id = None;
	}
}
