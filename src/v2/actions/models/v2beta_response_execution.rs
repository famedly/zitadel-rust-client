// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Action Service
 *
 * This API is intended to manage custom executions (previously known as
 * actions) in a ZITADEL instance. This service is in beta state. It can AND
 * will continue breaking until a stable version is released.
 *
 * OpenAPI spec version: 2.0-beta
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct V2betaResponseExecution {
	/// GRPC-method as condition.
	#[serde(rename = "method")]
	method: Option<String>,
	/// GRPC-service as condition.
	#[serde(rename = "service")]
	service: Option<String>,
	/// All calls to any available services and methods as condition.
	#[serde(rename = "all")]
	all: Option<bool>,
}

impl V2betaResponseExecution {
	pub fn new() -> V2betaResponseExecution {
		V2betaResponseExecution { method: None, service: None, all: None }
	}

	pub fn set_method(&mut self, method: String) {
		self.method = Some(method);
	}

	pub fn with_method(mut self, method: String) -> V2betaResponseExecution {
		self.method = Some(method);
		self
	}

	pub fn method(&self) -> Option<&String> {
		self.method.as_ref()
	}

	pub fn reset_method(&mut self) {
		self.method = None;
	}

	pub fn set_service(&mut self, service: String) {
		self.service = Some(service);
	}

	pub fn with_service(mut self, service: String) -> V2betaResponseExecution {
		self.service = Some(service);
		self
	}

	pub fn service(&self) -> Option<&String> {
		self.service.as_ref()
	}

	pub fn reset_service(&mut self) {
		self.service = None;
	}

	pub fn set_all(&mut self, all: bool) {
		self.all = Some(all);
	}

	pub fn with_all(mut self, all: bool) -> V2betaResponseExecution {
		self.all = Some(all);
		self
	}

	pub fn all(&self) -> Option<&bool> {
		self.all.as_ref()
	}

	pub fn reset_all(&mut self) {
		self.all = None;
	}
}
