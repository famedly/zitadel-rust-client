// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Action Service
 *
 * This API is intended to manage custom executions (previously known as
 * actions) in a ZITADEL instance. This service is in beta state. It can AND
 * will continue breaking until a stable version is released.
 *
 * OpenAPI spec version: 2.0-beta
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct V2betaPaginationRequest {
	/// Starting point for retrieval, in combination of offset used to query a
	/// set list of objects.
	#[serde(rename = "offset")]
	offset: Option<String>,
	/// limit is the maximum amount of objects returned. The default is set to
	/// 100 with a maximum of 1000 in the runtime configuration. If the limit
	/// exceeds the maximum configured ZITADEL will throw an error. If no limit
	/// is present the default is taken.
	#[serde(rename = "limit")]
	limit: Option<i64>,
	/// Asc is the sorting order. If true the list is sorted ascending, if false
	/// the list is sorted descending. The default is descending.
	#[serde(rename = "asc")]
	asc: Option<bool>,
}

impl V2betaPaginationRequest {
	pub fn new() -> V2betaPaginationRequest {
		V2betaPaginationRequest { offset: None, limit: None, asc: None }
	}

	pub fn set_offset(&mut self, offset: String) {
		self.offset = Some(offset);
	}

	pub fn with_offset(mut self, offset: String) -> V2betaPaginationRequest {
		self.offset = Some(offset);
		self
	}

	pub fn offset(&self) -> Option<&String> {
		self.offset.as_ref()
	}

	pub fn reset_offset(&mut self) {
		self.offset = None;
	}

	pub fn set_limit(&mut self, limit: i64) {
		self.limit = Some(limit);
	}

	pub fn with_limit(mut self, limit: i64) -> V2betaPaginationRequest {
		self.limit = Some(limit);
		self
	}

	pub fn limit(&self) -> Option<&i64> {
		self.limit.as_ref()
	}

	pub fn reset_limit(&mut self) {
		self.limit = None;
	}

	pub fn set_asc(&mut self, asc: bool) {
		self.asc = Some(asc);
	}

	pub fn with_asc(mut self, asc: bool) -> V2betaPaginationRequest {
		self.asc = Some(asc);
		self
	}

	pub fn asc(&self) -> Option<&bool> {
		self.asc.as_ref()
	}

	pub fn reset_asc(&mut self) {
		self.asc = None;
	}
}
