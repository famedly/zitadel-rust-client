/*
 * Action Service
 *
 * This API is intended to manage custom executions (previously known as
 * actions) in a ZITADEL instance. This service is in beta state. It can AND
 * will continue breaking until a stable version is released.
 *
 * OpenAPI spec version: 2.0-beta
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct V2betaTargetSearchFilter {
	#[serde(rename = "targetNameFilter")]
	target_name_filter: Option<super::V2betaTargetNameFilter>,
	#[serde(rename = "inTargetIdsFilter")]
	in_target_ids_filter: Option<super::V2betaInTargetIdsFilter>,
}

impl V2betaTargetSearchFilter {
	pub fn new() -> V2betaTargetSearchFilter {
		V2betaTargetSearchFilter { target_name_filter: None, in_target_ids_filter: None }
	}

	pub fn set_target_name_filter(&mut self, target_name_filter: super::V2betaTargetNameFilter) {
		self.target_name_filter = Some(target_name_filter);
	}

	pub fn with_target_name_filter(
		mut self,
		target_name_filter: super::V2betaTargetNameFilter,
	) -> V2betaTargetSearchFilter {
		self.target_name_filter = Some(target_name_filter);
		self
	}

	pub fn target_name_filter(&self) -> Option<&super::V2betaTargetNameFilter> {
		self.target_name_filter.as_ref()
	}

	pub fn reset_target_name_filter(&mut self) {
		self.target_name_filter = None;
	}

	pub fn set_in_target_ids_filter(
		&mut self,
		in_target_ids_filter: super::V2betaInTargetIdsFilter,
	) {
		self.in_target_ids_filter = Some(in_target_ids_filter);
	}

	pub fn with_in_target_ids_filter(
		mut self,
		in_target_ids_filter: super::V2betaInTargetIdsFilter,
	) -> V2betaTargetSearchFilter {
		self.in_target_ids_filter = Some(in_target_ids_filter);
		self
	}

	pub fn in_target_ids_filter(&self) -> Option<&super::V2betaInTargetIdsFilter> {
		self.in_target_ids_filter.as_ref()
	}

	pub fn reset_in_target_ids_filter(&mut self) {
		self.in_target_ids_filter = None;
	}
}
