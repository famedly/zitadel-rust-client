// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Action Service
 *
 * This API is intended to manage custom executions (previously known as
 * actions) in a ZITADEL instance. This service is in beta state. It can AND
 * will continue breaking until a stable version is released.
 *
 * OpenAPI spec version: 2.0-beta
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct V2betaInConditionsFilter {
	/// Defines the conditions to query for.
	#[serde(rename = "conditions")]
	conditions: Option<Vec<super::V2betaCondition>>,
}

impl V2betaInConditionsFilter {
	pub fn new() -> V2betaInConditionsFilter {
		V2betaInConditionsFilter { conditions: None }
	}

	pub fn set_conditions(&mut self, conditions: Vec<super::V2betaCondition>) {
		self.conditions = Some(conditions);
	}

	pub fn with_conditions(
		mut self,
		conditions: Vec<super::V2betaCondition>,
	) -> V2betaInConditionsFilter {
		self.conditions = Some(conditions);
		self
	}

	pub fn conditions(&self) -> Option<&Vec<super::V2betaCondition>> {
		self.conditions.as_ref()
	}

	pub fn reset_conditions(&mut self) {
		self.conditions = None;
	}
}
