// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Action Service
 *
 * This API is intended to manage custom executions (previously known as
 * actions) in a ZITADEL instance. This service is in beta state. It can AND
 * will continue breaking until a stable version is released.
 *
 * OpenAPI spec version: 2.0-beta
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct V2betaSetExecutionRequest {
	/// Condition defining when the execution should be used.
	#[serde(rename = "condition")]
	condition: Option<super::V2betaCondition>,
	/// Ordered list of targets called during the execution.
	#[serde(rename = "targets")]
	targets: Option<Vec<String>>,
}

impl V2betaSetExecutionRequest {
	pub fn new() -> V2betaSetExecutionRequest {
		V2betaSetExecutionRequest { condition: None, targets: None }
	}

	pub fn set_condition(&mut self, condition: super::V2betaCondition) {
		self.condition = Some(condition);
	}

	pub fn with_condition(
		mut self,
		condition: super::V2betaCondition,
	) -> V2betaSetExecutionRequest {
		self.condition = Some(condition);
		self
	}

	pub fn condition(&self) -> Option<&super::V2betaCondition> {
		self.condition.as_ref()
	}

	pub fn reset_condition(&mut self) {
		self.condition = None;
	}

	pub fn set_targets(&mut self, targets: Vec<String>) {
		self.targets = Some(targets);
	}

	pub fn with_targets(mut self, targets: Vec<String>) -> V2betaSetExecutionRequest {
		self.targets = Some(targets);
		self
	}

	pub fn targets(&self) -> Option<&Vec<String>> {
		self.targets.as_ref()
	}

	pub fn reset_targets(&mut self) {
		self.targets = None;
	}
}
