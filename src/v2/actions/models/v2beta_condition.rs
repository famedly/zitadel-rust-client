/*
 * Action Service
 *
 * This API is intended to manage custom executions (previously known as
 * actions) in a ZITADEL instance. This service is in beta state. It can AND
 * will continue breaking until a stable version is released.
 *
 * OpenAPI spec version: 2.0-beta
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct V2betaCondition {
	/// Condition-type to execute if a request on the defined API point happens.
	#[serde(rename = "request")]
	request: Option<super::V2betaRequestExecution>,
	/// Condition-type to execute on response if a request on the defined API
	/// point happens.
	#[serde(rename = "response")]
	response: Option<super::V2betaResponseExecution>,
	/// Condition-type to execute if function is used, replaces actions v1.
	#[serde(rename = "function")]
	function: Option<super::V2betaFunctionExecution>,
	/// Condition-type to execute if an event is created in the system.
	#[serde(rename = "event")]
	event: Option<super::V2betaEventExecution>,
}

impl V2betaCondition {
	pub fn new() -> V2betaCondition {
		V2betaCondition { request: None, response: None, function: None, event: None }
	}

	pub fn set_request(&mut self, request: super::V2betaRequestExecution) {
		self.request = Some(request);
	}

	pub fn with_request(mut self, request: super::V2betaRequestExecution) -> V2betaCondition {
		self.request = Some(request);
		self
	}

	pub fn request(&self) -> Option<&super::V2betaRequestExecution> {
		self.request.as_ref()
	}

	pub fn reset_request(&mut self) {
		self.request = None;
	}

	pub fn set_response(&mut self, response: super::V2betaResponseExecution) {
		self.response = Some(response);
	}

	pub fn with_response(mut self, response: super::V2betaResponseExecution) -> V2betaCondition {
		self.response = Some(response);
		self
	}

	pub fn response(&self) -> Option<&super::V2betaResponseExecution> {
		self.response.as_ref()
	}

	pub fn reset_response(&mut self) {
		self.response = None;
	}

	pub fn set_function(&mut self, function: super::V2betaFunctionExecution) {
		self.function = Some(function);
	}

	pub fn with_function(mut self, function: super::V2betaFunctionExecution) -> V2betaCondition {
		self.function = Some(function);
		self
	}

	pub fn function(&self) -> Option<&super::V2betaFunctionExecution> {
		self.function.as_ref()
	}

	pub fn reset_function(&mut self) {
		self.function = None;
	}

	pub fn set_event(&mut self, event: super::V2betaEventExecution) {
		self.event = Some(event);
	}

	pub fn with_event(mut self, event: super::V2betaEventExecution) -> V2betaCondition {
		self.event = Some(event);
		self
	}

	pub fn event(&self) -> Option<&super::V2betaEventExecution> {
		self.event.as_ref()
	}

	pub fn reset_event(&mut self) {
		self.event = None;
	}
}
