/*
 * Action Service
 *
 * This API is intended to manage custom executions (previously known as
 * actions) in a ZITADEL instance. This service is in beta state. It can AND
 * will continue breaking until a stable version is released.
 *
 * OpenAPI spec version: 2.0-beta
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct V2betaUpdateTargetResponse {
	/// The timestamp of the change of the target.
	#[serde(rename = "changeDate")]
	change_date: Option<String>,
	/// Key used to sign and check payload sent to the target.
	#[serde(rename = "signingKey")]
	signing_key: Option<String>,
}

impl V2betaUpdateTargetResponse {
	pub fn new() -> V2betaUpdateTargetResponse {
		V2betaUpdateTargetResponse { change_date: None, signing_key: None }
	}

	pub fn set_change_date(&mut self, change_date: String) {
		self.change_date = Some(change_date);
	}

	pub fn with_change_date(mut self, change_date: String) -> V2betaUpdateTargetResponse {
		self.change_date = Some(change_date);
		self
	}

	pub fn change_date(&self) -> Option<&String> {
		self.change_date.as_ref()
	}

	pub fn reset_change_date(&mut self) {
		self.change_date = None;
	}

	pub fn set_signing_key(&mut self, signing_key: String) {
		self.signing_key = Some(signing_key);
	}

	pub fn with_signing_key(mut self, signing_key: String) -> V2betaUpdateTargetResponse {
		self.signing_key = Some(signing_key);
		self
	}

	pub fn signing_key(&self) -> Option<&String> {
		self.signing_key.as_ref()
	}

	pub fn reset_signing_key(&mut self) {
		self.signing_key = None;
	}
}
