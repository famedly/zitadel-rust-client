/*
 * Action Service
 *
 * This API is intended to manage custom executions (previously known as
 * actions) in a ZITADEL instance. This service is in beta state. It can AND
 * will continue breaking until a stable version is released.
 *
 * OpenAPI spec version: 2.0-beta
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct V2betaExecution {
	#[serde(rename = "condition")]
	condition: Option<super::V2betaCondition>,
	/// The timestamp of the execution creation.
	#[serde(rename = "creationDate")]
	creation_date: Option<String>,
	/// The timestamp of the last change to the execution.
	#[serde(rename = "changeDate")]
	change_date: Option<String>,
	/// Ordered list of targets called during the execution.
	#[serde(rename = "targets")]
	targets: Option<Vec<String>>,
}

impl V2betaExecution {
	pub fn new() -> V2betaExecution {
		V2betaExecution { condition: None, creation_date: None, change_date: None, targets: None }
	}

	pub fn set_condition(&mut self, condition: super::V2betaCondition) {
		self.condition = Some(condition);
	}

	pub fn with_condition(mut self, condition: super::V2betaCondition) -> V2betaExecution {
		self.condition = Some(condition);
		self
	}

	pub fn condition(&self) -> Option<&super::V2betaCondition> {
		self.condition.as_ref()
	}

	pub fn reset_condition(&mut self) {
		self.condition = None;
	}

	pub fn set_creation_date(&mut self, creation_date: String) {
		self.creation_date = Some(creation_date);
	}

	pub fn with_creation_date(mut self, creation_date: String) -> V2betaExecution {
		self.creation_date = Some(creation_date);
		self
	}

	pub fn creation_date(&self) -> Option<&String> {
		self.creation_date.as_ref()
	}

	pub fn reset_creation_date(&mut self) {
		self.creation_date = None;
	}

	pub fn set_change_date(&mut self, change_date: String) {
		self.change_date = Some(change_date);
	}

	pub fn with_change_date(mut self, change_date: String) -> V2betaExecution {
		self.change_date = Some(change_date);
		self
	}

	pub fn change_date(&self) -> Option<&String> {
		self.change_date.as_ref()
	}

	pub fn reset_change_date(&mut self) {
		self.change_date = None;
	}

	pub fn set_targets(&mut self, targets: Vec<String>) {
		self.targets = Some(targets);
	}

	pub fn with_targets(mut self, targets: Vec<String>) -> V2betaExecution {
		self.targets = Some(targets);
		self
	}

	pub fn targets(&self) -> Option<&Vec<String>> {
		self.targets.as_ref()
	}

	pub fn reset_targets(&mut self) {
		self.targets = None;
	}
}
