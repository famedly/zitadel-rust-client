// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Action Service
 *
 * This API is intended to manage custom executions (previously known as
 * actions) in a ZITADEL instance. This service is in beta state. It can AND
 * will continue breaking until a stable version is released.
 *
 * OpenAPI spec version: 2.0-beta
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct V2betaExecutionSearchFilter {
	#[serde(rename = "inConditionsFilter")]
	in_conditions_filter: Option<super::V2betaInConditionsFilter>,
	#[serde(rename = "executionTypeFilter")]
	execution_type_filter: Option<super::V2betaExecutionTypeFilter>,
	#[serde(rename = "targetFilter")]
	target_filter: Option<super::V2betaTargetFilter>,
}

impl V2betaExecutionSearchFilter {
	pub fn new() -> V2betaExecutionSearchFilter {
		V2betaExecutionSearchFilter {
			in_conditions_filter: None,
			execution_type_filter: None,
			target_filter: None,
		}
	}

	pub fn set_in_conditions_filter(
		&mut self,
		in_conditions_filter: super::V2betaInConditionsFilter,
	) {
		self.in_conditions_filter = Some(in_conditions_filter);
	}

	pub fn with_in_conditions_filter(
		mut self,
		in_conditions_filter: super::V2betaInConditionsFilter,
	) -> V2betaExecutionSearchFilter {
		self.in_conditions_filter = Some(in_conditions_filter);
		self
	}

	pub fn in_conditions_filter(&self) -> Option<&super::V2betaInConditionsFilter> {
		self.in_conditions_filter.as_ref()
	}

	pub fn reset_in_conditions_filter(&mut self) {
		self.in_conditions_filter = None;
	}

	pub fn set_execution_type_filter(
		&mut self,
		execution_type_filter: super::V2betaExecutionTypeFilter,
	) {
		self.execution_type_filter = Some(execution_type_filter);
	}

	pub fn with_execution_type_filter(
		mut self,
		execution_type_filter: super::V2betaExecutionTypeFilter,
	) -> V2betaExecutionSearchFilter {
		self.execution_type_filter = Some(execution_type_filter);
		self
	}

	pub fn execution_type_filter(&self) -> Option<&super::V2betaExecutionTypeFilter> {
		self.execution_type_filter.as_ref()
	}

	pub fn reset_execution_type_filter(&mut self) {
		self.execution_type_filter = None;
	}

	pub fn set_target_filter(&mut self, target_filter: super::V2betaTargetFilter) {
		self.target_filter = Some(target_filter);
	}

	pub fn with_target_filter(
		mut self,
		target_filter: super::V2betaTargetFilter,
	) -> V2betaExecutionSearchFilter {
		self.target_filter = Some(target_filter);
		self
	}

	pub fn target_filter(&self) -> Option<&super::V2betaTargetFilter> {
		self.target_filter.as_ref()
	}

	pub fn reset_target_filter(&mut self) {
		self.target_filter = None;
	}
}
