/*
 * Action Service
 *
 * This API is intended to manage custom executions (previously known as
 * actions) in a ZITADEL instance. This service is in beta state. It can AND
 * will continue breaking until a stable version is released.
 *
 * OpenAPI spec version: 2.0-beta
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct V2betaTargetNameFilter {
	/// Defines the name of the target to query for.
	#[serde(rename = "targetName")]
	target_name: Option<String>,
	/// defines which text equality method is used
	#[serde(rename = "method")]
	method: Option<super::V2betaTextFilterMethod>,
}

impl V2betaTargetNameFilter {
	pub fn new() -> V2betaTargetNameFilter {
		V2betaTargetNameFilter { target_name: None, method: None }
	}

	pub fn set_target_name(&mut self, target_name: String) {
		self.target_name = Some(target_name);
	}

	pub fn with_target_name(mut self, target_name: String) -> V2betaTargetNameFilter {
		self.target_name = Some(target_name);
		self
	}

	pub fn target_name(&self) -> Option<&String> {
		self.target_name.as_ref()
	}

	pub fn reset_target_name(&mut self) {
		self.target_name = None;
	}

	pub fn set_method(&mut self, method: super::V2betaTextFilterMethod) {
		self.method = Some(method);
	}

	pub fn with_method(mut self, method: super::V2betaTextFilterMethod) -> V2betaTargetNameFilter {
		self.method = Some(method);
		self
	}

	pub fn method(&self) -> Option<&super::V2betaTextFilterMethod> {
		self.method.as_ref()
	}

	pub fn reset_method(&mut self) {
		self.method = None;
	}
}
