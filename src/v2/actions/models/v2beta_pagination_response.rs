// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Action Service
 *
 * This API is intended to manage custom executions (previously known as
 * actions) in a ZITADEL instance. This service is in beta state. It can AND
 * will continue breaking until a stable version is released.
 *
 * OpenAPI spec version: 2.0-beta
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct V2betaPaginationResponse {
	/// Absolute number of objects matching the query, regardless of applied
	/// limit.
	#[serde(rename = "totalResult")]
	total_result: Option<String>,
	/// Applied limit from query, defines maximum amount of objects per request,
	/// to compare if all objects are returned.
	#[serde(rename = "appliedLimit")]
	applied_limit: Option<String>,
}

impl V2betaPaginationResponse {
	pub fn new() -> V2betaPaginationResponse {
		V2betaPaginationResponse { total_result: None, applied_limit: None }
	}

	pub fn set_total_result(&mut self, total_result: String) {
		self.total_result = Some(total_result);
	}

	pub fn with_total_result(mut self, total_result: String) -> V2betaPaginationResponse {
		self.total_result = Some(total_result);
		self
	}

	pub fn total_result(&self) -> Option<&String> {
		self.total_result.as_ref()
	}

	pub fn reset_total_result(&mut self) {
		self.total_result = None;
	}

	pub fn set_applied_limit(&mut self, applied_limit: String) {
		self.applied_limit = Some(applied_limit);
	}

	pub fn with_applied_limit(mut self, applied_limit: String) -> V2betaPaginationResponse {
		self.applied_limit = Some(applied_limit);
		self
	}

	pub fn applied_limit(&self) -> Option<&String> {
		self.applied_limit.as_ref()
	}

	pub fn reset_applied_limit(&mut self) {
		self.applied_limit = None;
	}
}
