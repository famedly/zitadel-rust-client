/*
 * Action Service
 *
 * This API is intended to manage custom executions (previously known as
 * actions) in a ZITADEL instance. This service is in beta state. It can AND
 * will continue breaking until a stable version is released.
 *
 * OpenAPI spec version: 2.0-beta
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct V2betaListExecutionsResponse {
	#[serde(rename = "pagination")]
	pagination: Option<super::V2betaPaginationResponse>,
	#[serde(rename = "result")]
	pub result: Option<Vec<super::V2betaExecution>>,
}

impl V2betaListExecutionsResponse {
	pub fn new() -> V2betaListExecutionsResponse {
		V2betaListExecutionsResponse { pagination: None, result: None }
	}

	pub fn set_pagination(&mut self, pagination: super::V2betaPaginationResponse) {
		self.pagination = Some(pagination);
	}

	pub fn with_pagination(
		mut self,
		pagination: super::V2betaPaginationResponse,
	) -> V2betaListExecutionsResponse {
		self.pagination = Some(pagination);
		self
	}

	pub fn pagination(&self) -> Option<&super::V2betaPaginationResponse> {
		self.pagination.as_ref()
	}

	pub fn reset_pagination(&mut self) {
		self.pagination = None;
	}

	pub fn set_result(&mut self, result: Vec<super::V2betaExecution>) {
		self.result = Some(result);
	}

	pub fn with_result(
		mut self,
		result: Vec<super::V2betaExecution>,
	) -> V2betaListExecutionsResponse {
		self.result = Some(result);
		self
	}

	pub fn result(&self) -> Option<&Vec<super::V2betaExecution>> {
		self.result.as_ref()
	}

	pub fn reset_result(&mut self) {
		self.result = None;
	}
}
