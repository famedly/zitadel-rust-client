// SPDX-FileCopyrightText: 2025 Famedly GmbH (info@famedly.com)
//
// SPDX-License-Identifier: Apache-2.0

/*
 * Action Service
 *
 * This API is intended to manage custom executions (previously known as
 * actions) in a ZITADEL instance. This service is in beta state. It can AND
 * will continue breaking until a stable version is released.
 *
 * OpenAPI spec version: 2.0-beta
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct V2betaEventExecution {
	/// Event name as condition.
	#[serde(rename = "event")]
	event: Option<String>,
	/// Event group as condition, all events under this group.
	#[serde(rename = "group")]
	group: Option<String>,
	/// all events as condition.
	#[serde(rename = "all")]
	all: Option<bool>,
}

impl V2betaEventExecution {
	pub fn new() -> V2betaEventExecution {
		V2betaEventExecution { event: None, group: None, all: None }
	}

	pub fn set_event(&mut self, event: String) {
		self.event = Some(event);
	}

	pub fn with_event(mut self, event: String) -> V2betaEventExecution {
		self.event = Some(event);
		self
	}

	pub fn event(&self) -> Option<&String> {
		self.event.as_ref()
	}

	pub fn reset_event(&mut self) {
		self.event = None;
	}

	pub fn set_group(&mut self, group: String) {
		self.group = Some(group);
	}

	pub fn with_group(mut self, group: String) -> V2betaEventExecution {
		self.group = Some(group);
		self
	}

	pub fn group(&self) -> Option<&String> {
		self.group.as_ref()
	}

	pub fn reset_group(&mut self) {
		self.group = None;
	}

	pub fn set_all(&mut self, all: bool) {
		self.all = Some(all);
	}

	pub fn with_all(mut self, all: bool) -> V2betaEventExecution {
		self.all = Some(all);
		self
	}

	pub fn all(&self) -> Option<&bool> {
		self.all.as_ref()
	}

	pub fn reset_all(&mut self) {
		self.all = None;
	}
}
