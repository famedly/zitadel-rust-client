/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
/// InUserEmailsQuery : Query for users with email in list of emails.

#[allow(unused_imports)]
use serde_json::Value;

use crate::users::models;

#[derive(Debug, Serialize, Deserialize)]
pub struct InUserEmailsQuery {
	/// the emails of the users to include
	#[serde(rename = "userEmails")]
	user_emails: Option<Vec<String>>,
}

impl InUserEmailsQuery {
	/// Query for users with email in list of emails.
	pub fn new() -> InUserEmailsQuery {
		InUserEmailsQuery { user_emails: None }
	}

	pub fn set_user_emails(&mut self, user_emails: Vec<String>) {
		self.user_emails = Some(user_emails);
	}

	pub fn with_user_emails(mut self, user_emails: Vec<String>) -> InUserEmailsQuery {
		self.user_emails = Some(user_emails);
		self
	}

	pub fn user_emails(&self) -> Option<&Vec<String>> {
		self.user_emails.as_ref()
	}

	pub fn reset_user_emails(&mut self) {
		self.user_emails = None;
	}
}
