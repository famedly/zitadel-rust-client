/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::users::models;

#[derive(Debug, Serialize, Deserialize)]
pub struct HumanPhone {
	#[serde(rename = "phone")]
	phone: Option<String>,
	#[serde(rename = "isVerified")]
	is_verified: Option<bool>,
}

impl HumanPhone {
	pub fn new() -> HumanPhone {
		HumanPhone { phone: None, is_verified: None }
	}

	pub fn set_phone(&mut self, phone: String) {
		self.phone = Some(phone);
	}

	pub fn with_phone(mut self, phone: String) -> HumanPhone {
		self.phone = Some(phone);
		self
	}

	pub fn phone(&self) -> Option<&String> {
		self.phone.as_ref()
	}

	pub fn reset_phone(&mut self) {
		self.phone = None;
	}

	pub fn set_is_verified(&mut self, is_verified: bool) {
		self.is_verified = Some(is_verified);
	}

	pub fn with_is_verified(mut self, is_verified: bool) -> HumanPhone {
		self.is_verified = Some(is_verified);
		self
	}

	pub fn is_verified(&self) -> Option<&bool> {
		self.is_verified.as_ref()
	}

	pub fn reset_is_verified(&mut self) {
		self.is_verified = None;
	}
}
