/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::users::models;

#[derive(Debug, Serialize, Deserialize)]
pub struct MachineUser {
	#[serde(rename = "name")]
	name: Option<String>,
	#[serde(rename = "description")]
	description: Option<String>,
	#[serde(rename = "hasSecret")]
	has_secret: Option<bool>,
	/// Type of access token to receive
	#[serde(rename = "accessTokenType")]
	access_token_type: Option<models::AccessTokenType>,
}

impl MachineUser {
	pub fn new() -> MachineUser {
		MachineUser { name: None, description: None, has_secret: None, access_token_type: None }
	}

	pub fn set_name(&mut self, name: String) {
		self.name = Some(name);
	}

	pub fn with_name(mut self, name: String) -> MachineUser {
		self.name = Some(name);
		self
	}

	pub fn name(&self) -> Option<&String> {
		self.name.as_ref()
	}

	pub fn reset_name(&mut self) {
		self.name = None;
	}

	pub fn set_description(&mut self, description: String) {
		self.description = Some(description);
	}

	pub fn with_description(mut self, description: String) -> MachineUser {
		self.description = Some(description);
		self
	}

	pub fn description(&self) -> Option<&String> {
		self.description.as_ref()
	}

	pub fn reset_description(&mut self) {
		self.description = None;
	}

	pub fn set_has_secret(&mut self, has_secret: bool) {
		self.has_secret = Some(has_secret);
	}

	pub fn with_has_secret(mut self, has_secret: bool) -> MachineUser {
		self.has_secret = Some(has_secret);
		self
	}

	pub fn has_secret(&self) -> Option<&bool> {
		self.has_secret.as_ref()
	}

	pub fn reset_has_secret(&mut self) {
		self.has_secret = None;
	}

	pub fn set_access_token_type(&mut self, access_token_type: models::AccessTokenType) {
		self.access_token_type = Some(access_token_type);
	}

	pub fn with_access_token_type(
		mut self,
		access_token_type: models::AccessTokenType,
	) -> MachineUser {
		self.access_token_type = Some(access_token_type);
		self
	}

	pub fn access_token_type(&self) -> Option<&models::AccessTokenType> {
		self.access_token_type.as_ref()
	}

	pub fn reset_access_token_type(&mut self) {
		self.access_token_type = None;
	}
}
