/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::users::models;

#[derive(Debug, Serialize, Deserialize)]
pub struct Organization {
	#[serde(rename = "orgId")]
	org_id: Option<String>,
	#[serde(rename = "orgDomain")]
	org_domain: Option<String>,
}

impl Organization {
	pub fn new() -> Organization {
		Organization { org_id: None, org_domain: None }
	}

	pub fn set_org_id(&mut self, org_id: String) {
		self.org_id = Some(org_id);
	}

	pub fn with_org_id(mut self, org_id: String) -> Organization {
		self.org_id = Some(org_id);
		self
	}

	pub fn org_id(&self) -> Option<&String> {
		self.org_id.as_ref()
	}

	pub fn reset_org_id(&mut self) {
		self.org_id = None;
	}

	pub fn set_org_domain(&mut self, org_domain: String) {
		self.org_domain = Some(org_domain);
	}

	pub fn with_org_domain(mut self, org_domain: String) -> Organization {
		self.org_domain = Some(org_domain);
		self
	}

	pub fn org_domain(&self) -> Option<&String> {
		self.org_domain.as_ref()
	}

	pub fn reset_org_domain(&mut self) {
		self.org_domain = None;
	}
}
