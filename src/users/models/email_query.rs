/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
/// EmailQuery : Query for users with a specific email.

#[allow(unused_imports)]
use serde_json::Value;

use crate::users::models;

#[derive(Debug, Serialize, Deserialize)]
pub struct EmailQuery {
	/// email address of the user
	#[serde(rename = "emailAddress")]
	email_address: String,
	/// defines which text equality method is used
	#[serde(rename = "method")]
	method: Option<models::TextQueryMethod>,
}

impl EmailQuery {
	/// Query for users with a specific email.
	pub fn new(email_address: String) -> EmailQuery {
		EmailQuery { email_address: email_address, method: None }
	}

	pub fn set_email_address(&mut self, email_address: String) {
		self.email_address = email_address;
	}

	pub fn with_email_address(mut self, email_address: String) -> EmailQuery {
		self.email_address = email_address;
		self
	}

	pub fn email_address(&self) -> &String {
		&self.email_address
	}

	pub fn set_method(&mut self, method: models::TextQueryMethod) {
		self.method = Some(method);
	}

	pub fn with_method(mut self, method: models::TextQueryMethod) -> EmailQuery {
		self.method = Some(method);
		self
	}

	pub fn method(&self) -> Option<&models::TextQueryMethod> {
		self.method.as_ref()
	}

	pub fn reset_method(&mut self) {
		self.method = None;
	}
}
