/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize, Default)]
pub struct IdpLink {
	/// ID of the identity provider
	#[serde(rename = "idpId")]
	idp_id: Option<String>,
	/// ID of the user of the identity provider
	#[serde(rename = "userId")]
	user_id: Option<String>,
	/// username of the user of the identity provider
	#[serde(rename = "userName")]
	user_name: Option<String>,
}

impl IdpLink {
	pub fn new() -> IdpLink {
		IdpLink { idp_id: None, user_id: None, user_name: None }
	}

	pub fn set_idp_id(&mut self, idp_id: String) {
		self.idp_id = Some(idp_id);
	}

	pub fn with_idp_id(mut self, idp_id: String) -> IdpLink {
		self.idp_id = Some(idp_id);
		self
	}

	pub fn idp_id(&self) -> Option<&String> {
		self.idp_id.as_ref()
	}

	pub fn reset_idp_id(&mut self) {
		self.idp_id = None;
	}

	pub fn set_user_id(&mut self, user_id: String) {
		self.user_id = Some(user_id);
	}

	pub fn with_user_id(mut self, user_id: String) -> IdpLink {
		self.user_id = Some(user_id);
		self
	}

	pub fn user_id(&self) -> Option<&String> {
		self.user_id.as_ref()
	}

	pub fn reset_user_id(&mut self) {
		self.user_id = None;
	}

	pub fn set_user_name(&mut self, user_name: String) {
		self.user_name = Some(user_name);
	}

	pub fn with_user_name(mut self, user_name: String) -> IdpLink {
		self.user_name = Some(user_name);
		self
	}

	pub fn user_name(&self) -> Option<&String> {
		self.user_name.as_ref()
	}

	pub fn reset_user_name(&mut self) {
		self.user_name = None;
	}
}
