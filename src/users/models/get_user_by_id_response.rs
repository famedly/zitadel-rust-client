/*
 * User Service
 *
 * This API is intended to manage users in a ZITADEL instance.
 *
 * OpenAPI spec version: 2.0
 * Contact: hi@zitadel.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use serde_json::Value;

use crate::users::models;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetUserByIdResponse {
	#[serde(rename = "details")]
	details: Option<models::Details>,
	#[serde(rename = "user")]
	user: Option<models::User>,
}

impl GetUserByIdResponse {
	pub fn new() -> GetUserByIdResponse {
		GetUserByIdResponse { details: None, user: None }
	}

	pub fn set_details(&mut self, details: models::Details) {
		self.details = Some(details);
	}

	pub fn with_details(mut self, details: models::Details) -> GetUserByIdResponse {
		self.details = Some(details);
		self
	}

	pub fn details(&self) -> Option<&models::Details> {
		self.details.as_ref()
	}

	pub fn reset_details(&mut self) {
		self.details = None;
	}

	pub fn set_user(&mut self, user: models::User) {
		self.user = Some(user);
	}

	pub fn with_user(mut self, user: models::User) -> GetUserByIdResponse {
		self.user = Some(user);
		self
	}

	pub fn user(&self) -> Option<&models::User> {
		self.user.as_ref()
	}

	pub fn reset_user(&mut self) {
		self.user = None;
	}
}
